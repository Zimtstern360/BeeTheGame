<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LinqForGeometry.ExternalModules</name>
    </assembly>
    <members>
        <member name="T:LFG.ExternalModules.Transformations.Transformations">
            <summary>
            This class provides some basic geometry transformations to apply on a LFG geometry object.
            For now, this is included as demos:
            - Translation.
            - Rotation on global axis.
            - Scaling of the object itself.
            
            You are free to extend this list as you wish.
            </summary>
        </member>
        <member name="M:LFG.ExternalModules.Transformations.Transformations.Transform(Fusee.Math.float4x4,LinqForGeometry.Core.Geometry@)">
            <summary>
            This method can transform the object with a special matrix provided by the user.
            This method is applied using a basic LINQ/Lambda expression.
            </summary>
            <param name="transformationMatrix">float4x4 transformation Matrix. A matrix provided by the user to apply on the geometry.</param>
            <param name="geo">Geometry geo. The geometry object you want to do the translations on.</param>
            <returns>Boolean - true if the operation was succesful, false if not.</returns>
        </member>
        <member name="M:LFG.ExternalModules.Transformations.Transformations.Scale(System.Single,System.Single,System.Single,LinqForGeometry.Core.Geometry@)">
            <summary>
            This method can scale the object bigger or smaller dependent on the input parameters.
            This method is applied using a basic LINQ/Lambda expression.
            </summary>
            <param name="scalarX">Scalar amount for x.</param>
            <param name="scalarY">Scalar amount for y.</param>
            <param name="scalarZ">Scalar amount for z.</param>
            <param name="geo">Geometry geo. The geometry object you want to do the translations on.</param>
            <returns>Boolean - true if the operation was succesful, false if not.</returns>
        </member>
        <member name="M:LFG.ExternalModules.Transformations.Transformations.Translate(System.Single,System.Single,System.Single,LinqForGeometry.Core.Geometry@)">
            <summary>
            This method translates the model to another position.
            This method is applied using a basic LINQ/Lambda expression.
            </summary>
            <param name="tX">float factor</param>
            <param name="tY">float factor</param>
            <param name="tZ">float factor</param>
            <param name="geo">Geometry geo. The geometry object you want to do the translations on.</param>
            <returns>bool - true when operation succeeded</returns>
        </member>
        <member name="M:LFG.ExternalModules.Transformations.Transformations.RotateX(System.Single,LinqForGeometry.Core.Geometry@)">
            <summary>
            Rotates the object on the X-Axis.
            This method is applied using a basic LINQ/Lambda expression.
            </summary>
            <param name="alpha">a float value representing an angle.</param>
            <param name="geo">Geometry geo. The geometry object you want to do the translations on.</param>
            <returns>bool - true if the operation succeeded.</returns>
        </member>
        <member name="M:LFG.ExternalModules.Transformations.Transformations.RotateY(System.Single,LinqForGeometry.Core.Geometry@)">
            <summary>
            Rotates the object on the Y-Axis.
            This method is applied using a basic LINQ/Lambda expression.
            </summary>
            <param name="alpha">a float value representing an angle.</param>
            <param name="geo">Geometry geo. The geometry object you want to do the translations on.</param>
            <returns>bool - true if the operation succeeded.</returns>
        </member>
        <member name="M:LFG.ExternalModules.Transformations.Transformations.RotateZ(System.Single,LinqForGeometry.Core.Geometry@)">
            <summary>
            Rotates the object on the Z-Axis.
            This method is applied using a basic LINQ/Lambda expression.
            </summary>
            <param name="alpha">a float value representing an angle.</param>
            <param name="geo">Geometry geo. The geometry object you want to do the translations on.</param>
            <returns>bool - true if the operation succeeded.</returns>
        </member>
    </members>
</doc>
