/* Generated by JSIL v0.7.8 build 970. See http://jsil.org/ for more information. */ 
var $asm01 = JSIL.DeclareAssembly("Fusee.Engine.Common, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("Fusee");
JSIL.DeclareNamespace("Fusee.Engine");
/* class Fusee.Engine.InjectMeAttribute */ 

(function InjectMeAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Attribute)) ();
  };

  function InjectMeAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Fusee.Engine.InjectMeAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      InjectMeAttribute__ctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Field", "Parameter", "Property")]; });

})();

/* class Fusee.Engine.FuseeApplicationAttribute */ 

(function FuseeApplicationAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Attribute)) ();
  };

  function FuseeApplicationAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "Fusee.Engine.FuseeApplicationAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      FuseeApplicationAttribute__ctor
    );

    $.Field({Static:false, Public:true }, "Name", $.String); 
    $.Field({Static:false, Public:true }, "Description", $.String); 
    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; });

})();

/* struct Fusee.Engine.ColorUint */ 

(function ColorUint$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm04.Fusee.Math.float4)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Fusee.Math.float3)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm07.System.Single))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm07.System.Byte))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.IFormatProvider)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ColorUint"), [$asm07.TypeRef("System.Int32")], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ColorUint"), [$asm07.TypeRef("System.UInt32")], []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentNullException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Fusee.Engine.ColorUint"), [
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single"), 
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single")
      ]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Fusee.Engine.ColorUint"), [
        $asm07.TypeRef("System.Byte"), $asm07.TypeRef("System.Byte"), 
        $asm07.TypeRef("System.Byte"), $asm07.TypeRef("System.Byte")
      ]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Fusee.Engine.ColorUint"), [$asm07.TypeRef("System.Int32")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("Fusee.Engine.ColorUint"), [$asm07.TypeRef("System.UInt32")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Math.float3"), [
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single"), 
        $asm07.TypeRef("System.Single")
      ]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Math.float4"), [
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single"), 
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single")
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.String"), [$asm07.TypeRef("System.IFormatProvider")], []))) ();
  };

  function ColorUint__ctor$00 (value) {
    this.B = value;
    this.G = value;
    this.R = value;
    this.A = value;
  };

  function ColorUint__ctor$01 (value) {
    this.A = (this.R = (this.G = (this.B = $thisType.ToByte(value))));
  };

  function ColorUint__ctor$02 (red, green, blue, alpha) {
    this.R = red;
    this.G = green;
    this.B = blue;
    this.A = alpha;
  };

  function ColorUint__ctor$03 (red, green, blue, alpha) {
    this.R = $thisType.ToByte(red);
    this.G = $thisType.ToByte(green);
    this.B = $thisType.ToByte(blue);
    this.A = $thisType.ToByte(alpha);
  };

  function ColorUint__ctor$04 (value) {
    this.R = $thisType.ToByte(value.x);
    this.G = $thisType.ToByte(value.y);
    this.B = $thisType.ToByte(value.z);
    this.A = $thisType.ToByte(value.w);
  };

  function ColorUint__ctor$05 (value, alpha) {
    this.R = $thisType.ToByte(value.x);
    this.G = $thisType.ToByte(value.y);
    this.B = $thisType.ToByte(value.z);
    this.A = $thisType.ToByte(alpha);
  };

  function ColorUint__ctor$06 (rgba) {
    this.A = $T00().$Cast(((rgba >>> 24) & 255));
    this.B = $T00().$Cast(((rgba >>> 16) & 255));
    this.G = $T00().$Cast(((rgba >>> 8) & 255));
    this.R = $T00().$Cast((rgba & 255));
  };

  function ColorUint__ctor$07 (rgba) {
    this.A = $T00().$Cast(((rgba >> 24) & 255));
    this.B = $T00().$Cast(((rgba >> 16) & 255));
    this.G = $T00().$Cast(((rgba >> 8) & 255));
    this.R = $T00().$Cast((rgba & 255));
  };

  function ColorUint__ctor$08 (values) {
    if (values === null) {
      throw $S02().Construct("values");
    }
    if (values.length !== 4) {
      throw $S03().Construct("values", "There must be four and only four input values for ColorUint.");
    }
    this.R = $thisType.ToByte(values[0]);
    this.G = $thisType.ToByte(values[1]);
    this.B = $thisType.ToByte(values[2]);
    this.A = $thisType.ToByte(values[3]);
  };

  function ColorUint__ctor$09 (values) {
    if (values === null) {
      throw $S02().Construct("values");
    }
    if (values.length !== 4) {
      throw $S03().Construct("values", "There must be four and only four input values for ColorUint.");
    }
    this.R = values[0];
    this.G = values[1];
    this.B = values[2];
    this.A = values[3];
  };

  function ColorUint_Add$0A (/* ref */ left, /* ref */ right, /* ref */ result) {
    result.get().A = ((left.get().A + right.get().A) | 0);
    result.get().R = ((left.get().R + right.get().R) | 0);
    result.get().G = ((left.get().G + right.get().G) | 0);
    result.get().B = ((left.get().B + right.get().B) | 0);
  };

  function ColorUint_Add$0B (left, right) {
    return $S04().Construct(((left.R + right.R) | 0), ((left.G + right.G) | 0), ((left.B + right.B) | 0), ((left.A + right.A) | 0));
  };

  function ColorUint_AdjustContrast$0C (/* ref */ value, contrast, /* ref */ result) {
    result.get().A = value.get().A;
    result.get().R = $thisType.ToByte($T01().$Cast((0.5 + (contrast * ((value.get().R / 255) - 0.5)))));
    result.get().G = $thisType.ToByte($T01().$Cast((0.5 + (contrast * ((value.get().G / 255) - 0.5)))));
    result.get().B = $thisType.ToByte($T01().$Cast((0.5 + (contrast * ((value.get().B / 255) - 0.5)))));
  };

  function ColorUint_AdjustContrast$0D (value, contrast) {
    return $S05().Construct($thisType.ToByte($T01().$Cast((0.5 + (contrast * ((value.R / 255) - 0.5))))), $thisType.ToByte($T01().$Cast((0.5 + (contrast * ((value.G / 255) - 0.5))))), $thisType.ToByte($T01().$Cast((0.5 + (contrast * ((value.B / 255) - 0.5))))), value.A);
  };

  function ColorUint_AdjustSaturation$0E (/* ref */ value, saturation, /* ref */ result) {
    var num = +$T01().$Cast(((((value.get().R / 255) * 0.212500005960464) + ((value.get().G / 255) * 0.715399980545044)) + ((value.get().B / 255) * 0.0720999985933304)));
    result.get().A = value.get().A;
    result.get().R = $thisType.ToByte((num + (saturation * ((value.get().R / 255) - num))));
    result.get().G = $thisType.ToByte((num + (saturation * ((value.get().G / 255) - num))));
    result.get().B = $thisType.ToByte((num + (saturation * ((value.get().B / 255) - num))));
  };

  function ColorUint_AdjustSaturation$0F (value, saturation) {
    var num = +$T01().$Cast(((((value.R / 255) * 0.212500005960464) + ((value.G / 255) * 0.715399980545044)) + ((value.B / 255) * 0.0720999985933304)));
    return $S05().Construct($thisType.ToByte((num + (saturation * ((value.R / 255) - num)))), $thisType.ToByte((num + (saturation * ((value.G / 255) - num)))), $thisType.ToByte((num + (saturation * ((value.B / 255) - num)))), value.A);
  };

  function ColorUint_Clamp$10 (/* ref */ value, /* ref */ min, /* ref */ max, /* ref */ result) {
    var num = value.get().A;
    var num2 = ((num > max.get().A) ? max.get().A : num);
    var alpha = ((num2 < min.get().A) ? min.get().A : num2);
    var num3 = value.get().R;
    var num4 = ((num3 > max.get().R) ? max.get().R : num3);
    var red = ((num4 < min.get().R) ? min.get().R : num4);
    var num5 = value.get().G;
    var num6 = ((num5 > max.get().G) ? max.get().G : num5);
    var green = ((num6 < min.get().G) ? min.get().G : num6);
    var num7 = value.get().B;
    var num8 = ((num7 > max.get().B) ? max.get().B : num7);
    var blue = ((num8 < min.get().B) ? min.get().B : num8);
    result.set($S05().Construct(red, green, blue, alpha));
  };

  function ColorUint_Clamp$11 ($value, $min, $max) {
    var max = new JSIL.BoxedVariable($max);
    var min = new JSIL.BoxedVariable($min);
    var value = new JSIL.BoxedVariable($value);
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.Clamp(/* ref */ value, /* ref */ min, /* ref */ max, /* ref */ result);
    return result.get();
  };

  function ColorUint_Equals$12 (other) {
    return (!((this.R !== other.R) || 
        (this.G !== other.G) || 
        (this.B !== other.B)) && (this.A === other.A));
  };

  function ColorUint_Object_Equals (value) {
    return ((value !== null) && 
      (JSIL.GetType(value) === $thisType.__Type__) && this.Equals($thisType.$Cast(value)));
  };

  function ColorUint_FromBgra$13 (color) {
    return $S05().Construct($T00().$Cast(((color >> 16) & 255)), $T00().$Cast(((color >> 8) & 255)), $T00().$Cast((color & 255)), $T00().$Cast(((color >> 24) & 255)));
  };

  function ColorUint_FromBgra$14 (color) {
    return $S00().CallStatic($thisType, "FromBgra", null, $T05().$Cast(color));
  };

  function ColorUint_FromRgba$15 (color) {
    return $S06().Construct(color);
  };

  function ColorUint_FromRgba$16 (color) {
    return $S07().Construct(color);
  };

  function ColorUint_get_Item (index) {
    switch (index) {
      case 0: 
        var result = this.R;
        break;

      case 1: 
        result = this.G;
        break;

      case 2: 
        result = this.B;
        break;

      case 3: 
        result = this.A;
        break;

      default: 
        throw $S03().Construct("index", "Indices for ColorUint run from 0 to 3, inclusive.");

    }
    return result;
  };

  function ColorUint_GetBrightness () {
    var fR = +(this.R / 255);
    var fG = +(this.G / 255);
    var fB = +(this.B / 255);
    var AA = +fR;
    var BB = +fR;
    if (fG > this.A) {
      AA = +fG;
    }
    if (fB > this.A) {
      AA = +fB;
    }
    if (fG < this.B) {
      BB = +fG;
    }
    if (fB < this.B) {
      BB = +fB;
    }
    return +$T01().$Cast(((AA + BB) / 2));
  };

  function ColorUint_GetHashCode () {
    return ((((((this.A.GetHashCode() + this.R.GetHashCode()) | 0) + this.G.GetHashCode()) | 0) + this.B.GetHashCode()) | 0);
  };

  function ColorUint_GetHue () {
    if (!((this.R !== this.G) || (this.G !== this.B))) {
      var result = +0;
    } else {
      var num = +(this.R / 255);
      var num2 = +(this.G / 255);
      var num3 = +(this.B / 255);
      var num4 = +0;
      var num5 = +num;
      var num6 = +num;
      if (num2 > num5) {
        num5 = +num2;
      }
      if (num3 > num5) {
        num5 = +num3;
      }
      if (num2 < num6) {
        num6 = +num2;
      }
      if (num3 < num6) {
        num6 = +num3;
      }
      var num7 = +(num5 - num6);
      if (num === num5) {
        num4 = +((num2 - num3) / num7);
      } else if (num2 === num5) {
        num4 = +$T01().$Cast((2 + ((num3 - num) / num7)));
      } else if (num3 === num5) {
        num4 = +$T01().$Cast((4 + ((num - num2) / num7)));
      }
      var num8 = +(num4 * 60);
      if (num8 < 0) {
        num8 += +360;
      }
      result = +num8;
    }
    return +result;
  };

  function ColorUint_GetSaturation () {
    var num = +(this.R / 255);
    var num2 = +(this.G / 255);
    var num3 = +(this.B / 255);
    var num4 = +0;
    var num5 = +num;
    var num6 = +num;
    if (num2 > num5) {
      num5 = +num2;
    }
    if (num3 > num5) {
      num5 = +num3;
    }
    if (num2 < num6) {
      num6 = +num2;
    }
    if (num3 < num6) {
      num6 = +num3;
    }
    if (num5 !== num6) {
      num4 = +((((num5 + num6) / 2) > 0.5) ? $T01().$Cast(((num5 - num6) / ((2 - num5) - num6))) : $T01().$Cast(((num5 - num6) / (num5 + num6))));
    }
    return +num4;
  };

  function ColorUint_Lerp$17 (/* ref */ start, /* ref */ end, amount, /* ref */ result) {
    result.get().A = ((start.get().A + (amount * ((end.get().A - start.get().A) | 0))) | 0);
    result.get().R = ((start.get().R + (amount * ((end.get().R - start.get().R) | 0))) | 0);
    result.get().G = ((start.get().G + (amount * ((end.get().G - start.get().G) | 0))) | 0);
    result.get().B = ((start.get().B + (amount * ((end.get().B - start.get().B) | 0))) | 0);
  };

  function ColorUint_Lerp$18 (start, end, amount) {
    return $S05().Construct(((start.R + (amount * ((end.R - start.R) | 0))) | 0), ((start.G + (amount * ((end.G - start.G) | 0))) | 0), ((start.B + (amount * ((end.B - start.B) | 0))) | 0), ((start.A + (amount * ((end.A - start.A) | 0))) | 0));
  };

  function ColorUint_Max$19 (/* ref */ left, /* ref */ right, /* ref */ result) {
    result.get().A = ((left.get().A > right.get().A) ? left.get().A : right.get().A);
    result.get().R = ((left.get().R > right.get().R) ? left.get().R : right.get().R);
    result.get().G = ((left.get().G > right.get().G) ? left.get().G : right.get().G);
    result.get().B = ((left.get().B > right.get().B) ? left.get().B : right.get().B);
  };

  function ColorUint_Max$1A ($left, $right) {
    var right = new JSIL.BoxedVariable($right);
    var left = new JSIL.BoxedVariable($left);
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.Max(/* ref */ left, /* ref */ right, /* ref */ result);
    return result.get();
  };

  function ColorUint_Min$1B (/* ref */ left, /* ref */ right, /* ref */ result) {
    result.get().A = ((left.get().A < right.get().A) ? left.get().A : right.get().A);
    result.get().R = ((left.get().R < right.get().R) ? left.get().R : right.get().R);
    result.get().G = ((left.get().G < right.get().G) ? left.get().G : right.get().G);
    result.get().B = ((left.get().B < right.get().B) ? left.get().B : right.get().B);
  };

  function ColorUint_Min$1C ($left, $right) {
    var right = new JSIL.BoxedVariable($right);
    var left = new JSIL.BoxedVariable($left);
    var result = new JSIL.BoxedVariable(new $thisType());
    $thisType.Min(/* ref */ left, /* ref */ right, /* ref */ result);
    return result.get();
  };

  function ColorUint_Modulate$1D (/* ref */ left, /* ref */ right, /* ref */ result) {
    result.get().A = ((((left.get().A * right.get().A) | 0) / 255) | 0);
    result.get().R = ((((left.get().R * right.get().R) | 0) / 255) | 0);
    result.get().G = ((((left.get().G * right.get().G) | 0) / 255) | 0);
    result.get().B = ((((left.get().B * right.get().B) | 0) / 255) | 0);
  };

  function ColorUint_Modulate$1E (left, right) {
    return $S04().Construct(((left.R * right.R) | 0), ((left.G * right.G) | 0), ((left.B * right.B) | 0), ((left.A * right.A) | 0));
  };

  function ColorUint_Negate$1F (/* ref */ value, /* ref */ result) {
    result.get().A = ((255 - value.get().A) | 0);
    result.get().R = ((255 - value.get().R) | 0);
    result.get().G = ((255 - value.get().G) | 0);
    result.get().B = ((255 - value.get().B) | 0);
  };

  function ColorUint_Negate$20 (value) {
    return $S04().Construct(((255 - value.R) | 0), ((255 - value.G) | 0), ((255 - value.B) | 0), ((255 - value.A) | 0));
  };

  function ColorUint_op_Addition (left, right) {
    return $S04().Construct(((left.R + right.R) | 0), ((left.G + right.G) | 0), ((left.B + right.B) | 0), ((left.A + right.A) | 0));
  };

  function ColorUint_op_Equality (left, right) {
    return left.Equals(right);
  };

  function ColorUint_op_Explicit$21 (value) {
    return $S08().Construct((value.R / 255), (value.G / 255), (value.B / 255));
  };

  function ColorUint_op_Explicit$22 (value) {
    return $S09().Construct((value.R / 255), (value.G / 255), (value.B / 255), (value.A / 255));
  };

  function ColorUint_op_Explicit$23 (value) {
    return $S04().Construct(value.x, value.y, value.z, 1);
  };

  function ColorUint_op_Explicit$24 (value) {
    return $S04().Construct(value.x, value.y, value.z, value.w);
  };

  function ColorUint_op_Explicit$25 (value) {
    return $T04().$Cast(value.ToRgba());
  };

  function ColorUint_op_Explicit$26 (value) {
    return $S07().Construct(value);
  };

  function ColorUint_op_Explicit$27 (value) {
    return value.ToRgba();
  };

  function ColorUint_op_Explicit$28 (value) {
    return $S06().Construct(value);
  };

  function ColorUint_op_Inequality (left, right) {
    return !left.Equals(right);
  };

  function ColorUint_op_Multiply$29 (scale, value) {
    return $S05().Construct(((value.R * scale) | 0), ((value.G * scale) | 0), ((value.B * scale) | 0), ((value.A * scale) | 0));
  };

  function ColorUint_op_Multiply$2A (value, scale) {
    return $S05().Construct(((value.R * scale) | 0), ((value.G * scale) | 0), ((value.B * scale) | 0), ((value.A * scale) | 0));
  };

  function ColorUint_op_Multiply$2B (left, right) {
    return $S05().Construct(((((left.R * right.R) | 0) / 255) | 0), ((((left.G * right.G) | 0) / 255) | 0), ((((left.B * right.B) | 0) / 255) | 0), ((((left.A * right.A) | 0) / 255) | 0));
  };

  function ColorUint_op_Subtraction (left, right) {
    return $S04().Construct(((left.R - right.R) | 0), ((left.G - right.G) | 0), ((left.B - right.B) | 0), ((left.A - right.A) | 0));
  };

  function ColorUint_op_UnaryNegation (value) {
    return $S04().Construct((-value.R | 0), (-value.G | 0), (-value.B | 0), (-value.A | 0));
  };

  function ColorUint_op_UnaryPlus (value) {
    return value;
  };

  function ColorUint_Scale$2C (/* ref */ value, scale, /* ref */ result) {
    result.get().A = ((value.get().A * scale) | 0);
    result.get().R = ((value.get().R * scale) | 0);
    result.get().G = ((value.get().G * scale) | 0);
    result.get().B = ((value.get().B * scale) | 0);
  };

  function ColorUint_Scale$2D (value, scale) {
    return $S05().Construct(((value.R * scale) | 0), ((value.G * scale) | 0), ((value.B * scale) | 0), ((value.A * scale) | 0));
  };

  function ColorUint_set_Item (index, value) {
    switch (index) {
      case 0: 
        this.R = value;
        break;

      case 1: 
        this.G = value;
        break;

      case 2: 
        this.B = value;
        break;

      case 3: 
        this.A = value;
        break;

      default: 
        throw $S03().Construct("index", "Indices for ColorUint run from 0 to 3, inclusive.");

    }
  };

  function ColorUint_SmoothStep$2E (/* ref */ start, /* ref */ end, amount, /* ref */ result) {
    amount = +((amount > 1) ? 1 : ((amount < 0) ? 0 : amount));
    amount = +$T01().$Cast(((amount * amount) * (3 - (2 * amount))));
    result.get().A = ((start.get().A + (((end.get().A - start.get().A) | 0) * amount)) | 0);
    result.get().R = ((start.get().R + (((end.get().R - start.get().R) | 0) * amount)) | 0);
    result.get().G = ((start.get().G + (((end.get().G - start.get().G) | 0) * amount)) | 0);
    result.get().B = ((start.get().B + (((end.get().B - start.get().B) | 0) * amount)) | 0);
  };

  function ColorUint_SmoothStep$2F (start, end, amount) {
    amount = +((amount > 1) ? 1 : ((amount < 0) ? 0 : amount));
    amount = +$T01().$Cast(((amount * amount) * (3 - (2 * amount))));
    return $S05().Construct(((start.R + (((end.R - start.R) | 0) * amount)) | 0), ((start.G + (((end.G - start.G) | 0) * amount)) | 0), ((start.B + (((end.B - start.B) | 0) * amount)) | 0), ((start.A + (((end.A - start.A) | 0) * amount)) | 0));
  };

  function ColorUint_Subtract$30 (/* ref */ left, /* ref */ right, /* ref */ result) {
    result.get().A = ((left.get().A - right.get().A) | 0);
    result.get().R = ((left.get().R - right.get().R) | 0);
    result.get().G = ((left.get().G - right.get().G) | 0);
    result.get().B = ((left.get().B - right.get().B) | 0);
  };

  function ColorUint_Subtract$31 (left, right) {
    return $S04().Construct(((left.R - right.R) | 0), ((left.G - right.G) | 0), ((left.B - right.B) | 0), ((left.A - right.A) | 0));
  };

  function ColorUint_ToArray () {
    return JSIL.Array.New($T00(), [this.R, this.G, this.B, this.A]);
  };

  function ColorUint_ToBgra () {
    return (((this.B | (this.G << 8)) | (this.R << 16)) | (this.A << 24));
  };

  function ColorUint_ToByte (component) {
    var num = ((component * 255) | 0);
    return ((num < 0) ? 0 : ((num > 255) ? 255 : $T00().$Cast(num)));
  };

  function ColorUint_Tofloat3 () {
    return $S08().Construct((this.R / 255), (this.G / 255), (this.B / 255));
  };

  function ColorUint_Tofloat4 () {
    return $S09().Construct((this.R / 255), (this.G / 255), (this.B / 255), (this.A / 255));
  };

  function ColorUint_ToRgba () {
    return (((this.R | (this.G << 8)) | (this.B << 16)) | (this.A << 24));
  };

  function ColorUint_toString$32 () {
    return $T0B().Format("A:{0} R:{1} G:{2} B:{3}", JSIL.Array.New($T0A(), [this.A, this.R, this.G, this.B]));
  };

  function ColorUint_ToString$33 (format) {
    if (format === null) {
      var result = this.toString();
    } else {
      result = $T0B().Format("A:{0} R:{1} G:{2} B:{3}", JSIL.Array.New($T0A(), [JSIL.NumberToFormattedString(this.A, null, format), JSIL.NumberToFormattedString(this.R, null, format), JSIL.NumberToFormattedString(this.G, null, format), JSIL.NumberToFormattedString(this.B, null, format)]));
    }
    return result;
  };

  function ColorUint_ToString$34 (formatProvider) {
    return $T0B().Format(formatProvider, "A:{0} R:{1} G:{2} B:{3}", JSIL.Array.New($T0A(), [this.A, this.R, this.G, this.B]));
  };

  function ColorUint_ToString$35 (format, formatProvider) {
    if (format === null) {
      var result = $S0A().CallVirtual("ToString", null, this, formatProvider);
    } else {
      result = $T0B().Format(formatProvider, "A:{0} R:{1} G:{2} B:{3}", JSIL.Array.New($T0A(), [JSIL.NumberToFormattedString(this.A, null, format, formatProvider), JSIL.NumberToFormattedString(this.R, null, format, formatProvider), JSIL.NumberToFormattedString(this.G, null, format, formatProvider), JSIL.NumberToFormattedString(this.B, null, format, formatProvider)]));
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.ColorUint", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Byte], []), 
      ColorUint__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      ColorUint__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Byte, $.Byte, 
          $.Byte, $.Byte
        ], []), 
      ColorUint__ctor$02
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single
        ], []), 
      ColorUint__ctor$03
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4")], []), 
      ColorUint__ctor$04
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3"), $.Single], []), 
      ColorUint__ctor$05
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32], []), 
      ColorUint__ctor$06
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      ColorUint__ctor$07
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Single])], []), 
      ColorUint__ctor$08
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte])], []), 
      ColorUint__ctor$09
    );

    $.Method({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], []), 
      ColorUint_Add$0A
    );

    $.Method({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], []), 
      ColorUint_Add$0B
    );

    $.Method({Static:true , Public:true }, "AdjustContrast", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], []), 
      ColorUint_AdjustContrast$0C
    );

    $.Method({Static:true , Public:true }, "AdjustContrast", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], []), 
      ColorUint_AdjustContrast$0D
    );

    $.Method({Static:true , Public:true }, "AdjustSaturation", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], []), 
      ColorUint_AdjustSaturation$0E
    );

    $.Method({Static:true , Public:true }, "AdjustSaturation", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], []), 
      ColorUint_AdjustSaturation$0F
    );

    $.Method({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], []), 
      ColorUint_Clamp$10
    );

    $.Method({Static:true , Public:true }, "Clamp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type
        ], []), 
      ColorUint_Clamp$11
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type], []), 
      ColorUint_Equals$12
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object], []), 
      ColorUint_Object_Equals
    );

    $.Method({Static:true , Public:true }, "FromBgra", 
      new JSIL.MethodSignature($.Type, [$.Int32], []), 
      ColorUint_FromBgra$13
    );

    $.Method({Static:true , Public:true }, "FromBgra", 
      new JSIL.MethodSignature($.Type, [$.UInt32], []), 
      ColorUint_FromBgra$14
    );

    $.Method({Static:true , Public:true }, "FromRgba", 
      new JSIL.MethodSignature($.Type, [$.Int32], []), 
      ColorUint_FromRgba$15
    );

    $.Method({Static:true , Public:true }, "FromRgba", 
      new JSIL.MethodSignature($.Type, [$.UInt32], []), 
      ColorUint_FromRgba$16
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Byte, [$.Int32], []), 
      ColorUint_get_Item
    );

    $.Method({Static:false, Public:true }, "GetBrightness", 
      new JSIL.MethodSignature($.Single, [], []), 
      ColorUint_GetBrightness
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ColorUint_GetHashCode
    );

    $.Method({Static:false, Public:true }, "GetHue", 
      new JSIL.MethodSignature($.Single, [], []), 
      ColorUint_GetHue
    );

    $.Method({Static:false, Public:true }, "GetSaturation", 
      new JSIL.MethodSignature($.Single, [], []), 
      ColorUint_GetSaturation
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], []), 
      ColorUint_Lerp$17
    );

    $.Method({Static:true , Public:true }, "Lerp", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ], []), 
      ColorUint_Lerp$18
    );

    $.Method({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], []), 
      ColorUint_Max$19
    );

    $.Method({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], []), 
      ColorUint_Max$1A
    );

    $.Method({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], []), 
      ColorUint_Min$1B
    );

    $.Method({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], []), 
      ColorUint_Min$1C
    );

    $.Method({Static:true , Public:true }, "Modulate", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], []), 
      ColorUint_Modulate$1D
    );

    $.Method({Static:true , Public:true }, "Modulate", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], []), 
      ColorUint_Modulate$1E
    );

    $.Method({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])], []), 
      ColorUint_Negate$1F
    );

    $.Method({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type], []), 
      ColorUint_Negate$20
    );

    $.Method({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], []), 
      ColorUint_op_Addition
    );

    $.Method({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], []), 
      ColorUint_op_Equality
    );

    $.Method({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [$.Type], []), 
      ColorUint_op_Explicit$21
    );

    $.Method({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4"), [$.Type], []), 
      ColorUint_op_Explicit$22
    );

    $.Method({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      ColorUint_op_Explicit$23
    );

    $.Method({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm04.TypeRef("Fusee.Math.float4")], []), 
      ColorUint_op_Explicit$24
    );

    $.Method({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.UInt32, [$.Type], []), 
      ColorUint_op_Explicit$25
    );

    $.Method({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.UInt32], []), 
      ColorUint_op_Explicit$26
    );

    $.Method({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Int32, [$.Type], []), 
      ColorUint_op_Explicit$27
    );

    $.Method({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.Int32], []), 
      ColorUint_op_Explicit$28
    );

    $.Method({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type], []), 
      ColorUint_op_Inequality
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Single, $.Type], []), 
      ColorUint_op_Multiply$29
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], []), 
      ColorUint_op_Multiply$2A
    );

    $.Method({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], []), 
      ColorUint_op_Multiply$2B
    );

    $.Method({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], []), 
      ColorUint_op_Subtraction
    );

    $.Method({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type], []), 
      ColorUint_op_UnaryNegation
    );

    $.Method({Static:true , Public:true }, "op_UnaryPlus", 
      new JSIL.MethodSignature($.Type, [$.Type], []), 
      ColorUint_op_UnaryPlus
    );

    $.Method({Static:true , Public:true }, "Scale", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Single, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], []), 
      ColorUint_Scale$2C
    );

    $.Method({Static:true , Public:true }, "Scale", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Single], []), 
      ColorUint_Scale$2D
    );

    $.Method({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Byte], []), 
      ColorUint_set_Item
    );

    $.Method({Static:true , Public:true }, "SmoothStep", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Single, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], []), 
      ColorUint_SmoothStep$2E
    );

    $.Method({Static:true , Public:true }, "SmoothStep", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Single
        ], []), 
      ColorUint_SmoothStep$2F
    );

    $.Method({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ], []), 
      ColorUint_Subtract$30
    );

    $.Method({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type], []), 
      ColorUint_Subtract$31
    );

    $.Method({Static:false, Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], []), 
      ColorUint_ToArray
    );

    $.Method({Static:false, Public:true }, "ToBgra", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ColorUint_ToBgra
    );

    $.Method({Static:true , Public:false}, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.Single], []), 
      ColorUint_ToByte
    );

    $.Method({Static:false, Public:true }, "Tofloat3", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      ColorUint_Tofloat3
    );

    $.Method({Static:false, Public:true }, "Tofloat4", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4"), [], []), 
      ColorUint_Tofloat4
    );

    $.Method({Static:false, Public:true }, "ToRgba", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ColorUint_ToRgba
    );

    $.Method({Static:false, Public:true , Virtual:true }, "toString", 
      new JSIL.MethodSignature($.String, [], []), 
      ColorUint_toString$32
    );

    $.Method({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String], []), 
      ColorUint_ToString$33
    );

    $.Method({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.IFormatProvider")], []), 
      ColorUint_ToString$34
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.IFormatProvider")], []), 
      ColorUint_ToString$35
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Zero", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Transparent", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "AntiqueWhite", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Aqua", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Aquamarine", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Azure", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Beige", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Bisque", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Black", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "BlanchedAlmond", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Blue", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "BlueViolet", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Brown", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "BurlyWood", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "CadetBlue", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Chartreuse", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Chocolate", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Coral", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "CornflowerBlue", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Cornsilk", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Crimson", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Cyan", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkBlue", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkCyan", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkGoldenrod", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkGray", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkGreen", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkKhaki", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkMagenta", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkOliveGreen", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkOrange", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkOrchid", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkRed", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkSalmon", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkSeaGreen", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkSlateBlue", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkSlateGray", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkTurquoise", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DarkViolet", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DeepPink", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DeepSkyBlue", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DimGray", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "DodgerBlue", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "FireBrick", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "FloralWhite", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ForestGreen", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Fuchsia", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Gainsboro", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "GhostWhite", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Gold", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Goldenrod", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Gray", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Green", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "GreenYellow", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Honeydew", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "HotPink", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "IndianRed", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Indigo", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Ivory", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Khaki", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Lavender", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "LavenderBlush", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "LawnGreen", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "LemonChiffon", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "LightBlue", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "LightCoral", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "LightCyan", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "LightGoldenrodYellow", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "LightGreen", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "LightGrey", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "LightPink", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "LightSalmon", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "LightSeaGreen", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "LightSkyBlue", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "LightSlateGray", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "LightSteelBlue", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "LightYellow", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Lime", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "LimeGreen", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Linen", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Magenta", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Maroon", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "MediumAquamarine", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "MediumBlue", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "MediumOrchid", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "MediumPurple", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "MediumSeaGreen", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "MediumSlateBlue", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "MediumSpringGreen", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "MediumTurquoise", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "MediumVioletRed", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "MidnightBlue", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "MintCream", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "MistyRose", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Moccasin", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "NavajoWhite", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Navy", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "OldLace", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Olive", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "OliveDrab", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Orange", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "OrangeRed", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Orchid", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "PaleGoldenrod", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "PaleGreen", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "PaleTurquoise", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "PaleVioletRed", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "PapayaWhip", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "PeachPuff", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Peru", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Pink", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Plum", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "PowderBlue", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Purple", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Red", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "RosyBrown", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "RoyalBlue", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SaddleBrown", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Salmon", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SandyBrown", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SeaGreen", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Seashell", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Sienna", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Silver", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SkyBlue", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SlateBlue", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SlateGray", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Snow", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SpringGreen", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "SteelBlue", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Tan", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Teal", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Thistle", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Tomato", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Turquoise", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Violet", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Wheat", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "White", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "WhiteSmoke", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Yellow", $.Type); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "YellowGreen", $.Type); 
    $.Field({Static:false, Public:true }, "R", $.Byte); 
    $.Field({Static:false, Public:true }, "G", $.Byte); 
    $.Field({Static:false, Public:true }, "B", $.Byte); 
    $.Field({Static:false, Public:true }, "A", $.Byte); 
    function ColorUint__cctor () {
      $thisType.Zero = new $thisType();
      $thisType.Transparent = new $thisType();
      $thisType.AntiqueWhite = new $thisType();
      $thisType.Aqua = new $thisType();
      $thisType.Aquamarine = new $thisType();
      $thisType.Azure = new $thisType();
      $thisType.Beige = new $thisType();
      $thisType.Bisque = new $thisType();
      $thisType.Black = new $thisType();
      $thisType.BlanchedAlmond = new $thisType();
      $thisType.Blue = new $thisType();
      $thisType.BlueViolet = new $thisType();
      $thisType.Brown = new $thisType();
      $thisType.BurlyWood = new $thisType();
      $thisType.CadetBlue = new $thisType();
      $thisType.Chartreuse = new $thisType();
      $thisType.Chocolate = new $thisType();
      $thisType.Coral = new $thisType();
      $thisType.CornflowerBlue = new $thisType();
      $thisType.Cornsilk = new $thisType();
      $thisType.Crimson = new $thisType();
      $thisType.Cyan = new $thisType();
      $thisType.DarkBlue = new $thisType();
      $thisType.DarkCyan = new $thisType();
      $thisType.DarkGoldenrod = new $thisType();
      $thisType.DarkGray = new $thisType();
      $thisType.DarkGreen = new $thisType();
      $thisType.DarkKhaki = new $thisType();
      $thisType.DarkMagenta = new $thisType();
      $thisType.DarkOliveGreen = new $thisType();
      $thisType.DarkOrange = new $thisType();
      $thisType.DarkOrchid = new $thisType();
      $thisType.DarkRed = new $thisType();
      $thisType.DarkSalmon = new $thisType();
      $thisType.DarkSeaGreen = new $thisType();
      $thisType.DarkSlateBlue = new $thisType();
      $thisType.DarkSlateGray = new $thisType();
      $thisType.DarkTurquoise = new $thisType();
      $thisType.DarkViolet = new $thisType();
      $thisType.DeepPink = new $thisType();
      $thisType.DeepSkyBlue = new $thisType();
      $thisType.DimGray = new $thisType();
      $thisType.DodgerBlue = new $thisType();
      $thisType.FireBrick = new $thisType();
      $thisType.FloralWhite = new $thisType();
      $thisType.ForestGreen = new $thisType();
      $thisType.Fuchsia = new $thisType();
      $thisType.Gainsboro = new $thisType();
      $thisType.GhostWhite = new $thisType();
      $thisType.Gold = new $thisType();
      $thisType.Goldenrod = new $thisType();
      $thisType.Gray = new $thisType();
      $thisType.Green = new $thisType();
      $thisType.GreenYellow = new $thisType();
      $thisType.Honeydew = new $thisType();
      $thisType.HotPink = new $thisType();
      $thisType.IndianRed = new $thisType();
      $thisType.Indigo = new $thisType();
      $thisType.Ivory = new $thisType();
      $thisType.Khaki = new $thisType();
      $thisType.Lavender = new $thisType();
      $thisType.LavenderBlush = new $thisType();
      $thisType.LawnGreen = new $thisType();
      $thisType.LemonChiffon = new $thisType();
      $thisType.LightBlue = new $thisType();
      $thisType.LightCoral = new $thisType();
      $thisType.LightCyan = new $thisType();
      $thisType.LightGoldenrodYellow = new $thisType();
      $thisType.LightGreen = new $thisType();
      $thisType.LightGrey = new $thisType();
      $thisType.LightPink = new $thisType();
      $thisType.LightSalmon = new $thisType();
      $thisType.LightSeaGreen = new $thisType();
      $thisType.LightSkyBlue = new $thisType();
      $thisType.LightSlateGray = new $thisType();
      $thisType.LightSteelBlue = new $thisType();
      $thisType.LightYellow = new $thisType();
      $thisType.Lime = new $thisType();
      $thisType.LimeGreen = new $thisType();
      $thisType.Linen = new $thisType();
      $thisType.Magenta = new $thisType();
      $thisType.Maroon = new $thisType();
      $thisType.MediumAquamarine = new $thisType();
      $thisType.MediumBlue = new $thisType();
      $thisType.MediumOrchid = new $thisType();
      $thisType.MediumPurple = new $thisType();
      $thisType.MediumSeaGreen = new $thisType();
      $thisType.MediumSlateBlue = new $thisType();
      $thisType.MediumSpringGreen = new $thisType();
      $thisType.MediumTurquoise = new $thisType();
      $thisType.MediumVioletRed = new $thisType();
      $thisType.MidnightBlue = new $thisType();
      $thisType.MintCream = new $thisType();
      $thisType.MistyRose = new $thisType();
      $thisType.Moccasin = new $thisType();
      $thisType.NavajoWhite = new $thisType();
      $thisType.Navy = new $thisType();
      $thisType.OldLace = new $thisType();
      $thisType.Olive = new $thisType();
      $thisType.OliveDrab = new $thisType();
      $thisType.Orange = new $thisType();
      $thisType.OrangeRed = new $thisType();
      $thisType.Orchid = new $thisType();
      $thisType.PaleGoldenrod = new $thisType();
      $thisType.PaleGreen = new $thisType();
      $thisType.PaleTurquoise = new $thisType();
      $thisType.PaleVioletRed = new $thisType();
      $thisType.PapayaWhip = new $thisType();
      $thisType.PeachPuff = new $thisType();
      $thisType.Peru = new $thisType();
      $thisType.Pink = new $thisType();
      $thisType.Plum = new $thisType();
      $thisType.PowderBlue = new $thisType();
      $thisType.Purple = new $thisType();
      $thisType.Red = new $thisType();
      $thisType.RosyBrown = new $thisType();
      $thisType.RoyalBlue = new $thisType();
      $thisType.SaddleBrown = new $thisType();
      $thisType.Salmon = new $thisType();
      $thisType.SandyBrown = new $thisType();
      $thisType.SeaGreen = new $thisType();
      $thisType.Seashell = new $thisType();
      $thisType.Sienna = new $thisType();
      $thisType.Silver = new $thisType();
      $thisType.SkyBlue = new $thisType();
      $thisType.SlateBlue = new $thisType();
      $thisType.SlateGray = new $thisType();
      $thisType.Snow = new $thisType();
      $thisType.SpringGreen = new $thisType();
      $thisType.SteelBlue = new $thisType();
      $thisType.Tan = new $thisType();
      $thisType.Teal = new $thisType();
      $thisType.Thistle = new $thisType();
      $thisType.Tomato = new $thisType();
      $thisType.Turquoise = new $thisType();
      $thisType.Violet = new $thisType();
      $thisType.Wheat = new $thisType();
      $thisType.White = new $thisType();
      $thisType.WhiteSmoke = new $thisType();
      $thisType.Yellow = new $thisType();
      $thisType.YellowGreen = new $thisType();
      $thisType.Zero = $S00().CallStatic($thisType, "FromBgra", null, 0);
      $thisType.Transparent = $S01().CallStatic($thisType, "FromBgra", null, 16777215);
      $thisType.AntiqueWhite = $S01().CallStatic($thisType, "FromBgra", null, 4294634455);
      $thisType.Aqua = $S01().CallStatic($thisType, "FromBgra", null, 4278255615);
      $thisType.Aquamarine = $S01().CallStatic($thisType, "FromBgra", null, 4286578644);
      $thisType.Azure = $S01().CallStatic($thisType, "FromBgra", null, 4293984255);
      $thisType.Beige = $S01().CallStatic($thisType, "FromBgra", null, 4294309340);
      $thisType.Bisque = $S01().CallStatic($thisType, "FromBgra", null, 4294960324);
      $thisType.Black = $S01().CallStatic($thisType, "FromBgra", null, 4278190080);
      $thisType.BlanchedAlmond = $S01().CallStatic($thisType, "FromBgra", null, 4294962125);
      $thisType.Blue = $S01().CallStatic($thisType, "FromBgra", null, 4278190335);
      $thisType.BlueViolet = $S01().CallStatic($thisType, "FromBgra", null, 4287245282);
      $thisType.Brown = $S01().CallStatic($thisType, "FromBgra", null, 4289014314);
      $thisType.BurlyWood = $S01().CallStatic($thisType, "FromBgra", null, 4292786311);
      $thisType.CadetBlue = $S01().CallStatic($thisType, "FromBgra", null, 4284456608);
      $thisType.Chartreuse = $S01().CallStatic($thisType, "FromBgra", null, 4286578432);
      $thisType.Chocolate = $S01().CallStatic($thisType, "FromBgra", null, 4291979550);
      $thisType.Coral = $S01().CallStatic($thisType, "FromBgra", null, 4294934352);
      $thisType.CornflowerBlue = $S01().CallStatic($thisType, "FromBgra", null, 4284782061);
      $thisType.Cornsilk = $S01().CallStatic($thisType, "FromBgra", null, 4294965468);
      $thisType.Crimson = $S01().CallStatic($thisType, "FromBgra", null, 4292613180);
      $thisType.Cyan = $S01().CallStatic($thisType, "FromBgra", null, 4278255615);
      $thisType.DarkBlue = $S01().CallStatic($thisType, "FromBgra", null, 4278190219);
      $thisType.DarkCyan = $S01().CallStatic($thisType, "FromBgra", null, 4278225803);
      $thisType.DarkGoldenrod = $S01().CallStatic($thisType, "FromBgra", null, 4290283019);
      $thisType.DarkGray = $S01().CallStatic($thisType, "FromBgra", null, 4289309097);
      $thisType.DarkGreen = $S01().CallStatic($thisType, "FromBgra", null, 4278215680);
      $thisType.DarkKhaki = $S01().CallStatic($thisType, "FromBgra", null, 4290623339);
      $thisType.DarkMagenta = $S01().CallStatic($thisType, "FromBgra", null, 4287299723);
      $thisType.DarkOliveGreen = $S01().CallStatic($thisType, "FromBgra", null, 4283788079);
      $thisType.DarkOrange = $S01().CallStatic($thisType, "FromBgra", null, 4294937600);
      $thisType.DarkOrchid = $S01().CallStatic($thisType, "FromBgra", null, 4288230092);
      $thisType.DarkRed = $S01().CallStatic($thisType, "FromBgra", null, 4287299584);
      $thisType.DarkSalmon = $S01().CallStatic($thisType, "FromBgra", null, 4293498490);
      $thisType.DarkSeaGreen = $S01().CallStatic($thisType, "FromBgra", null, 4287609999);
      $thisType.DarkSlateBlue = $S01().CallStatic($thisType, "FromBgra", null, 4282924427);
      $thisType.DarkSlateGray = $S01().CallStatic($thisType, "FromBgra", null, 4281290575);
      $thisType.DarkTurquoise = $S01().CallStatic($thisType, "FromBgra", null, 4278243025);
      $thisType.DarkViolet = $S01().CallStatic($thisType, "FromBgra", null, 4287889619);
      $thisType.DeepPink = $S01().CallStatic($thisType, "FromBgra", null, 4294907027);
      $thisType.DeepSkyBlue = $S01().CallStatic($thisType, "FromBgra", null, 4278239231);
      $thisType.DimGray = $S01().CallStatic($thisType, "FromBgra", null, 4285098345);
      $thisType.DodgerBlue = $S01().CallStatic($thisType, "FromBgra", null, 4280193279);
      $thisType.FireBrick = $S01().CallStatic($thisType, "FromBgra", null, 4289864226);
      $thisType.FloralWhite = $S01().CallStatic($thisType, "FromBgra", null, 4294966000);
      $thisType.ForestGreen = $S01().CallStatic($thisType, "FromBgra", null, 4280453922);
      $thisType.Fuchsia = $S01().CallStatic($thisType, "FromBgra", null, 4294902015);
      $thisType.Gainsboro = $S01().CallStatic($thisType, "FromBgra", null, 4292664540);
      $thisType.GhostWhite = $S01().CallStatic($thisType, "FromBgra", null, 4294506751);
      $thisType.Gold = $S01().CallStatic($thisType, "FromBgra", null, 4294956800);
      $thisType.Goldenrod = $S01().CallStatic($thisType, "FromBgra", null, 4292519200);
      $thisType.Gray = $S01().CallStatic($thisType, "FromBgra", null, 4286611584);
      $thisType.Green = $S01().CallStatic($thisType, "FromBgra", null, 4278222848);
      $thisType.GreenYellow = $S01().CallStatic($thisType, "FromBgra", null, 4289593135);
      $thisType.Honeydew = $S01().CallStatic($thisType, "FromBgra", null, 4293984240);
      $thisType.HotPink = $S01().CallStatic($thisType, "FromBgra", null, 4294928820);
      $thisType.IndianRed = $S01().CallStatic($thisType, "FromBgra", null, 4291648604);
      $thisType.Indigo = $S01().CallStatic($thisType, "FromBgra", null, 4283105410);
      $thisType.Ivory = $S01().CallStatic($thisType, "FromBgra", null, 4294967280);
      $thisType.Khaki = $S01().CallStatic($thisType, "FromBgra", null, 4293977740);
      $thisType.Lavender = $S01().CallStatic($thisType, "FromBgra", null, 4293322490);
      $thisType.LavenderBlush = $S01().CallStatic($thisType, "FromBgra", null, 4294963445);
      $thisType.LawnGreen = $S01().CallStatic($thisType, "FromBgra", null, 4286381056);
      $thisType.LemonChiffon = $S01().CallStatic($thisType, "FromBgra", null, 4294965965);
      $thisType.LightBlue = $S01().CallStatic($thisType, "FromBgra", null, 4289583334);
      $thisType.LightCoral = $S01().CallStatic($thisType, "FromBgra", null, 4293951616);
      $thisType.LightCyan = $S01().CallStatic($thisType, "FromBgra", null, 4292935679);
      $thisType.LightGoldenrodYellow = $S01().CallStatic($thisType, "FromBgra", null, 4294638290);
      $thisType.LightGreen = $S01().CallStatic($thisType, "FromBgra", null, 4287688336);
      $thisType.LightGrey = $S01().CallStatic($thisType, "FromBgra", null, 4292072403);
      $thisType.LightPink = $S01().CallStatic($thisType, "FromBgra", null, 4294948545);
      $thisType.LightSalmon = $S01().CallStatic($thisType, "FromBgra", null, 4294942842);
      $thisType.LightSeaGreen = $S01().CallStatic($thisType, "FromBgra", null, 4280332970);
      $thisType.LightSkyBlue = $S01().CallStatic($thisType, "FromBgra", null, 4287090426);
      $thisType.LightSlateGray = $S01().CallStatic($thisType, "FromBgra", null, 4286023833);
      $thisType.LightSteelBlue = $S01().CallStatic($thisType, "FromBgra", null, 4289774814);
      $thisType.LightYellow = $S01().CallStatic($thisType, "FromBgra", null, 4294967264);
      $thisType.Lime = $S01().CallStatic($thisType, "FromBgra", null, 4278255360);
      $thisType.LimeGreen = $S01().CallStatic($thisType, "FromBgra", null, 4281519410);
      $thisType.Linen = $S01().CallStatic($thisType, "FromBgra", null, 4294635750);
      $thisType.Magenta = $S01().CallStatic($thisType, "FromBgra", null, 4294902015);
      $thisType.Maroon = $S01().CallStatic($thisType, "FromBgra", null, 4286578688);
      $thisType.MediumAquamarine = $S01().CallStatic($thisType, "FromBgra", null, 4284927402);
      $thisType.MediumBlue = $S01().CallStatic($thisType, "FromBgra", null, 4278190285);
      $thisType.MediumOrchid = $S01().CallStatic($thisType, "FromBgra", null, 4290401747);
      $thisType.MediumPurple = $S01().CallStatic($thisType, "FromBgra", null, 4287852763);
      $thisType.MediumSeaGreen = $S01().CallStatic($thisType, "FromBgra", null, 4282168177);
      $thisType.MediumSlateBlue = $S01().CallStatic($thisType, "FromBgra", null, 4286277870);
      $thisType.MediumSpringGreen = $S01().CallStatic($thisType, "FromBgra", null, 4278254234);
      $thisType.MediumTurquoise = $S01().CallStatic($thisType, "FromBgra", null, 4282962380);
      $thisType.MediumVioletRed = $S01().CallStatic($thisType, "FromBgra", null, 4291237253);
      $thisType.MidnightBlue = $S01().CallStatic($thisType, "FromBgra", null, 4279834992);
      $thisType.MintCream = $S01().CallStatic($thisType, "FromBgra", null, 4294311930);
      $thisType.MistyRose = $S01().CallStatic($thisType, "FromBgra", null, 4294960353);
      $thisType.Moccasin = $S01().CallStatic($thisType, "FromBgra", null, 4294960309);
      $thisType.NavajoWhite = $S01().CallStatic($thisType, "FromBgra", null, 4294958765);
      $thisType.Navy = $S01().CallStatic($thisType, "FromBgra", null, 4278190208);
      $thisType.OldLace = $S01().CallStatic($thisType, "FromBgra", null, 4294833638);
      $thisType.Olive = $S01().CallStatic($thisType, "FromBgra", null, 4286611456);
      $thisType.OliveDrab = $S01().CallStatic($thisType, "FromBgra", null, 4285238819);
      $thisType.Orange = $S01().CallStatic($thisType, "FromBgra", null, 4294944000);
      $thisType.OrangeRed = $S01().CallStatic($thisType, "FromBgra", null, 4294919424);
      $thisType.Orchid = $S01().CallStatic($thisType, "FromBgra", null, 4292505814);
      $thisType.PaleGoldenrod = $S01().CallStatic($thisType, "FromBgra", null, 4293847210);
      $thisType.PaleGreen = $S01().CallStatic($thisType, "FromBgra", null, 4288215960);
      $thisType.PaleTurquoise = $S01().CallStatic($thisType, "FromBgra", null, 4289720046);
      $thisType.PaleVioletRed = $S01().CallStatic($thisType, "FromBgra", null, 4292571283);
      $thisType.PapayaWhip = $S01().CallStatic($thisType, "FromBgra", null, 4294963157);
      $thisType.PeachPuff = $S01().CallStatic($thisType, "FromBgra", null, 4294957753);
      $thisType.Peru = $S01().CallStatic($thisType, "FromBgra", null, 4291659071);
      $thisType.Pink = $S01().CallStatic($thisType, "FromBgra", null, 4294951115);
      $thisType.Plum = $S01().CallStatic($thisType, "FromBgra", null, 4292714717);
      $thisType.PowderBlue = $S01().CallStatic($thisType, "FromBgra", null, 4289781990);
      $thisType.Purple = $S01().CallStatic($thisType, "FromBgra", null, 4286578816);
      $thisType.Red = $S01().CallStatic($thisType, "FromBgra", null, 4294901760);
      $thisType.RosyBrown = $S01().CallStatic($thisType, "FromBgra", null, 4290547599);
      $thisType.RoyalBlue = $S01().CallStatic($thisType, "FromBgra", null, 4282477025);
      $thisType.SaddleBrown = $S01().CallStatic($thisType, "FromBgra", null, 4287317267);
      $thisType.Salmon = $S01().CallStatic($thisType, "FromBgra", null, 4294606962);
      $thisType.SandyBrown = $S01().CallStatic($thisType, "FromBgra", null, 4294222944);
      $thisType.SeaGreen = $S01().CallStatic($thisType, "FromBgra", null, 4281240407);
      $thisType.Seashell = $S01().CallStatic($thisType, "FromBgra", null, 4294964718);
      $thisType.Sienna = $S01().CallStatic($thisType, "FromBgra", null, 4288696877);
      $thisType.Silver = $S01().CallStatic($thisType, "FromBgra", null, 4290822336);
      $thisType.SkyBlue = $S01().CallStatic($thisType, "FromBgra", null, 4287090411);
      $thisType.SlateBlue = $S01().CallStatic($thisType, "FromBgra", null, 4285160141);
      $thisType.SlateGray = $S01().CallStatic($thisType, "FromBgra", null, 4285563024);
      $thisType.Snow = $S01().CallStatic($thisType, "FromBgra", null, 4294966010);
      $thisType.SpringGreen = $S01().CallStatic($thisType, "FromBgra", null, 4278255487);
      $thisType.SteelBlue = $S01().CallStatic($thisType, "FromBgra", null, 4282811060);
      $thisType.Tan = $S01().CallStatic($thisType, "FromBgra", null, 4291998860);
      $thisType.Teal = $S01().CallStatic($thisType, "FromBgra", null, 4278222976);
      $thisType.Thistle = $S01().CallStatic($thisType, "FromBgra", null, 4292394968);
      $thisType.Tomato = $S01().CallStatic($thisType, "FromBgra", null, 4294927175);
      $thisType.Turquoise = $S01().CallStatic($thisType, "FromBgra", null, 4282441936);
      $thisType.Violet = $S01().CallStatic($thisType, "FromBgra", null, 4293821166);
      $thisType.Wheat = $S01().CallStatic($thisType, "FromBgra", null, 4294303411);
      $thisType.White = $S01().CallStatic($thisType, "FromBgra", null, 4294967295);
      $thisType.WhiteSmoke = $S01().CallStatic($thisType, "FromBgra", null, 4294309365);
      $thisType.Yellow = $S01().CallStatic($thisType, "FromBgra", null, 4294967040);
      $thisType.YellowGreen = $S01().CallStatic($thisType, "FromBgra", null, 4288335154);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      ColorUint__cctor
    );

    $.Property({Static:false, Public:true }, "Item", $.Byte);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm07.TypeRef("System.IFormattable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm09.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm11.System.Drawing.ColorConverter.__Type__]; });

})();

/* interface Fusee.Engine.IAudioStream */ 

JSIL.MakeInterface(
  "Fusee.Engine.IAudioStream", true, [], function ($) {
    $.Method({}, "set_Volume", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_Volume", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_Loop", new JSIL.MethodSignature(null, [$.Boolean], []));
    $.Method({}, "get_Loop", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "set_Panning", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_Panning", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "Play", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "Play", new JSIL.MethodSignature(null, [$.Boolean], []));
    $.Method({}, "Pause", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "Stop", new JSIL.MethodSignature(null, [], []));
    $.Property({}, "Volume");
    $.Property({}, "Loop");
    $.Property({}, "Panning");
  }, []);

/* interface Fusee.Engine.IInputDeviceImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IInputDeviceImp", true, [], function ($) {
    $.Method({}, "GetXAxis", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "GetYAxis", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "GetZAxis", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "GetName", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "GetPressedButton", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "IsButtonDown", new JSIL.MethodSignature($.Boolean, [$.Int32], []));
    $.Method({}, "IsButtonPressed", new JSIL.MethodSignature($.Boolean, [$.Int32], []));
    $.Method({}, "GetButtonCount", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "GetCategory", new JSIL.MethodSignature($.String, [], []));
  }, []);

/* interface Fusee.Engine.IInputDriverImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IInputDriverImp", true, [], function ($) {
    $.Method({}, "DeviceImps", new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Fusee.Engine.IInputDeviceImp")]), [], []));
  }, []);

/* struct Fusee.Engine.CharInfoStruct */ 

(function CharInfoStruct$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.CharInfoStruct", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "AdvanceX", $.Single); 
    $.Field({Static:false, Public:true }, "AdvanceY", $.Single); 
    $.Field({Static:false, Public:true }, "BitmapW", $.Single); 
    $.Field({Static:false, Public:true }, "BitmapH", $.Single); 
    $.Field({Static:false, Public:true }, "BitmapL", $.Single); 
    $.Field({Static:false, Public:true }, "BitmapT", $.Single); 
    $.Field({Static:false, Public:true }, "TexOffX", $.Single); 
    $.Field({Static:false, Public:true }, "TexOffY", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Fusee.Engine.IFont */ 

JSIL.MakeInterface(
  "Fusee.Engine.IFont", true, [], function ($) {
    $.Method({}, "get_TexAtlas", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ITexture"), [], []));
    $.Method({}, "get_Width", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "get_Height", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "get_FontSize", new JSIL.MethodSignature($.UInt32, [], []));
    $.Method({}, "get_UseKerning", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "set_UseKerning", new JSIL.MethodSignature(null, [$.Boolean], []));
    $.Method({}, "get_CharInfo", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Fusee.Engine.CharInfoStruct")]), [], []));
    $.Property({}, "TexAtlas");
    $.Property({}, "Width");
    $.Property({}, "Height");
    $.Property({}, "FontSize");
    $.Property({}, "UseKerning");
    $.Property({}, "CharInfo");
  }, []);

/* interface Fusee.Engine.ICollisionShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.ICollisionShapeImp", true, [], function ($) {
    $.Method({}, "get_Margin", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_Margin", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_LocalScaling", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "set_LocalScaling", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "get_UserObject", new JSIL.MethodSignature($.Object, [], []));
    $.Method({}, "set_UserObject", new JSIL.MethodSignature(null, [$.Object], []));
    $.Property({}, "Margin");
    $.Property({}, "LocalScaling");
    $.Property({}, "UserObject");
  }, []);

/* interface Fusee.Engine.IBoxShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IBoxShapeImp", true, [], function ($) {
    $.Method({}, "get_LocalScaling", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "set_LocalScaling", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "get_HalfExtents", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Property({}, "LocalScaling");
    $.Property({}, "HalfExtents");
  }, [$asm01.TypeRef("Fusee.Engine.ICollisionShapeImp")]);

/* interface Fusee.Engine.ICapsuleShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.ICapsuleShapeImp", true, [], function ($) {
    $.Method({}, "get_HalfHeight", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "get_Radius", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "get_UpAxis", new JSIL.MethodSignature($.Int32, [], []));
    $.Property({}, "HalfHeight");
    $.Property({}, "Radius");
    $.Property({}, "UpAxis");
  }, [$asm01.TypeRef("Fusee.Engine.ICollisionShapeImp")]);

/* interface Fusee.Engine.ICompoundShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.ICompoundShapeImp", true, [], function ($) {
    $.Method({}, "AddChildShape", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm01.TypeRef("Fusee.Engine.IBoxShapeImp")], []));
    $.Method({}, "AddChildShape", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm01.TypeRef("Fusee.Engine.ISphereShapeImp")], []));
    $.Method({}, "AddChildShape", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm01.TypeRef("Fusee.Engine.ICapsuleShapeImp")], []));
    $.Method({}, "AddChildShape", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm01.TypeRef("Fusee.Engine.IConeShapeImp")], []));
    $.Method({}, "AddChildShape", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm01.TypeRef("Fusee.Engine.ICylinderShapeImp")], []));
    $.Method({}, "AddChildShape", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm01.TypeRef("Fusee.Engine.IMultiSphereShapeImp")], []));
    $.Method({}, "AddChildShape", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm01.TypeRef("Fusee.Engine.IEmptyShapeImp")], []));
    $.Method({}, "CalculatePrincipalAxisTransform", new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Single]), $asm04.TypeRef("Fusee.Math.float4x4"), 
          $asm04.TypeRef("Fusee.Math.float3")
        ], []));
  }, [$asm01.TypeRef("Fusee.Engine.ICollisionShapeImp")]);

/* interface Fusee.Engine.IConeShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IConeShapeImp", true, [], function ($) {
    $.Method({}, "get_ConeUpIndex", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "set_ConeUpIndex", new JSIL.MethodSignature(null, [$.Int32], []));
    $.Method({}, "get_Height", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "get_Radius", new JSIL.MethodSignature($.Single, [], []));
    $.Property({}, "ConeUpIndex");
    $.Property({}, "Height");
    $.Property({}, "Radius");
  }, [$asm01.TypeRef("Fusee.Engine.ICollisionShapeImp")]);

/* interface Fusee.Engine.IConstraintImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IConstraintImp", true, [], function ($) {
    $.Method({}, "get_RigidBodyA", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), [], []));
    $.Method({}, "get_RigidBodyB", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), [], []));
    $.Method({}, "GetUid", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "get_UserObject", new JSIL.MethodSignature($.Object, [], []));
    $.Method({}, "set_UserObject", new JSIL.MethodSignature(null, [$.Object], []));
    $.Property({}, "RigidBodyA");
    $.Property({}, "RigidBodyB");
    $.Property({}, "UserObject");
  }, []);

/* interface Fusee.Engine.IConeTwistConstraintImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IConeTwistConstraintImp", true, [], function ($) {
    $.Method({}, "get_AFrame", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []));
    $.Method({}, "get_BFrame", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []));
    $.Method({}, "CalcAngleInfo", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "CalcAngleInfo2", new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4"), 
          $asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4")
        ], []));
    $.Method({}, "EnableMotor", new JSIL.MethodSignature(null, [$.Boolean], []));
    $.Method({}, "get_FixThresh", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_FixThresh", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_FrameOffsetA", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []));
    $.Method({}, "get_FrameOffsetB", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []));
    $.Method({}, "GetPointForAngle", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [$.Single, $.Single], []));
    $.Method({}, "get_IsPastSwingLimit", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "SetAngularOnly", new JSIL.MethodSignature(null, [$.Boolean], []));
    $.Method({}, "SetDamping", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "SetLimit", new JSIL.MethodSignature(null, [$.Int32, $.Single], []));
    $.Method({}, "SetLimit", new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ], []));
    $.Method({}, "SetMaxMotorImpulse", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "SetMaxMotorImpulseNormalized", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "SetMotorTarget", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.Quaternion")], []));
    $.Method({}, "SetMotorTargetInConstraintSpace", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.Quaternion")], []));
    $.Method({}, "get_SolveSwingLimit", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "get_SolveTwistLimit", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "get_SwingSpan1", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "get_SwingSpan2", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "get_TwistAngle", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "get_TwistLimitSign", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "get_TwistSpan", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "UpdateRhs", new JSIL.MethodSignature(null, [$.Single], []));
    $.Property({}, "AFrame");
    $.Property({}, "BFrame");
    $.Property({}, "FixThresh");
    $.Property({}, "FrameOffsetA");
    $.Property({}, "FrameOffsetB");
    $.Property({}, "IsPastSwingLimit");
    $.Property({}, "SolveSwingLimit");
    $.Property({}, "SolveTwistLimit");
    $.Property({}, "SwingSpan1");
    $.Property({}, "SwingSpan2");
    $.Property({}, "TwistAngle");
    $.Property({}, "TwistLimitSign");
    $.Property({}, "TwistSpan");
  }, [$asm01.TypeRef("Fusee.Engine.IConstraintImp")]);

/* interface Fusee.Engine.IConvexHullShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IConvexHullShapeImp", true, [], function ($) {
    $.Method({}, "AddPoint", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "GetScaledPoint", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [$.Int32], []));
    $.Method({}, "GetUnscaledPoints", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")]), [], []));
    $.Method({}, "GetNumPoints", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "get_LocalScaling", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "set_LocalScaling", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Property({}, "LocalScaling");
  }, [$asm01.TypeRef("Fusee.Engine.ICollisionShapeImp")]);

/* interface Fusee.Engine.ICylinderShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.ICylinderShapeImp", true, [], function ($) {
    $.Method({}, "get_HalfExtents", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "get_Radius", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "get_UpAxis", new JSIL.MethodSignature($.Int32, [], []));
    $.Property({}, "HalfExtents");
    $.Property({}, "Radius");
    $.Property({}, "UpAxis");
  }, [$asm01.TypeRef("Fusee.Engine.ICollisionShapeImp")]);

/* interface Fusee.Engine.IDynamicWorldImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IDynamicWorldImp", true, [], function ($) {
    $.Method({}, "get_Gravity", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "set_Gravity", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "AddRigidBody", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), [
          $.Single, $asm04.TypeRef("Fusee.Math.float3"), 
          $asm04.TypeRef("Fusee.Math.float3"), $asm01.TypeRef("Fusee.Engine.ICollisionShapeImp")
        ], []));
    $.Method({}, "GetRigidBody", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), [$.Int32], []));
    $.Method({}, "StepSimulation", new JSIL.MethodSignature($.Int32, [
          $.Single, $.Int32, 
          $.Single
        ], []));
    $.Method({}, "NumberRigidBodies", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "AddPoint2PointConstraint", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IPoint2PointConstraintImp"), [$asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "AddPoint2PointConstraint", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IPoint2PointConstraintImp"), [
          $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), 
          $asm04.TypeRef("Fusee.Math.float3"), $asm04.TypeRef("Fusee.Math.float3")
        ], []));
    $.Method({}, "AddHingeConstraint", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IHingeConstraintImp"), [
          $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm04.TypeRef("Fusee.Math.float4x4"), 
          $.Boolean
        ], []));
    $.Method({}, "AddHingeConstraint", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IHingeConstraintImp"), [
          $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm04.TypeRef("Fusee.Math.float3"), 
          $asm04.TypeRef("Fusee.Math.float3"), $.Boolean
        ], []));
    $.Method({}, "AddHingeConstraint", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IHingeConstraintImp"), [
          $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), 
          $asm04.TypeRef("Fusee.Math.float3"), $asm04.TypeRef("Fusee.Math.float3"), 
          $asm04.TypeRef("Fusee.Math.float3"), $asm04.TypeRef("Fusee.Math.float3"), 
          $.Boolean
        ], []));
    $.Method({}, "AddHingeConstraint", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IHingeConstraintImp"), [
          $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), 
          $asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4"), 
          $.Boolean
        ], []));
    $.Method({}, "AddSliderConstraint", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ISliderConstraintImp"), [
          $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), 
          $asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4"), 
          $.Boolean
        ], []));
    $.Method({}, "AddSliderConstraint", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ISliderConstraintImp"), [
          $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm04.TypeRef("Fusee.Math.float4x4"), 
          $.Boolean
        ], []));
    $.Method({}, "AddGearConstraint", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IGearConstraintImp"), [
          $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), 
          $asm04.TypeRef("Fusee.Math.float3"), $asm04.TypeRef("Fusee.Math.float3"), 
          $.Single
        ], []));
    $.Method({}, "AddConeTwistConstraint", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IConeTwistConstraintImp"), [$asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm04.TypeRef("Fusee.Math.float4x4")], []));
    $.Method({}, "AddConeTwistConstraint", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IConeTwistConstraintImp"), [
          $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), 
          $asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4")
        ], []));
    $.Method({}, "AddGeneric6DofConstraint", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IGeneric6DofConstraintImp"), [
          $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm04.TypeRef("Fusee.Math.float4x4"), 
          $.Boolean
        ], []));
    $.Method({}, "AddGeneric6DofConstraint", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IGeneric6DofConstraintImp"), [
          $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), 
          $asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4"), 
          $.Boolean
        ], []));
    $.Method({}, "AddBoxShape", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IBoxShapeImp"), [$.Single], []));
    $.Method({}, "AddBoxShape", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IBoxShapeImp"), [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "AddBoxShape", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IBoxShapeImp"), [
          $.Single, $.Single, 
          $.Single
        ], []));
    $.Method({}, "AddSphereShape", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ISphereShapeImp"), [$.Single], []));
    $.Method({}, "AddCapsuleShape", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ICapsuleShapeImp"), [$.Single, $.Single], []));
    $.Method({}, "AddCylinderShape", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ICylinderShapeImp"), [$.Single], []));
    $.Method({}, "AddCylinderShape", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ICylinderShapeImp"), [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "AddCylinderShape", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ICylinderShapeImp"), [
          $.Single, $.Single, 
          $.Single
        ], []));
    $.Method({}, "AddConeShape", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IConeShapeImp"), [$.Single, $.Single], []));
    $.Method({}, "AddMultiSphereShape", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IMultiSphereShapeImp"), [$jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")]), $jsilcore.TypeRef("System.Array", [$.Single])], []));
    $.Method({}, "AddCompoundShape", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ICompoundShapeImp"), [$.Boolean], []));
    $.Method({}, "AddEmptyShape", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IEmptyShapeImp"), [], []));
    $.Method({}, "AddConvexHullShape", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IConvexHullShapeImp"), [], []));
    $.Method({}, "AddConvexHullShape", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IConvexHullShapeImp"), [$jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")]), $.Boolean], []));
    $.Method({}, "AddStaticPlaneShape", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IStaticPlaneShapeImp"), [$asm04.TypeRef("Fusee.Math.float3"), $.Single], []));
    $.Method({}, "AddGImpactMeshShape", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IGImpactMeshShapeImp"), [$jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")])], []));
    $.Method({}, "NumberConstraints", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "Dispose", new JSIL.MethodSignature(null, [], []));
    $.Property({}, "Gravity");
  }, []);

/* interface Fusee.Engine.IEmptyShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IEmptyShapeImp", true, [], function ($) {
  }, [$asm01.TypeRef("Fusee.Engine.ICollisionShapeImp")]);

/* interface Fusee.Engine.IGearConstraintImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IGearConstraintImp", true, [], function ($) {
  }, [$asm01.TypeRef("Fusee.Engine.IConstraintImp")]);

/* interface Fusee.Engine.IGeneric6DofConstraintImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IGeneric6DofConstraintImp", true, [], function ($) {
    $.Method({}, "get_AngularLowerLimit", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "set_AngularLowerLimit", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "get_AngularUpperLimit", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "set_AngularUpperLimit", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "CalcAnchorPos", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "CalculateTransforms", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "CalculateTransforms", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4")], []));
    $.Method({}, "get_CalculatedTransformA", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []));
    $.Method({}, "get_CalculatedTransformB", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []));
    $.Method({}, "get_FrameOffsetA", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []));
    $.Method({}, "set_FrameOffsetA", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4")], []));
    $.Method({}, "get_FrameOffsetB", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []));
    $.Method({}, "set_FrameOffsetB", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4")], []));
    $.Method({}, "GetAngle", new JSIL.MethodSignature($.Single, [$.Int32], []));
    $.Method({}, "GetAxis", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [$.Int32], []));
    $.Method({}, "GetRelativePivotPosition", new JSIL.MethodSignature($.Single, [$.Int32], []));
    $.Method({}, "IsLimited", new JSIL.MethodSignature($.Boolean, [$.Int32], []));
    $.Method({}, "get_LinearLowerLimit", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "set_LinearLowerLimit", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "get_LinearUpperLimit", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "set_LinearUpperLimit", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "SetAxis", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3"), $asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "SetFrames", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4")], []));
    $.Method({}, "SetLimit", new JSIL.MethodSignature(null, [
          $.Int32, $.Single, 
          $.Single
        ], []));
    $.Method({}, "TestAngularLimitMotor", new JSIL.MethodSignature($.Boolean, [$.Int32], []));
    $.Method({}, "get_UseFrameOffset", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "set_UseFrameOffset", new JSIL.MethodSignature(null, [$.Boolean], []));
    $.Method({}, "UpdateRhs", new JSIL.MethodSignature(null, [$.Single], []));
    $.Property({}, "AngularLowerLimit");
    $.Property({}, "AngularUpperLimit");
    $.Property({}, "CalculatedTransformA");
    $.Property({}, "CalculatedTransformB");
    $.Property({}, "FrameOffsetA");
    $.Property({}, "FrameOffsetB");
    $.Property({}, "LinearLowerLimit");
    $.Property({}, "LinearUpperLimit");
    $.Property({}, "UseFrameOffset");
  }, [$asm01.TypeRef("Fusee.Engine.IConstraintImp")]);

/* interface Fusee.Engine.IGImpactMeshShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IGImpactMeshShapeImp", true, [], function ($) {
  }, [$asm01.TypeRef("Fusee.Engine.ICollisionShapeImp")]);

/* enum Fusee.Engine.HingeFlags */ 

JSIL.MakeEnum(
  "Fusee.Engine.HingeFlags", true, {
    HingeFlagsStopCfm: 1, 
    HingeFlagsStopErp: 2, 
    HingeFlagsNormCfm: 4
  }, false
);

/* interface Fusee.Engine.IHingeConstraintImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IHingeConstraintImp", true, [], function ($) {
    $.Method({}, "get_AngularOnly", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "set_AngularOnly", new JSIL.MethodSignature(null, [$.Boolean], []));
    $.Method({}, "get_EnableMotor", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "set_EnableMotor", new JSIL.MethodSignature(null, [$.Boolean], []));
    $.Method({}, "EnableAngularMotor", new JSIL.MethodSignature(null, [
          $.Boolean, $.Single, 
          $.Single
        ], []));
    $.Method({}, "SetMotorTarget", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.Quaternion"), $.Single], []));
    $.Method({}, "SetMotorTarget", new JSIL.MethodSignature(null, [$.Single, $.Single], []));
    $.Method({}, "get_MaxMotorImpulse", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_MaxMotorImpulse", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_MotorTargetVelocity", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "get_FrameA", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []));
    $.Method({}, "get_FrameB", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []));
    $.Method({}, "get_FrameOffsetA", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []));
    $.Method({}, "get_FrameOffsetB", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []));
    $.Method({}, "SetAxis", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "GetHingeAngle", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "GetHingeAngle", new JSIL.MethodSignature($.Single, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4")], []));
    $.Method({}, "SetLimit", new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single
        ], []));
    $.Method({}, "get_SolverLimit", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "get_LowerLimit", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "get_UpperLimit", new JSIL.MethodSignature($.Single, [], []));
    $.Property({}, "AngularOnly");
    $.Property({}, "EnableMotor");
    $.Property({}, "MaxMotorImpulse");
    $.Property({}, "MotorTargetVelocity");
    $.Property({}, "FrameA");
    $.Property({}, "FrameB");
    $.Property({}, "FrameOffsetA");
    $.Property({}, "FrameOffsetB");
    $.Property({}, "SolverLimit");
    $.Property({}, "LowerLimit");
    $.Property({}, "UpperLimit");
  }, [$asm01.TypeRef("Fusee.Engine.IConstraintImp")]);

/* interface Fusee.Engine.IInputImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IInputImp", true, [], function ($) {
    $.Method({}, "FrameTick", new JSIL.MethodSignature(null, [$.Double], []));
    $.Method({}, "SetMousePos", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.Point")], []));
    $.Method({}, "SetMouseToCenter", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.Point"), [], []));
    $.Method({}, "get_CursorVisible", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "set_CursorVisible", new JSIL.MethodSignature(null, [$.Boolean], []));
    $.Method({}, "GetMousePos", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.Point"), [], []));
    $.Method({}, "GetMouseWheelPos", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "add_MouseButtonDown", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.MouseEventArgs")])], []));
    $.Method({}, "remove_MouseButtonDown", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.MouseEventArgs")])], []));
    $.Method({}, "add_MouseButtonUp", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.MouseEventArgs")])], []));
    $.Method({}, "remove_MouseButtonUp", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.MouseEventArgs")])], []));
    $.Method({}, "add_MouseMove", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.MouseEventArgs")])], []));
    $.Method({}, "remove_MouseMove", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.MouseEventArgs")])], []));
    $.Method({}, "add_KeyDown", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.KeyEventArgs")])], []));
    $.Method({}, "remove_KeyDown", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.KeyEventArgs")])], []));
    $.Method({}, "add_KeyUp", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.KeyEventArgs")])], []));
    $.Method({}, "remove_KeyUp", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.KeyEventArgs")])], []));
    $.Property({}, "CursorVisible");
  }, []);

/* struct Fusee.Engine.ImageData */ 

(function ImageData$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.ImageData", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "Width", $.Int32); 
    $.Field({Static:false, Public:true }, "Height", $.Int32); 
    $.Field({Static:false, Public:true }, "Stride", $.Int32); 
    $.Field({Static:false, Public:true }, "PixelData", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Fusee.Engine.IMeshImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IMeshImp", true, [], function ($) {
    $.Method({}, "InvalidateVertices", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "get_VerticesSet", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "InvalidateNormals", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "get_NormalsSet", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "InvalidateColors", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "get_ColorsSet", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "InvalidateTriangles", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "get_TrianglesSet", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "get_UVsSet", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "InvalidateUVs", new JSIL.MethodSignature(null, [], []));
    $.Property({}, "VerticesSet");
    $.Property({}, "NormalsSet");
    $.Property({}, "ColorsSet");
    $.Property({}, "TrianglesSet");
    $.Property({}, "UVsSet");
  }, []);

/* interface Fusee.Engine.IMultiSphereShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IMultiSphereShapeImp", true, [], function ($) {
    $.Method({}, "GetSpherePosition", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [$.Int32], []));
    $.Method({}, "GetSphereRadius", new JSIL.MethodSignature($.Single, [$.Int32], []));
    $.Method({}, "get_SphereCount", new JSIL.MethodSignature($.Int32, [], []));
    $.Property({}, "SphereCount");
  }, [$asm01.TypeRef("Fusee.Engine.ICollisionShapeImp")]);

/* interface Fusee.Engine.INetworkConnection */ 

JSIL.MakeInterface(
  "Fusee.Engine.INetworkConnection", true, [], function ($) {
    $.Method({}, "get_RemoteEndPoint", new JSIL.MethodSignature($asm09.TypeRef("System.Net.IPEndPoint"), [], []));
    $.Method({}, "get_RoundtripTime", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "Disconnect", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "Disconnect", new JSIL.MethodSignature(null, [$.String], []));
    $.Method({}, "SendMessage", new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte])], []));
    $.Method({}, "SendMessage", new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm01.TypeRef("Fusee.Engine.MessageDelivery"), 
          $.Int32
        ], []));
    $.Property({}, "RemoteEndPoint");
    $.Property({}, "RoundtripTime");
  }, []);

/* class Fusee.Engine.NetConfigValues */ 

(function NetConfigValues$Members () {
  var $, $thisType;
  function NetConfigValues__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.NetConfigValues", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      NetConfigValues__ctor
    );

    $.Field({Static:false, Public:true }, "SysType", $asm01.TypeRef("Fusee.Engine.SysType")); 
    $.Field({Static:false, Public:true }, "DefaultPort", $.Int32); 
    $.Field({Static:false, Public:true }, "Discovery", $.Boolean); 
    $.Field({Static:false, Public:true }, "ConnectOnDiscovery", $.Boolean); 
    $.Field({Static:false, Public:true }, "DiscoveryTimeout", $.Int32); 
    $.Field({Static:false, Public:true }, "RedirectPackets", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.NetStatusValues */ 

(function NetStatusValues$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };

  function NetStatusValues__ctor () {
  };

  function NetStatusValues_get_Connected () {
    return this.NetStatusValues$Connected$value;
  };

  function NetStatusValues_get_Connecting () {
    return this.NetStatusValues$Connecting$value;
  };

  function NetStatusValues_set_Connected (value) {
    this.NetStatusValues$Connected$value = value;
  };

  function NetStatusValues_set_Connecting (value) {
    this.NetStatusValues$Connecting$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.NetStatusValues", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      NetStatusValues__ctor
    );

    $.Method({Static:false, Public:true }, "get_Connected", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      NetStatusValues_get_Connected
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Connecting", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      NetStatusValues_get_Connecting
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Connected", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      NetStatusValues_set_Connected
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Connecting", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      NetStatusValues_set_Connecting
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:true }, "LastStatus", $asm01.TypeRef("Fusee.Engine.ConnectionStatus")); 
    $.Field({Static:false, Public:false}, "NetStatusValues$Connected$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "NetStatusValues$Connecting$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Connected", $.Boolean);

    $.Property({Static:false, Public:true }, "Connecting", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Fusee.Engine.SysType */ 

JSIL.MakeEnum(
  "Fusee.Engine.SysType", true, {
    None: 0, 
    Peer: 1, 
    Client: 2, 
    Server: 3
  }, false
);

/* delegate Fusee.Engine.ConnectionUpdateEvent */ 

JSIL.MakeDelegate("Fusee.Engine.ConnectionUpdateEvent", true, []);

/* interface Fusee.Engine.INetworkImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.INetworkImp", true, [], function ($) {
    $.Method({}, "get_Config", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.NetConfigValues"), [], []));
    $.Method({}, "set_Config", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.NetConfigValues")], []));
    $.Method({}, "get_Status", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.NetStatusValues"), [], []));
    $.Method({}, "set_Status", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.NetStatusValues")], []));
    $.Method({}, "get_Connections", new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Fusee.Engine.INetworkConnection")]), [], []));
    $.Method({}, "GetLocalIp", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "get_IncomingMsg", new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm01.TypeRef("Fusee.Engine.INetworkMsg")]), [], []));
    $.Method({}, "StartPeer", new JSIL.MethodSignature(null, [$.Int32], []));
    $.Method({}, "add_ConnectionUpdate", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.ConnectionUpdateEvent")], []));
    $.Method({}, "remove_ConnectionUpdate", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.ConnectionUpdateEvent")], []));
    $.Method({}, "OpenConnection", new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("Fusee.Engine.SysType"), $.String, 
          $.Int32
        ], []));
    $.Method({}, "CloseConnection", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "SendMessage", new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm01.TypeRef("Fusee.Engine.MessageDelivery"), 
          $.Int32
        ], []));
    $.Method({}, "SendDiscoveryMessage", new JSIL.MethodSignature(null, [$.Int32], []));
    $.Method({}, "OnUpdateFrame", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "CloseDevices", new JSIL.MethodSignature(null, [], []));
    $.Property({}, "Config");
    $.Property({}, "Status");
    $.Property({}, "Connections");
    $.Property({}, "IncomingMsg");
  }, []);

/* enum Fusee.Engine.ConnectionStatus */ 

JSIL.MakeEnum(
  "Fusee.Engine.ConnectionStatus", true, {
    None: 0, 
    InitiatedConnect: 1, 
    ReceivedInitiation: 2, 
    RespondedAwaitingApproval: 3, 
    RespondedConnect: 4, 
    Connected: 5, 
    Disconnecting: 6, 
    Disconnected: 7
  }, false
);

/* enum Fusee.Engine.MessageType */ 

JSIL.MakeEnum(
  "Fusee.Engine.MessageType", true, {
    Error: 0, 
    StatusChanged: 1, 
    UnconnectedData: 2, 
    ConnectionApproval: 4, 
    Data: 8, 
    Receipt: 16, 
    DiscoveryRequest: 32, 
    DiscoveryResponse: 64, 
    VerboseDebugMessage: 128, 
    DebugMessage: 256, 
    WarningMessage: 512, 
    ErrorMessage: 1024, 
    NatIntroductionSuccess: 2048, 
    ConnectionLatencyUpdated: 4096
  }, false
);

/* enum Fusee.Engine.MessageDelivery */ 

JSIL.MakeEnum(
  "Fusee.Engine.MessageDelivery", true, {
    Unknown: 0, 
    Unreliable: 1, 
    UnreliableSequenced: 2, 
    ReliableUnordered: 34, 
    ReliableSequenced: 35, 
    ReliableOrdered: 67
  }, false
);

/* enum Fusee.Engine.MsgDataTypes */ 

JSIL.MakeEnum(
  "Fusee.Engine.MsgDataTypes", true, {
    Object: 0, 
    Bytes: 1, 
    Int: 2, 
    Float: 3, 
    String: 4
  }, false
);

/* struct Fusee.Engine.NetworkMsgType */ 

(function NetworkMsgType$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.NetworkMsgType", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "MsgType", $asm01.TypeRef("Fusee.Engine.MsgDataTypes")); 
    $.Field({Static:false, Public:true }, "MsgDelivery", $asm01.TypeRef("Fusee.Engine.MessageDelivery")); 
    $.Field({Static:false, Public:true }, "MsgChannel", $.Int32); 
    $.Field({Static:false, Public:true }, "ReadBytes", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:true }, "ReadInt", $.Int32); 
    $.Field({Static:false, Public:true }, "ReadFloat", $.Single); 
    $.Field({Static:false, Public:true }, "ReadString", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface Fusee.Engine.INetworkMsg */ 

JSIL.MakeInterface(
  "Fusee.Engine.INetworkMsg", true, [], function ($) {
    $.Method({}, "get_Type", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.MessageType"), [], []));
    $.Method({}, "get_Status", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ConnectionStatus"), [], []));
    $.Method({}, "get_Sender", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.INetworkConnection"), [], []));
    $.Method({}, "get_Message", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.NetworkMsgType"), [], []));
    $.Property({}, "Type");
    $.Property({}, "Status");
    $.Property({}, "Sender");
    $.Property({}, "Message");
  }, []);

/* class Fusee.Engine.InitEventArgs */ 

(function InitEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.EventArgs)) ();
  };

  function InitEventArgs__ctor () {
    $T00().prototype._ctor.call(this);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "Fusee.Engine.InitEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      InitEventArgs__ctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Fusee.Engine.PointToPointFlags */ 

JSIL.MakeEnum(
  "Fusee.Engine.PointToPointFlags", true, {
    PointToPointFlagsErp: 1, 
    PointToPointFlagsStopErp: 2, 
    PointToPointFlagsCfm: 3, 
    PointToPointFlagsStopCfm: 4
  }, false
);

/* interface Fusee.Engine.IPoint2PointConstraintImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IPoint2PointConstraintImp", true, [], function ($) {
    $.Method({}, "get_PivotInA", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "set_PivotInA", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "get_PivotInB", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "set_PivotInB", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "UpdateRhs", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "SetParam", new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Fusee.Engine.PointToPointFlags"), $.Single, 
          $.Int32
        ], []));
    $.Method({}, "GetParam", new JSIL.MethodSignature($.Single, [$asm01.TypeRef("Fusee.Engine.PointToPointFlags"), $.Int32], []));
    $.Property({}, "PivotInA");
    $.Property({}, "PivotInB");
  }, [$asm01.TypeRef("Fusee.Engine.IConstraintImp")]);

/* interface Fusee.Engine.IRenderCanvasImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IRenderCanvasImp", true, [], function ($) {
    $.Method({}, "get_Width", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "set_Width", new JSIL.MethodSignature(null, [$.Int32], []));
    $.Method({}, "get_Height", new JSIL.MethodSignature($.Int32, [], []));
    $.Method({}, "set_Height", new JSIL.MethodSignature(null, [$.Int32], []));
    $.Method({}, "get_Caption", new JSIL.MethodSignature($.String, [], []));
    $.Method({}, "set_Caption", new JSIL.MethodSignature(null, [$.String], []));
    $.Method({}, "get_DeltaTime", new JSIL.MethodSignature($.Double, [], []));
    $.Method({}, "get_VerticalSync", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "set_VerticalSync", new JSIL.MethodSignature(null, [$.Boolean], []));
    $.Method({}, "get_EnableBlending", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "set_EnableBlending", new JSIL.MethodSignature(null, [$.Boolean], []));
    $.Method({}, "get_Fullscreen", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "set_Fullscreen", new JSIL.MethodSignature(null, [$.Boolean], []));
    $.Method({}, "Present", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "Run", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "SetCursor", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.CursorType")], []));
    $.Method({}, "OpenLink", new JSIL.MethodSignature(null, [$.String], []));
    $.Method({}, "add_Init", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.InitEventArgs")])], []));
    $.Method({}, "remove_Init", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.InitEventArgs")])], []));
    $.Method({}, "add_UnLoad", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.InitEventArgs")])], []));
    $.Method({}, "remove_UnLoad", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.InitEventArgs")])], []));
    $.Method({}, "add_Render", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.RenderEventArgs")])], []));
    $.Method({}, "remove_Render", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.RenderEventArgs")])], []));
    $.Method({}, "add_Resize", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.ResizeEventArgs")])], []));
    $.Method({}, "remove_Resize", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.ResizeEventArgs")])], []));
    $.Property({}, "Width");
    $.Property({}, "Height");
    $.Property({}, "Caption");
    $.Property({}, "DeltaTime");
    $.Property({}, "VerticalSync");
    $.Property({}, "EnableBlending");
    $.Property({}, "Fullscreen");
  }, []);

/* interface Fusee.Engine.IRenderContextImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IRenderContextImp", true, [], function ($) {
    $.Method({}, "set_ModelView", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4")], []));
    $.Method({}, "get_ModelView", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []));
    $.Method({}, "set_Projection", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4")], []));
    $.Method({}, "get_Projection", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []));
    $.Method({}, "set_ClearColor", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4")], []));
    $.Method({}, "get_ClearColor", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4"), [], []));
    $.Method({}, "set_ClearDepth", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_ClearDepth", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "CreateShader", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IShaderProgramImp"), [$.String, $.String], []));
    $.Method({}, "GetShaderParamList", new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm01.TypeRef("Fusee.Engine.ShaderParamInfo")]), [$asm01.TypeRef("Fusee.Engine.IShaderProgramImp")], []));
    $.Method({}, "GetShaderParam", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IShaderParam"), [$asm01.TypeRef("Fusee.Engine.IShaderProgramImp"), $.String], []));
    $.Method({}, "GetParamValue", new JSIL.MethodSignature($.Single, [$asm01.TypeRef("Fusee.Engine.IShaderProgramImp"), $asm01.TypeRef("Fusee.Engine.IShaderParam")], []));
    $.Method({}, "SetShaderParam1f", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IShaderParam"), $.Single], []));
    $.Method({}, "SetShaderParam2f", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IShaderParam"), $asm04.TypeRef("Fusee.Math.float2")], []));
    $.Method({}, "SetShaderParam3f", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IShaderParam"), $asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "SetShaderParam4f", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IShaderParam"), $asm04.TypeRef("Fusee.Math.float4")], []));
    $.Method({}, "SetShaderParamMtx4f", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IShaderParam"), $asm04.TypeRef("Fusee.Math.float4x4")], []));
    $.Method({}, "SetShaderParamInt", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IShaderParam"), $.Int32], []));
    $.Method({}, "SetShaderParamTexture", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IShaderParam"), $asm01.TypeRef("Fusee.Engine.ITexture")], []));
    $.Method({}, "CreateTexture", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ITexture"), [$asm01.TypeRef("Fusee.Engine.ImageData")], []));
    $.Method({}, "LoadImage", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ImageData"), [$.String], []));
    $.Method({}, "CreateImage", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ImageData"), [
          $.Int32, $.Int32, 
          $.String
        ], []));
    $.Method({}, "TextOnImage", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ImageData"), [
          $asm01.TypeRef("Fusee.Engine.ImageData"), $.String, 
          $.Single, $.String, 
          $.String, $.Single, 
          $.Single
        ], []));
    $.Method({}, "LoadFont", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IFont"), [$.String, $.UInt32], []));
    $.Method({}, "FixTextKerning", new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")]), [
          $asm01.TypeRef("Fusee.Engine.IFont"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")]), 
          $.String, $.Single
        ], []));
    $.Method({}, "Clear", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.ClearFlags")], []));
    $.Method({}, "SetVertices", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IMeshImp"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")])], []));
    $.Method({}, "SetNormals", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IMeshImp"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")])], []));
    $.Method({}, "SetUVs", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IMeshImp"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float2")])], []));
    $.Method({}, "SetColors", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IMeshImp"), $jsilcore.TypeRef("System.Array", [$.UInt32])], []));
    $.Method({}, "SetTriangles", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IMeshImp"), $jsilcore.TypeRef("System.Array", [$.UInt16])], []));
    $.Method({}, "SetShader", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IShaderProgramImp")], []));
    $.Method({}, "Viewport", new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ], []));
    $.Method({}, "ColorMask", new JSIL.MethodSignature(null, [
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean
        ], []));
    $.Method({}, "Frustum", new JSIL.MethodSignature(null, [
          $.Double, $.Double, 
          $.Double, $.Double, 
          $.Double, $.Double
        ], []));
    $.Method({}, "Render", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IMeshImp")], []));
    $.Method({}, "DebugLine", new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Fusee.Math.float3"), $asm04.TypeRef("Fusee.Math.float3"), 
          $asm04.TypeRef("Fusee.Math.float4")
        ], []));
    $.Method({}, "GetBufferContent", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.Rectangle"), $asm01.TypeRef("Fusee.Engine.ITexture")], []));
    $.Method({}, "CreateMeshImp", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IMeshImp"), [], []));
    $.Method({}, "SetRenderState", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.RenderState"), $.UInt32], []));
    $.Method({}, "GetRenderState", new JSIL.MethodSignature($.UInt32, [$asm01.TypeRef("Fusee.Engine.RenderState")], []));
    $.Property({}, "ModelView");
    $.Property({}, "Projection");
    $.Property({}, "ClearColor");
    $.Property({}, "ClearDepth");
  }, []);

/* interface Fusee.Engine.IRigidBodyImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IRigidBodyImp", true, [], function ($) {
    $.Method({}, "get_Gravity", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "set_Gravity", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "get_Mass", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_Mass", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_Inertia", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "set_Inertia", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "get_WorldTransform", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []));
    $.Method({}, "set_WorldTransform", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4")], []));
    $.Method({}, "get_Position", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "set_Position", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "get_Rotation", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.Quaternion"), [], []));
    $.Method({}, "ApplyForce", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3"), $asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "get_ApplyTorque", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "set_ApplyTorque", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "ApplyImpulse", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3"), $asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "get_ApplyTorqueImpulse", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "set_ApplyTorqueImpulse", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "get_ApplyCentralForce", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "set_ApplyCentralForce", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "get_ApplyCentralImpulse", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "set_ApplyCentralImpulse", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "get_LinearVelocity", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "set_LinearVelocity", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "get_AngularVelocity", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "set_AngularVelocity", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "get_LinearFactor", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "set_LinearFactor", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "get_AngularFactor", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "set_AngularFactor", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []));
    $.Method({}, "get_Restitution", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_Restitution", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_Friction", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_Friction", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "SetDrag", new JSIL.MethodSignature(null, [$.Single, $.Single], []));
    $.Method({}, "get_LinearDrag", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "get_AngularDrag", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "get_CollisionShape", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ICollisionShapeImp"), [], []));
    $.Method({}, "set_CollisionShape", new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.ICollisionShapeImp")], []));
    $.Method({}, "get_UserObject", new JSIL.MethodSignature($.Object, [], []));
    $.Method({}, "set_UserObject", new JSIL.MethodSignature(null, [$.Object], []));
    $.Method({}, "OnCollision", new JSIL.MethodSignature(null, [$.Type], []));
    $.Property({}, "Gravity");
    $.Property({}, "Mass");
    $.Property({}, "Inertia");
    $.Property({}, "WorldTransform");
    $.Property({}, "Position");
    $.Property({}, "Rotation");
    $.Property({}, "ApplyTorque");
    $.Property({}, "ApplyTorqueImpulse");
    $.Property({}, "ApplyCentralForce");
    $.Property({}, "ApplyCentralImpulse");
    $.Property({}, "LinearVelocity");
    $.Property({}, "AngularVelocity");
    $.Property({}, "LinearFactor");
    $.Property({}, "AngularFactor");
    $.Property({}, "Restitution");
    $.Property({}, "Friction");
    $.Property({}, "LinearDrag");
    $.Property({}, "AngularDrag");
    $.Property({}, "CollisionShape");
    $.Property({}, "UserObject");
  }, []);

/* interface Fusee.Engine.IShaderParam */ 

JSIL.MakeInterface(
  "Fusee.Engine.IShaderParam", true, [], function ($) {
  }, []);

/* interface Fusee.Engine.IShaderProgramImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IShaderProgramImp", true, [], function ($) {
  }, []);

/* interface Fusee.Engine.IAudioImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IAudioImp", true, [], function ($) {
    $.Method({}, "OpenDevice", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "CloseDevice", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "LoadFile", new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IAudioStream"), [$.String, $.Boolean], []));
    $.Method({}, "Stop", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "SetVolume", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "GetVolume", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "SetPanning", new JSIL.MethodSignature(null, [$.Single], []));
  }, []);

/* interface Fusee.Engine.ISliderConstraintImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.ISliderConstraintImp", true, [], function ($) {
    $.Method({}, "get_AnchorInA", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "get_AnchorInB", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Method({}, "get_AngularDepth", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "get_AngularPos", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "CalculateTransforms", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4")], []));
    $.Method({}, "get_CalculatedTransformA", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []));
    $.Method({}, "get_CalculatedTransformB", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []));
    $.Method({}, "get_DampingDirAngular", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_DampingDirAngular", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_DampingDirLin", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_DampingDirLin", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_DampingLimAngular", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_DampingLimAngular", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_DampingLimLin", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_DampingLimLin", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_DampingOrthoAngular", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_DampingOrthoAngular", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_DampingOrthoLin", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_DampingOrthoLin", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_FrameOffsetA", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []));
    $.Method({}, "get_FrameOffsetB", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []));
    $.Method({}, "get_LinDepth", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "get_LinPos", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "get_LowerAngularLimit", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_LowerAngularLimit", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_LowerLinLimit", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_LowerLinLimit", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_MaxAngularMotorForce", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_MaxAngularMotorForce", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_MaxLinMotorForce", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_MaxLinMotorForce", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_PoweredAngularMotor", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "set_PoweredAngularMotor", new JSIL.MethodSignature(null, [$.Boolean], []));
    $.Method({}, "get_PoweredLinMotor", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "set_PoweredLinMotor", new JSIL.MethodSignature(null, [$.Boolean], []));
    $.Method({}, "get_RestitutionDirAngular", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_RestitutionDirAngular", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_RestitutionDirLin", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_RestitutionDirLin", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_RestitutionLimAngular", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_RestitutionLimAngular", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_RestitutionLimLin", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_RestitutionLimLin", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_RestitutionOrthoAngular", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_RestitutionOrthoAngular", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_RestitutionOrthoLin", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_RestitutionOrthoLin", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "SetFrames", new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4")], []));
    $.Method({}, "get_SoftnessDirAngular", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_SoftnessDirAngular", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_SoftnessDirLin", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_SoftnessDirLin", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_SoftnessLimAngular", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_SoftnessLimAngular", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_SoftnessLimLin", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_SoftnessLimLin", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_SoftnessOrthoAngular", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_SoftnessOrthoAngular", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_SoftnessOrthoLin", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_SoftnessOrthoLin", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_SolveAngularLimit", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "get_SolveLinLimit", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "get_TargetAngularMotorVelocity", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_TargetAngularMotorVelocity", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_TargetLinMotorVelocity", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_TargetLinMotorVelocity", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "TestAngularLimits", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "TestLinLimits", new JSIL.MethodSignature(null, [], []));
    $.Method({}, "get_UpperAngularLimit", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_UpperAngularLimit", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_UpperLinLimit", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_UpperLinLimit", new JSIL.MethodSignature(null, [$.Single], []));
    $.Method({}, "get_UseFrameOffset", new JSIL.MethodSignature($.Boolean, [], []));
    $.Method({}, "set_UseFrameOffset", new JSIL.MethodSignature(null, [$.Boolean], []));
    $.Method({}, "get_UseLinearReferenceFrameA", new JSIL.MethodSignature($.Boolean, [], []));
    $.Property({}, "AnchorInA");
    $.Property({}, "AnchorInB");
    $.Property({}, "AngularDepth");
    $.Property({}, "AngularPos");
    $.Property({}, "CalculatedTransformA");
    $.Property({}, "CalculatedTransformB");
    $.Property({}, "DampingDirAngular");
    $.Property({}, "DampingDirLin");
    $.Property({}, "DampingLimAngular");
    $.Property({}, "DampingLimLin");
    $.Property({}, "DampingOrthoAngular");
    $.Property({}, "DampingOrthoLin");
    $.Property({}, "FrameOffsetA");
    $.Property({}, "FrameOffsetB");
    $.Property({}, "LinDepth");
    $.Property({}, "LinPos");
    $.Property({}, "LowerAngularLimit");
    $.Property({}, "LowerLinLimit");
    $.Property({}, "MaxAngularMotorForce");
    $.Property({}, "MaxLinMotorForce");
    $.Property({}, "PoweredAngularMotor");
    $.Property({}, "PoweredLinMotor");
    $.Property({}, "RestitutionDirAngular");
    $.Property({}, "RestitutionDirLin");
    $.Property({}, "RestitutionLimAngular");
    $.Property({}, "RestitutionLimLin");
    $.Property({}, "RestitutionOrthoAngular");
    $.Property({}, "RestitutionOrthoLin");
    $.Property({}, "SoftnessDirAngular");
    $.Property({}, "SoftnessDirLin");
    $.Property({}, "SoftnessLimAngular");
    $.Property({}, "SoftnessLimLin");
    $.Property({}, "SoftnessOrthoAngular");
    $.Property({}, "SoftnessOrthoLin");
    $.Property({}, "SolveAngularLimit");
    $.Property({}, "SolveLinLimit");
    $.Property({}, "TargetAngularMotorVelocity");
    $.Property({}, "TargetLinMotorVelocity");
    $.Property({}, "UpperAngularLimit");
    $.Property({}, "UpperLinLimit");
    $.Property({}, "UseFrameOffset");
    $.Property({}, "UseLinearReferenceFrameA");
  }, [$asm01.TypeRef("Fusee.Engine.IConstraintImp")]);

/* interface Fusee.Engine.ISphereShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.ISphereShapeImp", true, [], function ($) {
    $.Method({}, "get_Radius", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "set_Radius", new JSIL.MethodSignature(null, [$.Single], []));
    $.Property({}, "Radius");
  }, [$asm01.TypeRef("Fusee.Engine.ICollisionShapeImp")]);

/* interface Fusee.Engine.IStaticPlaneShapeImp */ 

JSIL.MakeInterface(
  "Fusee.Engine.IStaticPlaneShapeImp", true, [], function ($) {
    $.Method({}, "get_PlaneConstant", new JSIL.MethodSignature($.Single, [], []));
    $.Method({}, "get_PlaneNormal", new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []));
    $.Property({}, "PlaneConstant");
    $.Property({}, "PlaneNormal");
  }, [$asm01.TypeRef("Fusee.Engine.ICollisionShapeImp")]);

/* interface Fusee.Engine.ITexture */ 

JSIL.MakeInterface(
  "Fusee.Engine.ITexture", true, [], function ($) {
  }, []);

/* class Fusee.Engine.KeyEventArgs */ 

(function KeyEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.EventArgs)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Fusee.Engine.KeyCodes)) ();
  };

  function KeyEventArgs__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function KeyEventArgs_get_Alt () {
    return this.KeyEventArgs$Alt$value;
  };

  function KeyEventArgs_get_Control () {
    return this.KeyEventArgs$Control$value;
  };

  function KeyEventArgs_get_KeyCode () {
    return this.KeyEventArgs$KeyCode$value;
  };

  function KeyEventArgs_get_Shift () {
    return this.KeyEventArgs$Shift$value;
  };

  function KeyEventArgs_set_Alt (value) {
    this.KeyEventArgs$Alt$value = value;
  };

  function KeyEventArgs_set_Control (value) {
    this.KeyEventArgs$Control$value = value;
  };

  function KeyEventArgs_set_KeyCode (value) {
    this.KeyEventArgs$KeyCode$value = value;
  };

  function KeyEventArgs_set_Shift (value) {
    this.KeyEventArgs$Shift$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "Fusee.Engine.KeyEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      KeyEventArgs__ctor
    );

    $.Method({Static:false, Public:true }, "get_Alt", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      KeyEventArgs_get_Alt
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Control", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      KeyEventArgs_get_Control
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_KeyCode", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.KeyCodes"), [], []), 
      KeyEventArgs_get_KeyCode
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Shift", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      KeyEventArgs_get_Shift
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Alt", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      KeyEventArgs_set_Alt
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Control", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      KeyEventArgs_set_Control
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_KeyCode", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.KeyCodes")], []), 
      KeyEventArgs_set_KeyCode
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Shift", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      KeyEventArgs_set_Shift
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "KeyEventArgs$Shift$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "KeyEventArgs$Alt$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "KeyEventArgs$Control$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "KeyEventArgs$KeyCode$value", $asm01.TypeRef("Fusee.Engine.KeyCodes"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Shift", $.Boolean);

    $.Property({Static:false, Public:true }, "Alt", $.Boolean);

    $.Property({Static:false, Public:true }, "Control", $.Boolean);

    $.Property({Static:false, Public:true }, "KeyCode", $asm01.TypeRef("Fusee.Engine.KeyCodes"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Fusee.Engine.LightType */ 

JSIL.MakeEnum(
  "Fusee.Engine.LightType", true, {
    Directional: 0, 
    Point: 1, 
    Spot: 2
  }, false
);

/* struct Fusee.Engine.Light */ 

(function Light$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.Light", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "Active", $.Single); 
    $.Field({Static:false, Public:true }, "AmbientColor", $asm04.TypeRef("Fusee.Math.float4")); 
    $.Field({Static:false, Public:true }, "DiffuseColor", $asm04.TypeRef("Fusee.Math.float4")); 
    $.Field({Static:false, Public:true }, "SpecularColor", $asm04.TypeRef("Fusee.Math.float4")); 
    $.Field({Static:false, Public:true }, "Position", $asm04.TypeRef("Fusee.Math.float3")); 
    $.Field({Static:false, Public:true }, "Direction", $asm04.TypeRef("Fusee.Math.float3")); 
    $.Field({Static:false, Public:true }, "Type", $asm01.TypeRef("Fusee.Engine.LightType")); 
    $.Field({Static:false, Public:true }, "Angle", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.MouseEventArgs */ 

(function MouseEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.EventArgs)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Fusee.Engine.MouseButtons)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Fusee.Engine.Point)) ();
  };

  function MouseEventArgs__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function MouseEventArgs_get_Button () {
    return this.MouseEventArgs$Button$value;
  };

  function MouseEventArgs_get_Position () {
    return this.MouseEventArgs$Position$value;
  };

  function MouseEventArgs_set_Button (value) {
    this.MouseEventArgs$Button$value = value;
  };

  function MouseEventArgs_set_Position (value) {
    this.MouseEventArgs$Position$value = value;
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "Fusee.Engine.MouseEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      MouseEventArgs__ctor
    );

    $.Method({Static:false, Public:true }, "get_Button", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.MouseButtons"), [], []), 
      MouseEventArgs_get_Button
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Position", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.Point"), [], []), 
      MouseEventArgs_get_Position
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Button", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.MouseButtons")], []), 
      MouseEventArgs_set_Button
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.Point")], []), 
      MouseEventArgs_set_Position
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Field({Static:false, Public:false}, "MouseEventArgs$Button$value", $asm01.TypeRef("Fusee.Engine.MouseButtons"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "MouseEventArgs$Position$value", $asm01.TypeRef("Fusee.Engine.Point"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:true }, "Button", $asm01.TypeRef("Fusee.Engine.MouseButtons"));

    $.Property({Static:false, Public:true }, "Position", $asm01.TypeRef("Fusee.Engine.Point"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Engine.Point */ 

(function Point$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.Point", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "x", $.Int32); 
    $.Field({Static:false, Public:true }, "y", $.Int32); 
    $.Field({Static:false, Public:true }, "z", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Fusee.Engine.RenderState */ 

JSIL.MakeEnum(
  "Fusee.Engine.RenderState", true, {
    ZEnable: 7, 
    FillMode: 8, 
    SourceBlend: 19, 
    DestinationBlend: 20, 
    CullMode: 22, 
    ZFunc: 23, 
    AlphaBlendEnable: 27, 
    Wrap0: 128, 
    Wrap1: 129, 
    Wrap2: 130, 
    Wrap3: 131, 
    Clipping: 136, 
    BlendOperation: 171, 
    BlendFactor: 193, 
    SourceBlendAlpha: 207, 
    DestinationBlendAlpha: 208, 
    BlendOperationAlpha: 209
  }, false
);

/* enum Fusee.Engine.BlendOperation */ 

JSIL.MakeEnum(
  "Fusee.Engine.BlendOperation", true, {
    Add: 1, 
    Subtract: 2, 
    ReverseSubtract: 3, 
    Minimum: 4, 
    Maximum: 5
  }, false
);

/* enum Fusee.Engine.Compare */ 

JSIL.MakeEnum(
  "Fusee.Engine.Compare", true, {
    Never: 1, 
    Less: 2, 
    Equal: 3, 
    LessEqual: 4, 
    Greater: 5, 
    NotEqual: 6, 
    GreaterEqual: 7, 
    Always: 8
  }, false
);

/* enum Fusee.Engine.Cull */ 

JSIL.MakeEnum(
  "Fusee.Engine.Cull", true, {
    None: 1, 
    Clockwise: 2, 
    Counterclockwise: 3
  }, false
);

/* enum Fusee.Engine.Blend */ 

JSIL.MakeEnum(
  "Fusee.Engine.Blend", true, {
    Zero: 1, 
    One: 2, 
    SourceColor: 3, 
    InverseSourceColor: 4, 
    SourceAlpha: 5, 
    InverseSourceAlpha: 6, 
    DestinationAlpha: 7, 
    InverseDestinationAlpha: 8, 
    DestinationColor: 9, 
    InverseDestinationColor: 10, 
    BlendFactor: 14, 
    InverseBlendFactor: 15
  }, false
);

/* enum Fusee.Engine.FillMode */ 

JSIL.MakeEnum(
  "Fusee.Engine.FillMode", true, {
    Point: 1, 
    Wireframe: 2, 
    Solid: 3
  }, false
);

/* enum Fusee.Engine.ClearFlags */ 

JSIL.MakeEnum(
  "Fusee.Engine.ClearFlags", true, {
    Depth: 256, 
    Accum: 512, 
    Stencil: 1024, 
    Color: 16384
  }, true
);

/* enum Fusee.Engine.KeyCodes */ 

JSIL.MakeEnum(
  "Fusee.Engine.KeyCodes", true, {
    Modifiers: -65536, 
    None: 0, 
    LButton: 1, 
    RButton: 2, 
    Cancel: 3, 
    MButton: 4, 
    XButton1: 5, 
    XButton2: 6, 
    Back: 8, 
    Tab: 9, 
    LineFeed: 10, 
    Clear: 12, 
    Return: 13, 
    Enter: 13, 
    Shift: 16, 
    Control: 17, 
    Menu: 18, 
    Pause: 19, 
    CapsLock: 20, 
    Capital: 20, 
    KanaMode: 21, 
    HangulMode: 21, 
    HanguelMode: 21, 
    JunjaMode: 23, 
    FinalMode: 24, 
    HanjaMode: 25, 
    KanjiMode: 25, 
    Escape: 27, 
    IMEConvert: 28, 
    IMENonconvert: 29, 
    IMEAccept: 30, 
    IMEModeChange: 31, 
    Prior: 31, 
    PageUp: 31, 
    Space: 32, 
    PageDown: 34, 
    Next: 34, 
    End: 35, 
    Home: 36, 
    Left: 37, 
    Up: 38, 
    Right: 39, 
    Down: 40, 
    Select: 41, 
    Print: 42, 
    Execute: 43, 
    Snapshot: 44, 
    PrintScreen: 44, 
    Insert: 45, 
    Delete: 46, 
    Help: 47, 
    D0: 48, 
    D1: 49, 
    D2: 50, 
    D3: 51, 
    D4: 52, 
    D5: 53, 
    D6: 54, 
    D7: 55, 
    D8: 56, 
    D9: 57, 
    A: 65, 
    B: 66, 
    C: 67, 
    D: 68, 
    E: 69, 
    F: 70, 
    G: 71, 
    H: 72, 
    I: 73, 
    J: 74, 
    K: 75, 
    L: 76, 
    M: 77, 
    N: 78, 
    O: 79, 
    P: 80, 
    Q: 81, 
    R: 82, 
    S: 83, 
    T: 84, 
    U: 85, 
    V: 86, 
    W: 87, 
    X: 88, 
    Y: 89, 
    Z: 90, 
    LWin: 91, 
    RWin: 92, 
    Apps: 93, 
    Sleep: 95, 
    NumPad0: 96, 
    NumPad1: 97, 
    NumPad2: 98, 
    NumPad3: 99, 
    NumPad4: 100, 
    NumPad5: 101, 
    NumPad6: 102, 
    NumPad7: 103, 
    NumPad8: 104, 
    NumPad9: 105, 
    Multiply: 106, 
    Add: 107, 
    Separator: 108, 
    Subtract: 109, 
    Decimal: 110, 
    Divide: 111, 
    F1: 112, 
    F2: 113, 
    F3: 114, 
    F4: 115, 
    F5: 116, 
    F6: 117, 
    F7: 118, 
    F8: 119, 
    F9: 120, 
    F10: 121, 
    F11: 122, 
    F12: 123, 
    F13: 124, 
    F14: 125, 
    F15: 126, 
    F16: 127, 
    F17: 128, 
    F18: 129, 
    F19: 130, 
    F20: 131, 
    F21: 132, 
    F22: 133, 
    F23: 134, 
    F24: 135, 
    NumLock: 144, 
    Scroll: 145, 
    LShift: 160, 
    RShift: 161, 
    LControl: 162, 
    RControl: 163, 
    LMenu: 164, 
    RMenu: 165, 
    BrowserBack: 166, 
    BrowserForward: 167, 
    BrowserRefresh: 168, 
    BrowserStop: 169, 
    BrowserSearch: 170, 
    BrowserFavorites: 171, 
    BrowserHome: 172, 
    VolumeMute: 173, 
    VolumeDown: 174, 
    VolumeUp: 175, 
    MediaNextTrack: 176, 
    MediaPreviousTrack: 177, 
    MediaStop: 178, 
    MediaPlayPause: 179, 
    LaunchMail: 180, 
    SelectMedia: 181, 
    LaunchApplication1: 182, 
    LaunchApplication2: 183, 
    Oem1: 186, 
    OemSemicolon: 186, 
    OemPlus: 187, 
    OemComma: 188, 
    OemMinus: 189, 
    OemPeriod: 190, 
    OemQuestion: 191, 
    Oem2: 191, 
    Oem3: 192, 
    Oemtilde: 192, 
    Oem4: 219, 
    OemOpenBrackets: 219, 
    OemPipe: 220, 
    Oem5: 220, 
    Oem6: 221, 
    OemCloseBrackets: 221, 
    OemQuotes: 222, 
    Oem7: 222, 
    Oem8: 223, 
    Oem102: 226, 
    OemBackslash: 226, 
    Process: 229, 
    Packet: 231, 
    Attn: 246, 
    Crsel: 247, 
    Exsel: 252, 
    EraseEof: 253, 
    Play: 254, 
    Zoom: 255, 
    NoName: 256, 
    Pa1: 257, 
    OemClear: 258, 
    KeyCode: 65535, 
    ShiftModifier: 65536, 
    ControlModifier: 131072, 
    AltModifier: 262144
  }, false
);

/* enum Fusee.Engine.MouseButtons */ 

JSIL.MakeEnum(
  "Fusee.Engine.MouseButtons", true, {
    Unknown: 0, 
    Left: 1, 
    Right: 2, 
    Middle: 4
  }, true
);

/* enum Fusee.Engine.InputAxis */ 

JSIL.MakeEnum(
  "Fusee.Engine.InputAxis", true, {
    Unknown: 0, 
    MouseX: 1, 
    MouseY: 2, 
    MouseWheel: 3, 
    LastAxis: 4
  }, false
);

/* enum Fusee.Engine.CursorType */ 

JSIL.MakeEnum(
  "Fusee.Engine.CursorType", true, {
    Standard: 0, 
    Hand: 1
  }, false
);

/* class Fusee.Engine.Helper */ 

(function Helper$Members () {
  var $, $thisType;
  function Helper__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Helper", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      Helper__ctor
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "VertexAttribName", $.String, "fuVertex"); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ColorAttribName", $.String, "fuColor"); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "NormalAttribName", $.String, "fuNormal"); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "UvAttribName", $.String, "fuUV"); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "TangentAttribName", $.String, "fuTangent"); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "BitangentAttribName", $.String, "fuBitangent"); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "VertexAttribLocation", $.Int32, 0); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ColorAttribLocation", $.Int32, 1); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "NormalAttribLocation", $.Int32, 2); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "UvAttribLocation", $.Int32, 3); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "TangentAttribLocation", $.Int32, 4); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "BitangentAttribLocation", $.Int32, 5); 
    function Helper__cctor () {
      $thisType.VertexAttribName = "fuVertex";
      $thisType.ColorAttribName = "fuColor";
      $thisType.NormalAttribName = "fuNormal";
      $thisType.UvAttribName = "fuUV";
      $thisType.TangentAttribName = "fuTangent";
      $thisType.BitangentAttribName = "fuBitangent";
      $thisType.VertexAttribLocation = 0;
      $thisType.ColorAttribLocation = 1;
      $thisType.NormalAttribLocation = 2;
      $thisType.UvAttribLocation = 3;
      $thisType.TangentAttribLocation = 4;
      $thisType.BitangentAttribLocation = 5;
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      Helper__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Engine.Rectangle */ 

(function Rectangle$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };

  function Rectangle__ctor (left, top, right, bottom) {
    this.Left = left;
    this.Top = top;
    this.Right = right;
    this.Bottom = bottom;
  };

  function Rectangle_get_Height () {
    return ((this.Bottom - this.Top) | 0);
  };

  function Rectangle_get_Width () {
    return ((this.Right - this.Left) | 0);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.Rectangle", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ], []), 
      Rectangle__ctor
    );

    $.Method({Static:false, Public:true }, "get_Height", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Rectangle_get_Height
    );

    $.Method({Static:false, Public:true }, "get_Width", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Rectangle_get_Width
    );

    $.Field({Static:false, Public:true }, "Left", $.Int32); 
    $.Field({Static:false, Public:true }, "Right", $.Int32); 
    $.Field({Static:false, Public:true }, "Top", $.Int32); 
    $.Field({Static:false, Public:true }, "Bottom", $.Int32); 
    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true }, "Height", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.RenderEventArgs */ 

(function RenderEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.EventArgs)) ();
  };

  function RenderEventArgs__ctor () {
    $T00().prototype._ctor.call(this);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "Fusee.Engine.RenderEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      RenderEventArgs__ctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.ResizeEventArgs */ 

(function ResizeEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.EventArgs)) ();
  };

  function ResizeEventArgs__ctor () {
    $T00().prototype._ctor.call(this);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "Fusee.Engine.ResizeEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ResizeEventArgs__ctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Engine.ShaderParamInfo */ 

(function ShaderParamInfo$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.ShaderParamInfo", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "Size", $.Int32); 
    $.Field({Static:false, Public:true }, "Type", $asm07.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "Name", $.String); 
    $.Field({Static:false, Public:true }, "Handle", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

