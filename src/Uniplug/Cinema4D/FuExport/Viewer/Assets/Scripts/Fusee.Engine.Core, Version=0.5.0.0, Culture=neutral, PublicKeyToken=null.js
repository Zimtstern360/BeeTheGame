/* Generated by JSIL v0.7.8 build 970. See http://jsil.org/ for more information. */ 
var $asm02 = JSIL.DeclareAssembly("Fusee.Engine.Core, Version=0.5.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.DeclareNamespace("Fusee");
JSIL.DeclareNamespace("Fusee.Engine");
/* class Fusee.Engine.Audio */ 

(function Audio$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Fusee.Engine.IAudioImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.IAudioImp.CloseDevice)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.IAudioImp.GetVolume)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.IAudioImp.LoadFile)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.IAudioImp.OpenDevice)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.IAudioImp.SetPanning)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.Fusee.Engine.IAudioImp.SetVolume)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm01.Fusee.Engine.IAudioImp.Stop)) ();
  };

  function Audio__ctor () {
  };

  function Audio_CloseDevice () {
    $IM00().Call(this._audioImp, null);
  };

  function Audio_get_Instance () {
    var arg_15_0 = null;
    if ((arg_15_0 = $thisType._instance) === null) {
      arg_15_0 = ($thisType._instance = new $thisType());
    }
    return arg_15_0;
  };

  function Audio_GetVolume () {
    return +$IM01().Call(this._audioImp, null);
  };

  function Audio_LoadFile (fileName, streaming) {
    return $IM02().Call(this._audioImp, null, fileName, streaming);
  };

  function Audio_set_AudioImp (value) {
    this._audioImp = value;
    $IM03().Call(this._audioImp, null);
  };

  function Audio_SetPanning (val) {
    $IM04().Call(this._audioImp, null, val);
  };

  function Audio_SetVolume (val) {
    $IM05().Call(this._audioImp, null, val);
  };

  function Audio_Stop () {
    $IM06().Call(this._audioImp, null);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Audio", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      Audio__ctor
    );

    $.Method({Static:false, Public:false}, "CloseDevice", 
      new JSIL.MethodSignature(null, [], []), 
      Audio_CloseDevice
    );

    $.Method({Static:true , Public:true }, "get_Instance", 
      new JSIL.MethodSignature($.Type, [], []), 
      Audio_get_Instance
    );

    $.Method({Static:false, Public:true }, "GetVolume", 
      new JSIL.MethodSignature($.Single, [], []), 
      Audio_GetVolume
    );

    $.Method({Static:false, Public:true }, "LoadFile", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IAudioStream"), [$.String, $.Boolean], []), 
      Audio_LoadFile
    );

    $.Method({Static:false, Public:false}, "set_AudioImp", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IAudioImp")], []), 
      Audio_set_AudioImp
    );

    $.Method({Static:false, Public:true }, "SetPanning", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      Audio_SetPanning
    );

    $.Method({Static:false, Public:true }, "SetVolume", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      Audio_SetVolume
    );

    $.Method({Static:false, Public:true }, "Stop", 
      new JSIL.MethodSignature(null, [], []), 
      Audio_Stop
    );

    $.Field({Static:true , Public:false}, "_instance", $.Type); 
    $.Field({Static:false, Public:false}, "_audioImp", $asm01.TypeRef("Fusee.Engine.IAudioImp")); 
    $.Property({Static:false, Public:false}, "AudioImp", $asm01.TypeRef("Fusee.Engine.IAudioImp"));

    $.Property({Static:true , Public:true }, "Instance", $.Type);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.CollisionShape */ 

(function CollisionShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Math.float3)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_LocalScaling)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.set_Margin)) ();
  };

  function CollisionShape__ctor () {
  };

  function CollisionShape_get_LocalScaling () {
    return $IM00().Call(this.ICollisionShapeImp, null);
  };

  function CollisionShape_get_Margin () {
    return +$IM01().Call(this.ICollisionShapeImp, null);
  };

  function CollisionShape_set_LocalScaling (value) {
    var o = $thisType.$Cast($IM02().Call(this.ICollisionShapeImp, null));
    (o.ICollisionShapeImp.LocalScaling = value);
  };

  function CollisionShape_set_Margin (value) {
    var o = $thisType.$Cast($IM02().Call(this.ICollisionShapeImp, null));
    $IM03().Call(o.ICollisionShapeImp, null, value);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.CollisionShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      CollisionShape__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_LocalScaling", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      CollisionShape_get_LocalScaling
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Margin", 
      new JSIL.MethodSignature($.Single, [], []), 
      CollisionShape_get_Margin
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_LocalScaling", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      CollisionShape_set_LocalScaling
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Margin", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      CollisionShape_set_Margin
    );

    $.Field({Static:false, Public:false}, "ICollisionShapeImp", $asm01.TypeRef("Fusee.Engine.ICollisionShapeImp")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Margin", $.Single);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalScaling", $asm04.TypeRef("Fusee.Math.float3"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.BoxShape */ 

(function BoxShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Fusee.Engine.CollisionShape)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Fusee.Engine.IBoxShapeImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Fusee.Math.float3)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.IBoxShapeImp.get_HalfExtents)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.IBoxShapeImp.get_LocalScaling)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.set_Margin)) ();
  };

  function BoxShape__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function BoxShape_get_HalfExtents () {
    return $IM00().Call(this.BoxShapeImp, null);
  };

  function BoxShape_get_LocalScaling () {
    return $IM01().Call(this.BoxShapeImp, null);
  };

  function BoxShape_get_Margin () {
    return +$IM02().Call(this.BoxShapeImp, null);
  };

  function BoxShape_set_LocalScaling (value) {
    var o = $thisType.$Cast($IM03().Call(this.BoxShapeImp, null));
    (o.BoxShapeImp.LocalScaling = value);
  };

  function BoxShape_set_Margin (value) {
    var o = $thisType.$Cast($IM03().Call(this.BoxShapeImp, null));
    $IM04().Call(o.BoxShapeImp, null, value);
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Fusee.Engine.CollisionShape"), 
      Name: "Fusee.Engine.BoxShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      BoxShape__ctor
    );

    $.Method({Static:false, Public:true }, "get_HalfExtents", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      BoxShape_get_HalfExtents
    );

    $.Method({Static:false, Public:true }, "get_LocalScaling", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      BoxShape_get_LocalScaling
    );

    $.Method({Static:false, Public:true }, "get_Margin", 
      new JSIL.MethodSignature($.Single, [], []), 
      BoxShape_get_Margin
    );

    $.Method({Static:false, Public:true }, "set_LocalScaling", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      BoxShape_set_LocalScaling
    );

    $.Method({Static:false, Public:true }, "set_Margin", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      BoxShape_set_Margin
    );

    $.Field({Static:false, Public:false}, "BoxShapeImp", $asm01.TypeRef("Fusee.Engine.IBoxShapeImp")); 
    $.Property({Static:false, Public:true }, "LocalScaling", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "HalfExtents", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "Margin", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.CapsuleShape */ 

(function CapsuleShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Fusee.Engine.CollisionShape)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Fusee.Engine.ICapsuleShapeImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Fusee.Math.float3)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.ICapsuleShapeImp.get_HalfHeight)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_LocalScaling)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.ICapsuleShapeImp.get_Radius)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.ICapsuleShapeImp.get_UpAxis)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.set_Margin)) ();
  };

  function CapsuleShape__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function CapsuleShape_get_HalfHeight () {
    return +$IM00().Call(this.CapsuleShapeImp, null);
  };

  function CapsuleShape_get_LocalScaling () {
    return $IM01().Call(this.CapsuleShapeImp, null);
  };

  function CapsuleShape_get_Margin () {
    return +$IM02().Call(this.CapsuleShapeImp, null);
  };

  function CapsuleShape_get_Radius () {
    return +$IM03().Call(this.CapsuleShapeImp, null);
  };

  function CapsuleShape_get_UpAxis () {
    var retval = $IM04().Call(this.CapsuleShapeImp, null);
    return +$T04().$Cast(retval);
  };

  function CapsuleShape_set_LocalScaling (value) {
    var o = $thisType.$Cast($IM05().Call(this.CapsuleShapeImp, null));
    (o.CapsuleShapeImp.LocalScaling = value);
  };

  function CapsuleShape_set_Margin (value) {
    var o = $thisType.$Cast($IM05().Call(this.CapsuleShapeImp, null));
    $IM06().Call(o.CapsuleShapeImp, null, value);
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Fusee.Engine.CollisionShape"), 
      Name: "Fusee.Engine.CapsuleShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      CapsuleShape__ctor
    );

    $.Method({Static:false, Public:true }, "get_HalfHeight", 
      new JSIL.MethodSignature($.Single, [], []), 
      CapsuleShape_get_HalfHeight
    );

    $.Method({Static:false, Public:true }, "get_LocalScaling", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      CapsuleShape_get_LocalScaling
    );

    $.Method({Static:false, Public:true }, "get_Margin", 
      new JSIL.MethodSignature($.Single, [], []), 
      CapsuleShape_get_Margin
    );

    $.Method({Static:false, Public:true }, "get_Radius", 
      new JSIL.MethodSignature($.Single, [], []), 
      CapsuleShape_get_Radius
    );

    $.Method({Static:false, Public:true }, "get_UpAxis", 
      new JSIL.MethodSignature($.Single, [], []), 
      CapsuleShape_get_UpAxis
    );

    $.Method({Static:false, Public:true }, "set_LocalScaling", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      CapsuleShape_set_LocalScaling
    );

    $.Method({Static:false, Public:true }, "set_Margin", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      CapsuleShape_set_Margin
    );

    $.Field({Static:false, Public:false}, "CapsuleShapeImp", $asm01.TypeRef("Fusee.Engine.ICapsuleShapeImp")); 
    $.Property({Static:false, Public:true }, "Margin", $.Single);

    $.Property({Static:false, Public:true }, "LocalScaling", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "HalfHeight", $.Single);

    $.Property({Static:false, Public:true }, "Radius", $.Single);

    $.Property({Static:false, Public:true }, "UpAxis", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.CompoundShape */ 

(function CompoundShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Fusee.Engine.CollisionShape)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Math.float4x4)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.Fusee.Engine.BoxShape)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Fusee.Engine.ICompoundShapeImp)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.Fusee.Engine.SphereShape)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Fusee.Engine.CapsuleShape)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.Fusee.Engine.ConeShape)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm02.Fusee.Engine.CylinderShape)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm02.Fusee.Engine.MultiSphereShape)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm02.Fusee.Engine.EmptyShape)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm07.System.Single))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Fusee.Math.float3)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm01.TypeRef("Fusee.Engine.IBoxShapeImp")], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm01.TypeRef("Fusee.Engine.ISphereShapeImp")], []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm01.TypeRef("Fusee.Engine.ICapsuleShapeImp")], []))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm01.TypeRef("Fusee.Engine.IConeShapeImp")], []))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm01.TypeRef("Fusee.Engine.ICylinderShapeImp")], []))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm01.TypeRef("Fusee.Engine.IMultiSphereShapeImp")], []))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm01.TypeRef("Fusee.Engine.IEmptyShapeImp")], []))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.ICompoundShapeImp.AddChildShape)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.ICompoundShapeImp.CalculatePrincipalAxisTransform)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.set_Margin)) ();
  };

  function CompoundShape__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function CompoundShape_AddChildShape$00 (localTransform, childShape) {
    $S00().CallVirtual($IM00(), null, this.CompoundShapeImp, localTransform, childShape.BoxShapeImp);
  };

  function CompoundShape_AddChildShape$01 (localTransform, childShape) {
    $S01().CallVirtual($IM00(), null, this.CompoundShapeImp, localTransform, childShape.SphereShapeImp);
  };

  function CompoundShape_AddChildShape$02 (localTransform, childShape) {
    $S02().CallVirtual($IM00(), null, this.CompoundShapeImp, localTransform, childShape.CapsuleShapeImp);
  };

  function CompoundShape_AddChildShape$03 (localTransform, childShape) {
    $S03().CallVirtual($IM00(), null, this.CompoundShapeImp, localTransform, childShape.ConeShapeImp);
  };

  function CompoundShape_AddChildShape$04 (localTransform, childShape) {
    $S04().CallVirtual($IM00(), null, this.CompoundShapeImp, localTransform, childShape.CylinderShapeImp);
  };

  function CompoundShape_AddChildShape$05 (localTransform, childShape) {
    $S05().CallVirtual($IM00(), null, this.CompoundShapeImp, localTransform, childShape.MultiSphereShapeImp);
  };

  function CompoundShape_AddChildShape$06 (localTransform, childShape) {
    $S06().CallVirtual($IM00(), null, this.CompoundShapeImp, localTransform, childShape.EmtyShapeImp);
  };

  function CompoundShape_CalculatePrincipalAxisTransform (masses, principal, inertia) {
    $IM01().Call(this.CompoundShapeImp, null, masses, principal, inertia);
  };

  function CompoundShape_get_Margin () {
    return +$IM02().Call(this.CompoundShapeImp, null);
  };

  function CompoundShape_set_Margin (value) {
    var o = $T02().$Cast($IM03().Call(this.CompoundShapeImp, null));
    $IM04().Call(o.BoxShapeImp, null, value);
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Fusee.Engine.CollisionShape"), 
      Name: "Fusee.Engine.CompoundShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      CompoundShape__ctor
    );

    $.Method({Static:false, Public:true }, "AddChildShape", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm02.TypeRef("Fusee.Engine.BoxShape")], []), 
      CompoundShape_AddChildShape$00
    );

    $.Method({Static:false, Public:true }, "AddChildShape", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm02.TypeRef("Fusee.Engine.SphereShape")], []), 
      CompoundShape_AddChildShape$01
    );

    $.Method({Static:false, Public:true }, "AddChildShape", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm02.TypeRef("Fusee.Engine.CapsuleShape")], []), 
      CompoundShape_AddChildShape$02
    );

    $.Method({Static:false, Public:true }, "AddChildShape", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm02.TypeRef("Fusee.Engine.ConeShape")], []), 
      CompoundShape_AddChildShape$03
    );

    $.Method({Static:false, Public:true }, "AddChildShape", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm02.TypeRef("Fusee.Engine.CylinderShape")], []), 
      CompoundShape_AddChildShape$04
    );

    $.Method({Static:false, Public:true }, "AddChildShape", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm02.TypeRef("Fusee.Engine.MultiSphereShape")], []), 
      CompoundShape_AddChildShape$05
    );

    $.Method({Static:false, Public:true }, "AddChildShape", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm02.TypeRef("Fusee.Engine.EmptyShape")], []), 
      CompoundShape_AddChildShape$06
    );

    $.Method({Static:false, Public:true }, "CalculatePrincipalAxisTransform", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Single]), $asm04.TypeRef("Fusee.Math.float4x4"), 
          $asm04.TypeRef("Fusee.Math.float3")
        ], []), 
      CompoundShape_CalculatePrincipalAxisTransform
    );

    $.Method({Static:false, Public:true }, "get_Margin", 
      new JSIL.MethodSignature($.Single, [], []), 
      CompoundShape_get_Margin
    );

    $.Method({Static:false, Public:true }, "set_Margin", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      CompoundShape_set_Margin
    );

    $.Field({Static:false, Public:false}, "CompoundShapeImp", $asm01.TypeRef("Fusee.Engine.ICompoundShapeImp")); 
    $.Property({Static:false, Public:true }, "Margin", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.ConeShape */ 

(function ConeShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Fusee.Engine.CollisionShape)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Fusee.Engine.IConeShapeImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Fusee.Math.float3)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.Fusee.Engine.CapsuleShape)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.IConeShapeImp.get_ConeUpIndex)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.IConeShapeImp.get_Height)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_LocalScaling)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.IConeShapeImp.get_Radius)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm01.Fusee.Engine.IConeShapeImp.set_ConeUpIndex)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.set_Margin)) ();
  };

  function ConeShape__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ConeShape_get_ConeUpIndex () {
    return $IM00().Call(this.ConeShapeImp, null);
  };

  function ConeShape_get_Height () {
    return +$IM01().Call(this.ConeShapeImp, null);
  };

  function ConeShape_get_LocalScaling () {
    return $IM02().Call(this.ConeShapeImp, null);
  };

  function ConeShape_get_Margin () {
    return +$IM03().Call(this.ConeShapeImp, null);
  };

  function ConeShape_get_Radius () {
    return +$IM04().Call(this.ConeShapeImp, null);
  };

  function ConeShape_set_ConeUpIndex (value) {
    var o = $thisType.$Cast($IM05().Call(this.ConeShapeImp, null));
    $IM06().Call(o.ConeShapeImp, null, value);
  };

  function ConeShape_set_LocalScaling (value) {
    var o = $thisType.$Cast($IM05().Call(this.ConeShapeImp, null));
    (o.ConeShapeImp.LocalScaling = value);
  };

  function ConeShape_set_Margin (value) {
    var o = $T06().$Cast($IM05().Call(this.ConeShapeImp, null));
    $IM07().Call(o.CapsuleShapeImp, null, value);
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Fusee.Engine.CollisionShape"), 
      Name: "Fusee.Engine.ConeShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ConeShape__ctor
    );

    $.Method({Static:false, Public:true }, "get_ConeUpIndex", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ConeShape_get_ConeUpIndex
    );

    $.Method({Static:false, Public:true }, "get_Height", 
      new JSIL.MethodSignature($.Single, [], []), 
      ConeShape_get_Height
    );

    $.Method({Static:false, Public:true }, "get_LocalScaling", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      ConeShape_get_LocalScaling
    );

    $.Method({Static:false, Public:true }, "get_Margin", 
      new JSIL.MethodSignature($.Single, [], []), 
      ConeShape_get_Margin
    );

    $.Method({Static:false, Public:true }, "get_Radius", 
      new JSIL.MethodSignature($.Single, [], []), 
      ConeShape_get_Radius
    );

    $.Method({Static:false, Public:true }, "set_ConeUpIndex", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      ConeShape_set_ConeUpIndex
    );

    $.Method({Static:false, Public:true }, "set_LocalScaling", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      ConeShape_set_LocalScaling
    );

    $.Method({Static:false, Public:true }, "set_Margin", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      ConeShape_set_Margin
    );

    $.Field({Static:false, Public:false}, "ConeShapeImp", $asm01.TypeRef("Fusee.Engine.IConeShapeImp")); 
    $.Property({Static:false, Public:true }, "Margin", $.Single);

    $.Property({Static:false, Public:true }, "LocalScaling", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "ConeUpIndex", $.Int32);

    $.Property({Static:false, Public:true }, "Height", $.Single);

    $.Property({Static:false, Public:true }, "Radius", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.ConeTwistConstraint */ 

(function ConeTwistConstraint$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Math.float4x4)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.Fusee.Engine.RigidBody)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.Fusee.Math.Quaternion)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Single")], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single"), 
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single"), 
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single")
      ], []))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.CalcAngleInfo)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.CalcAngleInfo2)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.EnableMotor)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.get_AFrame)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.get_BFrame)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.get_FixThresh)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.get_FrameOffsetA)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.get_FrameOffsetB)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.get_IsPastSwingLimit)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_UserObject)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.get_RigidBodyA)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.get_RigidBodyB)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.get_SolveSwingLimit)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.get_SolveTwistLimit)) ();
  };
  var $IM0E = function () {
    return ($IM0E = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.get_SwingSpan1)) ();
  };
  var $IM0F = function () {
    return ($IM0F = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.get_SwingSpan2)) ();
  };
  var $IM10 = function () {
    return ($IM10 = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.get_TwistAngle)) ();
  };
  var $IM11 = function () {
    return ($IM11 = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.get_TwistLimitSign)) ();
  };
  var $IM12 = function () {
    return ($IM12 = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.get_TwistSpan)) ();
  };
  var $IM13 = function () {
    return ($IM13 = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.GetPointForAngle)) ();
  };
  var $IM14 = function () {
    return ($IM14 = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.GetUid)) ();
  };
  var $IM15 = function () {
    return ($IM15 = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.get_UserObject)) ();
  };
  var $IM16 = function () {
    return ($IM16 = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.set_FixThresh)) ();
  };
  var $IM17 = function () {
    return ($IM17 = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.SetAngularOnly)) ();
  };
  var $IM18 = function () {
    return ($IM18 = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.SetDamping)) ();
  };
  var $IM19 = function () {
    return ($IM19 = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.SetLimit)) ();
  };
  var $IM1A = function () {
    return ($IM1A = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.SetMaxMotorImpulse)) ();
  };
  var $IM1B = function () {
    return ($IM1B = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.SetMaxMotorImpulseNormalized)) ();
  };
  var $IM1C = function () {
    return ($IM1C = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.SetMotorTarget)) ();
  };
  var $IM1D = function () {
    return ($IM1D = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.SetMotorTargetInConstraintSpace)) ();
  };
  var $IM1E = function () {
    return ($IM1E = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp.UpdateRhs)) ();
  };

  function ConeTwistConstraint__ctor () {
  };

  function ConeTwistConstraint_CalcAngleInfo () {
    $IM00().Call(this._iCTConstraintImp, null);
  };

  function ConeTwistConstraint_CalcAngleInfo2 (transA, transB, invInertiaWorldA, invInertiaWorldB) {
    $IM01().Call(this._iCTConstraintImp, null, transA, transB, invInertiaWorldA, invInertiaWorldB);
  };

  function ConeTwistConstraint_EnableMotor (b) {
    $IM02().Call(this._iCTConstraintImp, null, b);
  };

  function ConeTwistConstraint_get_AFrame () {
    return $IM03().Call(this._iCTConstraintImp, null);
  };

  function ConeTwistConstraint_get_BFrame () {
    return $IM04().Call(this._iCTConstraintImp, null);
  };

  function ConeTwistConstraint_get_FixThresh () {
    return +$IM05().Call(this._iCTConstraintImp, null);
  };

  function ConeTwistConstraint_get_FrameOffsetA () {
    return $IM06().Call(this._iCTConstraintImp, null);
  };

  function ConeTwistConstraint_get_FrameOffsetB () {
    return $IM07().Call(this._iCTConstraintImp, null);
  };

  function ConeTwistConstraint_get_IsPastSwingLimit () {
    return $IM08().Call(this._iCTConstraintImp, null);
  };

  function ConeTwistConstraint_get_RigidBodyA () {
    var retval = $IM09().Call($IM0A().Call(this._iCTConstraintImp, null), null);
    return $T06().$Cast(retval);
  };

  function ConeTwistConstraint_get_RigidBodyB () {
    var retval = $IM09().Call($IM0B().Call(this._iCTConstraintImp, null), null);
    return $T06().$Cast(retval);
  };

  function ConeTwistConstraint_get_SolveSwingLimit () {
    return $IM0C().Call(this._iCTConstraintImp, null);
  };

  function ConeTwistConstraint_get_SolveTwistLimit () {
    return $IM0D().Call(this._iCTConstraintImp, null);
  };

  function ConeTwistConstraint_get_SwingSpan1 () {
    return +$IM0E().Call(this._iCTConstraintImp, null);
  };

  function ConeTwistConstraint_get_SwingSpan2 () {
    return +$IM0F().Call(this._iCTConstraintImp, null);
  };

  function ConeTwistConstraint_get_TwistAngle () {
    return +$IM10().Call(this._iCTConstraintImp, null);
  };

  function ConeTwistConstraint_get_TwistLimitSign () {
    return +$IM11().Call(this._iCTConstraintImp, null);
  };

  function ConeTwistConstraint_get_TwistSpan () {
    return +$IM12().Call(this._iCTConstraintImp, null);
  };

  function ConeTwistConstraint_GetPointForAngle (fAngleInRadius, fLength) {
    return $IM13().Call(this._iCTConstraintImp, null, fAngleInRadius, fLength);
  };

  function ConeTwistConstraint_GetUid () {
    return $IM14().Call(this._iCTConstraintImp, null);
  };

  function ConeTwistConstraint_set_FixThresh (value) {
    var o = $thisType.$Cast($IM15().Call(this._iCTConstraintImp, null));
    $IM16().Call(o._iCTConstraintImp, null, value);
  };

  function ConeTwistConstraint_SetAngularOnly (angularOnly) {
    $IM17().Call(this._iCTConstraintImp, null, angularOnly);
  };

  function ConeTwistConstraint_SetDamping (damping) {
    $IM18().Call(this._iCTConstraintImp, null, damping);
  };

  function ConeTwistConstraint_SetLimit$00 (limitIndex, limitValue) {
    $S00().CallVirtual($IM19(), null, this._iCTConstraintImp, limitIndex, limitValue);
  };

  function ConeTwistConstraint_SetLimit$01 (swingSpan1, swingSpan2, twistSpan, softness, biasFactor, relaxationFactor) {
    $S01().CallVirtual($IM19(), null, this._iCTConstraintImp, 
      swingSpan1, 
      swingSpan2, 
      twistSpan, 
      softness, 
      biasFactor, 
      relaxationFactor
    );
  };

  function ConeTwistConstraint_SetMaxMotorImpulse (maxMotorImpulse) {
    $IM1A().Call(this._iCTConstraintImp, null, maxMotorImpulse);
  };

  function ConeTwistConstraint_SetMaxMotorImpulseNormalized (maxMotorImpulse) {
    $IM1B().Call(this._iCTConstraintImp, null, maxMotorImpulse);
  };

  function ConeTwistConstraint_SetMotorTarget (q) {
    $IM1C().Call(this._iCTConstraintImp, null, q);
  };

  function ConeTwistConstraint_SetMotorTargetInConstraintSpace (q) {
    $IM1D().Call(this._iCTConstraintImp, null, q);
  };

  function ConeTwistConstraint_UpdateRhs (timeStep) {
    $IM1E().Call(this._iCTConstraintImp, null, timeStep);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.ConeTwistConstraint", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ConeTwistConstraint__ctor
    );

    $.Method({Static:false, Public:true }, "CalcAngleInfo", 
      new JSIL.MethodSignature(null, [], []), 
      ConeTwistConstraint_CalcAngleInfo
    );

    $.Method({Static:false, Public:true }, "CalcAngleInfo2", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4"), 
          $asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4")
        ], []), 
      ConeTwistConstraint_CalcAngleInfo2
    );

    $.Method({Static:false, Public:true }, "EnableMotor", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      ConeTwistConstraint_EnableMotor
    );

    $.Method({Static:false, Public:true }, "get_AFrame", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      ConeTwistConstraint_get_AFrame
    );

    $.Method({Static:false, Public:true }, "get_BFrame", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      ConeTwistConstraint_get_BFrame
    );

    $.Method({Static:false, Public:true }, "get_FixThresh", 
      new JSIL.MethodSignature($.Single, [], []), 
      ConeTwistConstraint_get_FixThresh
    );

    $.Method({Static:false, Public:true }, "get_FrameOffsetA", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      ConeTwistConstraint_get_FrameOffsetA
    );

    $.Method({Static:false, Public:true }, "get_FrameOffsetB", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      ConeTwistConstraint_get_FrameOffsetB
    );

    $.Method({Static:false, Public:true }, "get_IsPastSwingLimit", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ConeTwistConstraint_get_IsPastSwingLimit
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyA", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.RigidBody"), [], []), 
      ConeTwistConstraint_get_RigidBodyA
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyB", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.RigidBody"), [], []), 
      ConeTwistConstraint_get_RigidBodyB
    );

    $.Method({Static:false, Public:true }, "get_SolveSwingLimit", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ConeTwistConstraint_get_SolveSwingLimit
    );

    $.Method({Static:false, Public:true }, "get_SolveTwistLimit", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ConeTwistConstraint_get_SolveTwistLimit
    );

    $.Method({Static:false, Public:true }, "get_SwingSpan1", 
      new JSIL.MethodSignature($.Single, [], []), 
      ConeTwistConstraint_get_SwingSpan1
    );

    $.Method({Static:false, Public:true }, "get_SwingSpan2", 
      new JSIL.MethodSignature($.Single, [], []), 
      ConeTwistConstraint_get_SwingSpan2
    );

    $.Method({Static:false, Public:true }, "get_TwistAngle", 
      new JSIL.MethodSignature($.Single, [], []), 
      ConeTwistConstraint_get_TwistAngle
    );

    $.Method({Static:false, Public:true }, "get_TwistLimitSign", 
      new JSIL.MethodSignature($.Single, [], []), 
      ConeTwistConstraint_get_TwistLimitSign
    );

    $.Method({Static:false, Public:true }, "get_TwistSpan", 
      new JSIL.MethodSignature($.Single, [], []), 
      ConeTwistConstraint_get_TwistSpan
    );

    $.Method({Static:false, Public:true }, "GetPointForAngle", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [$.Single, $.Single], []), 
      ConeTwistConstraint_GetPointForAngle
    );

    $.Method({Static:false, Public:true }, "GetUid", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ConeTwistConstraint_GetUid
    );

    $.Method({Static:false, Public:true }, "set_FixThresh", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      ConeTwistConstraint_set_FixThresh
    );

    $.Method({Static:false, Public:true }, "SetAngularOnly", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      ConeTwistConstraint_SetAngularOnly
    );

    $.Method({Static:false, Public:true }, "SetDamping", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      ConeTwistConstraint_SetDamping
    );

    $.Method({Static:false, Public:true }, "SetLimit", 
      new JSIL.MethodSignature(null, [$.Int32, $.Single], []), 
      ConeTwistConstraint_SetLimit$00
    );

    $.Method({Static:false, Public:true }, "SetLimit", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single
        ], []), 
      ConeTwistConstraint_SetLimit$01
    );

    $.Method({Static:false, Public:true }, "SetMaxMotorImpulse", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      ConeTwistConstraint_SetMaxMotorImpulse
    );

    $.Method({Static:false, Public:true }, "SetMaxMotorImpulseNormalized", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      ConeTwistConstraint_SetMaxMotorImpulseNormalized
    );

    $.Method({Static:false, Public:true }, "SetMotorTarget", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.Quaternion")], []), 
      ConeTwistConstraint_SetMotorTarget
    );

    $.Method({Static:false, Public:true }, "SetMotorTargetInConstraintSpace", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.Quaternion")], []), 
      ConeTwistConstraint_SetMotorTargetInConstraintSpace
    );

    $.Method({Static:false, Public:true }, "UpdateRhs", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      ConeTwistConstraint_UpdateRhs
    );

    $.Field({Static:false, Public:false}, "_iCTConstraintImp", $asm01.TypeRef("Fusee.Engine.IConeTwistConstraintImp")); 
    $.Property({Static:false, Public:true }, "AFrame", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "BFrame", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "FixThresh", $.Single);

    $.Property({Static:false, Public:true }, "FrameOffsetA", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "FrameOffsetB", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "IsPastSwingLimit", $.Boolean);

    $.Property({Static:false, Public:true }, "SolveSwingLimit", $.Int32);

    $.Property({Static:false, Public:true }, "SolveTwistLimit", $.Int32);

    $.Property({Static:false, Public:true }, "SwingSpan1", $.Single);

    $.Property({Static:false, Public:true }, "SwingSpan2", $.Single);

    $.Property({Static:false, Public:true }, "TwistAngle", $.Single);

    $.Property({Static:false, Public:true }, "TwistLimitSign", $.Single);

    $.Property({Static:false, Public:true }, "TwistSpan", $.Single);

    $.Property({Static:false, Public:true }, "RigidBodyA", $asm02.TypeRef("Fusee.Engine.RigidBody"));

    $.Property({Static:false, Public:true }, "RigidBodyB", $asm02.TypeRef("Fusee.Engine.RigidBody"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.ConvexHullShape */ 

(function ConvexHullShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Fusee.Engine.CollisionShape)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Math.float3)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Fusee.Engine.IConvexHullShapeImp)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.IConvexHullShapeImp.AddPoint)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.IConvexHullShapeImp.get_LocalScaling)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.IConvexHullShapeImp.GetNumPoints)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.Fusee.Engine.IConvexHullShapeImp.GetScaledPoint)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm01.Fusee.Engine.IConvexHullShapeImp.GetUnscaledPoints)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.set_Margin)) ();
  };

  function ConvexHullShape__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ConvexHullShape_AddPoint (point) {
    var o = $thisType.$Cast($IM00().Call(this.ConvexHullShapeImp, null));
    $IM01().Call(o.ConvexHullShapeImp, null, point);
  };

  function ConvexHullShape_get_LocalScaling () {
    return $IM02().Call(this.ConvexHullShapeImp, null);
  };

  function ConvexHullShape_get_Margin () {
    return +$IM03().Call(this.ConvexHullShapeImp, null);
  };

  function ConvexHullShape_GetNumPoints () {
    return $IM04().Call(this.ConvexHullShapeImp, null);
  };

  function ConvexHullShape_GetScaledPoint (index) {
    return $IM05().Call(this.ConvexHullShapeImp, null, index);
  };

  function ConvexHullShape_GetUnscaledPoints () {
    return $IM06().Call(this.ConvexHullShapeImp, null);
  };

  function ConvexHullShape_set_LocalScaling (value) {
    var o = $thisType.$Cast($IM00().Call(this.ConvexHullShapeImp, null));
    (o.ConvexHullShapeImp.LocalScaling = value);
  };

  function ConvexHullShape_set_Margin (value) {
    var o = $thisType.$Cast($IM00().Call(this.ConvexHullShapeImp, null));
    $IM07().Call(o.ConvexHullShapeImp, null, value);
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Fusee.Engine.CollisionShape"), 
      Name: "Fusee.Engine.ConvexHullShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ConvexHullShape__ctor
    );

    $.Method({Static:false, Public:true }, "AddPoint", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      ConvexHullShape_AddPoint
    );

    $.Method({Static:false, Public:true }, "get_LocalScaling", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      ConvexHullShape_get_LocalScaling
    );

    $.Method({Static:false, Public:true }, "get_Margin", 
      new JSIL.MethodSignature($.Single, [], []), 
      ConvexHullShape_get_Margin
    );

    $.Method({Static:false, Public:true }, "GetNumPoints", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ConvexHullShape_GetNumPoints
    );

    $.Method({Static:false, Public:true }, "GetScaledPoint", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [$.Int32], []), 
      ConvexHullShape_GetScaledPoint
    );

    $.Method({Static:false, Public:true }, "GetUnscaledPoints", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")]), [], []), 
      ConvexHullShape_GetUnscaledPoints
    );

    $.Method({Static:false, Public:true }, "set_LocalScaling", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      ConvexHullShape_set_LocalScaling
    );

    $.Method({Static:false, Public:true }, "set_Margin", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      ConvexHullShape_set_Margin
    );

    $.Field({Static:false, Public:false}, "ConvexHullShapeImp", $asm01.TypeRef("Fusee.Engine.IConvexHullShapeImp")); 
    $.Property({Static:false, Public:true }, "Margin", $.Single);

    $.Property({Static:false, Public:true }, "LocalScaling", $asm04.TypeRef("Fusee.Math.float3"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Mesh */ 

(function Mesh$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Fusee.Engine.IMeshImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm07.System.UInt32))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm04.Fusee.Math.float3))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm07.System.UInt16))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize(System.Array.Of($asm04.Fusee.Math.float2))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.IMeshImp.get_ColorsSet)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.IMeshImp.get_NormalsSet)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.IMeshImp.get_TrianglesSet)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.IMeshImp.get_UVsSet)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.IMeshImp.get_VerticesSet)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.Fusee.Engine.IMeshImp.InvalidateColors)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm01.Fusee.Engine.IMeshImp.InvalidateNormals)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm01.Fusee.Engine.IMeshImp.InvalidateTriangles)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm01.Fusee.Engine.IMeshImp.InvalidateUVs)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm01.Fusee.Engine.IMeshImp.InvalidateVertices)) ();
  };

  function Mesh__ctor () {
  };

  function Mesh_get_Colors () {
    return this._colors;
  };

  function Mesh_get_ColorsSet () {
    return ((this._meshImp !== null) && $IM00().Call(this._meshImp, null));
  };

  function Mesh_get_Normals () {
    return this._normals;
  };

  function Mesh_get_NormalsSet () {
    return ((this._meshImp !== null) && $IM01().Call(this._meshImp, null));
  };

  function Mesh_get_Triangles () {
    return this._triangles;
  };

  function Mesh_get_TrianglesSet () {
    return ((this._meshImp !== null) && $IM02().Call(this._meshImp, null));
  };

  function Mesh_get_UVs () {
    return this._uvs;
  };

  function Mesh_get_UVsSet () {
    return ((this._meshImp !== null) && $IM03().Call(this._meshImp, null));
  };

  function Mesh_get_Vertices () {
    return this._vertices;
  };

  function Mesh_get_VerticesSet () {
    return ((this._meshImp !== null) && $IM04().Call(this._meshImp, null));
  };

  function Mesh_set_Colors (value) {
    if (this._meshImp !== null) {
      $IM05().Call(this._meshImp, null);
    }
    this._colors = value;
  };

  function Mesh_set_Normals (value) {
    if (this._meshImp !== null) {
      $IM06().Call(this._meshImp, null);
    }
    this._normals = value;
  };

  function Mesh_set_Triangles (value) {
    if (this._meshImp !== null) {
      $IM07().Call(this._meshImp, null);
    }
    this._triangles = value;
  };

  function Mesh_set_UVs (value) {
    if (this._meshImp !== null) {
      $IM08().Call(this._meshImp, null);
    }
    this._uvs = value;
  };

  function Mesh_set_Vertices (value) {
    if (this._meshImp !== null) {
      $IM09().Call(this._meshImp, null);
    }
    this._vertices = value;
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Mesh", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      Mesh__ctor
    );

    $.Method({Static:false, Public:true }, "get_Colors", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.UInt32]), [], []), 
      Mesh_get_Colors
    );

    $.Method({Static:false, Public:true }, "get_ColorsSet", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      Mesh_get_ColorsSet
    );

    $.Method({Static:false, Public:true }, "get_Normals", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")]), [], []), 
      Mesh_get_Normals
    );

    $.Method({Static:false, Public:true }, "get_NormalsSet", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      Mesh_get_NormalsSet
    );

    $.Method({Static:false, Public:true }, "get_Triangles", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.UInt16]), [], []), 
      Mesh_get_Triangles
    );

    $.Method({Static:false, Public:true }, "get_TrianglesSet", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      Mesh_get_TrianglesSet
    );

    $.Method({Static:false, Public:true }, "get_UVs", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float2")]), [], []), 
      Mesh_get_UVs
    );

    $.Method({Static:false, Public:true }, "get_UVsSet", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      Mesh_get_UVsSet
    );

    $.Method({Static:false, Public:true }, "get_Vertices", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")]), [], []), 
      Mesh_get_Vertices
    );

    $.Method({Static:false, Public:true }, "get_VerticesSet", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      Mesh_get_VerticesSet
    );

    $.Method({Static:false, Public:true }, "set_Colors", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.UInt32])], []), 
      Mesh_set_Colors
    );

    $.Method({Static:false, Public:true }, "set_Normals", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")])], []), 
      Mesh_set_Normals
    );

    $.Method({Static:false, Public:true }, "set_Triangles", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.UInt16])], []), 
      Mesh_set_Triangles
    );

    $.Method({Static:false, Public:true }, "set_UVs", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float2")])], []), 
      Mesh_set_UVs
    );

    $.Method({Static:false, Public:true }, "set_Vertices", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")])], []), 
      Mesh_set_Vertices
    );

    $.Field({Static:false, Public:false}, "_meshImp", $asm01.TypeRef("Fusee.Engine.IMeshImp")); 
    $.Field({Static:false, Public:false}, "_vertices", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")])); 
    $.Field({Static:false, Public:false}, "_colors", $jsilcore.TypeRef("System.Array", [$.UInt32])); 
    $.Field({Static:false, Public:false}, "_normals", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")])); 
    $.Field({Static:false, Public:false}, "_uvs", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float2")])); 
    $.Field({Static:false, Public:false}, "_triangles", $jsilcore.TypeRef("System.Array", [$.UInt16])); 
    $.Property({Static:false, Public:true }, "Vertices", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")]))
      .Attribute($asm08.TypeRef("ProtoBuf.ProtoMemberAttribute"), function () { return [1]; });

    $.Property({Static:false, Public:true }, "VerticesSet", $.Boolean);

    $.Property({Static:false, Public:true }, "Colors", $jsilcore.TypeRef("System.Array", [$.UInt32]))
      .Attribute($asm08.TypeRef("ProtoBuf.ProtoMemberAttribute"), function () { return [2]; });

    $.Property({Static:false, Public:true }, "ColorsSet", $.Boolean);

    $.Property({Static:false, Public:true }, "Normals", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")]))
      .Attribute($asm08.TypeRef("ProtoBuf.ProtoMemberAttribute"), function () { return [3]; });

    $.Property({Static:false, Public:true }, "NormalsSet", $.Boolean);

    $.Property({Static:false, Public:true }, "UVs", $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float2")]))
      .Attribute($asm08.TypeRef("ProtoBuf.ProtoMemberAttribute"), function () { return [4]; });

    $.Property({Static:false, Public:true }, "UVsSet", $.Boolean);

    $.Property({Static:false, Public:true }, "Triangles", $jsilcore.TypeRef("System.Array", [$.UInt16]))
      .Attribute($asm08.TypeRef("ProtoBuf.ProtoMemberAttribute"), function () { return [5]; });

    $.Property({Static:false, Public:true }, "TrianglesSet", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm08.TypeRef("ProtoBuf.ProtoContractAttribute"));

})();

/* class Fusee.Engine.Cube */ 

(function Cube$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Fusee.Engine.Mesh)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Math.float3)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.UInt16)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Fusee.Math.float2)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Math.float3"), [
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single"), 
        $asm07.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Math.float2"), [$asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single")]))) ();
  };

  function Cube__ctor () {
    $T00().prototype._ctor.call(this);
    this.set_Vertices(JSIL.Array.New($T01(), [(new ($T01())()).__Initialize__({
            x: 0.5, 
            y: -0.5, 
            z: 0.5}
        ), (new ($T01())()).__Initialize__({
            x: 0.5, 
            y: 0.5, 
            z: 0.5}
        ), (new ($T01())()).__Initialize__({
            x: -0.5, 
            y: 0.5, 
            z: 0.5}
        ), (new ($T01())()).__Initialize__({
            x: -0.5, 
            y: -0.5, 
            z: 0.5}
        ), (new ($T01())()).__Initialize__({
            x: 0.5, 
            y: -0.5, 
            z: -0.5}
        ), (new ($T01())()).__Initialize__({
            x: 0.5, 
            y: 0.5, 
            z: -0.5}
        ), (new ($T01())()).__Initialize__({
            x: 0.5, 
            y: 0.5, 
            z: 0.5}
        ), (new ($T01())()).__Initialize__({
            x: 0.5, 
            y: -0.5, 
            z: 0.5}
        ), (new ($T01())()).__Initialize__({
            x: -0.5, 
            y: -0.5, 
            z: -0.5}
        ), (new ($T01())()).__Initialize__({
            x: -0.5, 
            y: 0.5, 
            z: -0.5}
        ), (new ($T01())()).__Initialize__({
            x: 0.5, 
            y: 0.5, 
            z: -0.5}
        ), (new ($T01())()).__Initialize__({
            x: 0.5, 
            y: -0.5, 
            z: -0.5}
        ), (new ($T01())()).__Initialize__({
            x: -0.5, 
            y: -0.5, 
            z: 0.5}
        ), (new ($T01())()).__Initialize__({
            x: -0.5, 
            y: 0.5, 
            z: 0.5}
        ), (new ($T01())()).__Initialize__({
            x: -0.5, 
            y: 0.5, 
            z: -0.5}
        ), (new ($T01())()).__Initialize__({
            x: -0.5, 
            y: -0.5, 
            z: -0.5}
        ), (new ($T01())()).__Initialize__({
            x: 0.5, 
            y: 0.5, 
            z: 0.5}
        ), (new ($T01())()).__Initialize__({
            x: 0.5, 
            y: 0.5, 
            z: -0.5}
        ), (new ($T01())()).__Initialize__({
            x: -0.5, 
            y: 0.5, 
            z: -0.5}
        ), (new ($T01())()).__Initialize__({
            x: -0.5, 
            y: 0.5, 
            z: 0.5}
        ), (new ($T01())()).__Initialize__({
            x: 0.5, 
            y: -0.5, 
            z: -0.5}
        ), (new ($T01())()).__Initialize__({
            x: 0.5, 
            y: -0.5, 
            z: 0.5}
        ), (new ($T01())()).__Initialize__({
            x: -0.5, 
            y: -0.5, 
            z: 0.5}
        ), (new ($T01())()).__Initialize__({
            x: -0.5, 
            y: -0.5, 
            z: -0.5}
        )]));
    this.set_Triangles(JSIL.Array.New($T02(), [0, 2, 1, 0, 3, 2, 4, 6, 5, 4, 7, 6, 8, 10, 9, 8, 11, 10, 12, 14, 13, 12, 15, 14, 16, 18, 17, 16, 19, 18, 20, 22, 21, 20, 23, 22]));
    this.set_Normals(JSIL.Array.New($T01(), [$S00().Construct(0, 0, 1), $S00().Construct(0, 0, 1), $S00().Construct(0, 0, 1), $S00().Construct(0, 0, 1), $S00().Construct(1, 0, 0), $S00().Construct(1, 0, 0), $S00().Construct(1, 0, 0), $S00().Construct(1, 0, 0), $S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1), $S00().Construct(0, 0, -1), $S00().Construct(-1, 0, 0), $S00().Construct(-1, 0, 0), $S00().Construct(-1, 0, 0), $S00().Construct(-1, 0, 0), $S00().Construct(0, 1, 0), $S00().Construct(0, 1, 0), $S00().Construct(0, 1, 0), $S00().Construct(0, 1, 0), $S00().Construct(0, -1, 0), $S00().Construct(0, -1, 0), $S00().Construct(0, -1, 0), $S00().Construct(0, -1, 0)]));
    this.set_UVs(JSIL.Array.New($T03(), [$S01().Construct(1, 0), $S01().Construct(1, 1), $S01().Construct(0, 1), $S01().Construct(0, 0), $S01().Construct(1, 0), $S01().Construct(1, 1), $S01().Construct(0, 1), $S01().Construct(0, 0), $S01().Construct(1, 0), $S01().Construct(1, 1), $S01().Construct(0, 1), $S01().Construct(0, 0), $S01().Construct(1, 0), $S01().Construct(1, 1), $S01().Construct(0, 1), $S01().Construct(0, 0), $S01().Construct(1, 0), $S01().Construct(1, 1), $S01().Construct(0, 1), $S01().Construct(0, 0), $S01().Construct(1, 0), $S01().Construct(1, 1), $S01().Construct(0, 1), $S01().Construct(0, 0)]));
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Fusee.Engine.Mesh"), 
      Name: "Fusee.Engine.Cube", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      Cube__ctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.CylinderShape */ 

(function CylinderShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Fusee.Engine.CollisionShape)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Fusee.Engine.ICylinderShapeImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm04.Fusee.Math.float3)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.ICylinderShapeImp.get_HalfExtents)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_LocalScaling)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.ICylinderShapeImp.get_Radius)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.ICylinderShapeImp.get_UpAxis)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.set_Margin)) ();
  };

  function CylinderShape__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function CylinderShape_get_HalfExtents () {
    return $IM00().Call(this.CylinderShapeImp, null);
  };

  function CylinderShape_get_LocalScaling () {
    return $IM01().Call(this.CylinderShapeImp, null);
  };

  function CylinderShape_get_Margin () {
    return +$IM02().Call(this.CylinderShapeImp, null);
  };

  function CylinderShape_get_Radius () {
    return +$IM03().Call(this.CylinderShapeImp, null);
  };

  function CylinderShape_get_UpAxis () {
    var retval = $IM04().Call(this.CylinderShapeImp, null);
    return +$T04().$Cast(retval);
  };

  function CylinderShape_set_LocalScaling (value) {
    var o = $thisType.$Cast($IM05().Call(this.CylinderShapeImp, null));
    (o.CylinderShapeImp.LocalScaling = value);
  };

  function CylinderShape_set_Margin (value) {
    var o = $thisType.$Cast($IM05().Call(this.CylinderShapeImp, null));
    $IM06().Call(o.CylinderShapeImp, null, value);
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Fusee.Engine.CollisionShape"), 
      Name: "Fusee.Engine.CylinderShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      CylinderShape__ctor
    );

    $.Method({Static:false, Public:true }, "get_HalfExtents", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      CylinderShape_get_HalfExtents
    );

    $.Method({Static:false, Public:true }, "get_LocalScaling", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      CylinderShape_get_LocalScaling
    );

    $.Method({Static:false, Public:true }, "get_Margin", 
      new JSIL.MethodSignature($.Single, [], []), 
      CylinderShape_get_Margin
    );

    $.Method({Static:false, Public:true }, "get_Radius", 
      new JSIL.MethodSignature($.Single, [], []), 
      CylinderShape_get_Radius
    );

    $.Method({Static:false, Public:true }, "get_UpAxis", 
      new JSIL.MethodSignature($.Single, [], []), 
      CylinderShape_get_UpAxis
    );

    $.Method({Static:false, Public:true }, "set_LocalScaling", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      CylinderShape_set_LocalScaling
    );

    $.Method({Static:false, Public:true }, "set_Margin", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      CylinderShape_set_Margin
    );

    $.Field({Static:false, Public:false}, "CylinderShapeImp", $asm01.TypeRef("Fusee.Engine.ICylinderShapeImp")); 
    $.Property({Static:false, Public:true }, "Margin", $.Single);

    $.Property({Static:false, Public:true }, "LocalScaling", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "HalfExtents", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "Radius", $.Single);

    $.Property({Static:false, Public:true }, "UpAxis", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Diagnostics */ 

(function Diagnostics$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Fusee.Engine.Diagnostics", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "Log", 
      new JSIL.MethodSignature(null, [$.Object], [])
    )
      .Attribute($asm0F.TypeRef("JSIL.Meta.JSExternal"));

    $.ExternalProperty({Static:true , Public:true }, "Timer", $.Double)
      .Attribute($asm0F.TypeRef("JSIL.Meta.JSExternal"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.DynamicWorld */ 

(function DynamicWorld$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Fusee.Engine.ImpFactory)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Fusee.Engine.IBoxShapeImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.Fusee.Engine.BoxShape)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm04.Fusee.Math.float3)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Fusee.Engine.ICapsuleShapeImp)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm02.Fusee.Engine.CapsuleShape)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.Fusee.Engine.ICompoundShapeImp)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm02.Fusee.Engine.CompoundShape)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Fusee.Engine.IConeShapeImp)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm02.Fusee.Engine.ConeShape)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm02.Fusee.Engine.RigidBody)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm04.Fusee.Math.float4x4)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.Fusee.Engine.IConeTwistConstraintImp)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm02.Fusee.Engine.ConeTwistConstraint)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.Fusee.Engine.IConvexHullShapeImp)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm02.Fusee.Engine.ConvexHullShape)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize(System.Array.Of($asm04.Fusee.Math.float3))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.Fusee.Engine.ICylinderShapeImp)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm02.Fusee.Engine.CylinderShape)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.Fusee.Engine.IEmptyShapeImp)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm02.Fusee.Engine.EmptyShape)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.Fusee.Engine.IGearConstraintImp)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm02.Fusee.Engine.GearConstraint)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm02.Fusee.Engine.Generic6DofConstraint)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm02.Fusee.Engine.Mesh)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize(System.Array.Of($asm07.System.Int32))) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize(System.Array.Of($asm07.System.UInt16))) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm07.System.Convert)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm01.Fusee.Engine.IGImpactMeshShapeImp)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm02.Fusee.Engine.GImpactMeshShape)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm01.Fusee.Engine.IHingeConstraintImp)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm02.Fusee.Engine.HingeConstraint)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize(System.Array.Of($asm07.System.Single))) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm01.Fusee.Engine.IMultiSphereShapeImp)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm02.Fusee.Engine.MultiSphereShape)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm01.Fusee.Engine.IPoint2PointConstraintImp)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm02.Fusee.Engine.Point2PointConstraint)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm02.Fusee.Engine.CollisionShape)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize($asm02.Fusee.Engine.SphereShape)) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm02.Fusee.Engine.StaticPlaneShape)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm09.System.Diagnostics.Debug)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm02.Fusee.Engine.SliderConstraint)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm01.Fusee.Engine.ISphereShapeImp)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm01.Fusee.Engine.IStaticPlaneShapeImp)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IBoxShapeImp"), [$asm07.TypeRef("System.Single")], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IBoxShapeImp"), [
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single"), 
        $asm07.TypeRef("System.Single")
      ], []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IBoxShapeImp"), [$asm04.TypeRef("Fusee.Math.float3")], []))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IConeTwistConstraintImp"), [$asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm04.TypeRef("Fusee.Math.float4x4")], []))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IConeTwistConstraintImp"), [
        $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), 
        $asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4")
      ], []))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IConvexHullShapeImp"), [], []))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IConvexHullShapeImp"), [$jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")]), $asm07.TypeRef("System.Boolean")], []))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ICylinderShapeImp"), [$asm07.TypeRef("System.Single")], []))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ICylinderShapeImp"), [
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single"), 
        $asm07.TypeRef("System.Single")
      ], []))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ICylinderShapeImp"), [$asm04.TypeRef("Fusee.Math.float3")], []))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IGeneric6DofConstraintImp"), [
        $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm04.TypeRef("Fusee.Math.float4x4"), 
        $asm07.TypeRef("System.Boolean")
      ], []))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IGeneric6DofConstraintImp"), [
        $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), 
        $asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4"), 
        $asm07.TypeRef("System.Boolean")
      ], []))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [$asm07.TypeRef("System.UInt16")], []))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IHingeConstraintImp"), [
        $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm04.TypeRef("Fusee.Math.float4x4"), 
        $asm07.TypeRef("System.Boolean")
      ], []))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IHingeConstraintImp"), [
        $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm04.TypeRef("Fusee.Math.float3"), 
        $asm04.TypeRef("Fusee.Math.float3"), $asm07.TypeRef("System.Boolean")
      ], []))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IHingeConstraintImp"), [
        $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), 
        $asm04.TypeRef("Fusee.Math.float3"), $asm04.TypeRef("Fusee.Math.float3"), 
        $asm04.TypeRef("Fusee.Math.float3"), $asm04.TypeRef("Fusee.Math.float3"), 
        $asm07.TypeRef("System.Boolean")
      ], []))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IHingeConstraintImp"), [
        $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), 
        $asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4"), 
        $asm07.TypeRef("System.Boolean")
      ], []))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IPoint2PointConstraintImp"), [$asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm04.TypeRef("Fusee.Math.float3")], []))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IPoint2PointConstraintImp"), [
        $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), 
        $asm04.TypeRef("Fusee.Math.float3"), $asm04.TypeRef("Fusee.Math.float3")
      ], []))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.TypeRef("System.String")], []))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ISliderConstraintImp"), [
        $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), 
        $asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4"), 
        $asm07.TypeRef("System.Boolean")
      ], []))) ();
  };
  var $S15 = function () {
    return ($S15 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ISliderConstraintImp"), [
        $asm01.TypeRef("Fusee.Engine.IRigidBodyImp"), $asm04.TypeRef("Fusee.Math.float4x4"), 
        $asm07.TypeRef("System.Boolean")
      ], []))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.AddBoxShape)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.set_UserObject)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.AddCapsuleShape)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.AddCompoundShape)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.AddConeShape)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.AddConeTwistConstraint)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.set_UserObject)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.AddConvexHullShape)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.AddCylinderShape)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.AddEmptyShape)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.AddGearConstraint)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.AddGeneric6DofConstraint)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.AddGImpactMeshShape)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.AddHingeConstraint)) ();
  };
  var $IM0E = function () {
    return ($IM0E = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.AddMultiSphereShape)) ();
  };
  var $IM0F = function () {
    return ($IM0F = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.AddPoint2PointConstraint)) ();
  };
  var $IM10 = function () {
    return ($IM10 = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.AddRigidBody)) ();
  };
  var $IM11 = function () {
    return ($IM11 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.set_UserObject)) ();
  };
  var $IM12 = function () {
    return ($IM12 = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.AddSliderConstraint)) ();
  };
  var $IM13 = function () {
    return ($IM13 = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.AddSphereShape)) ();
  };
  var $IM14 = function () {
    return ($IM14 = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.AddStaticPlaneShape)) ();
  };
  var $IM15 = function () {
    return ($IM15 = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.Dispose)) ();
  };
  var $IM16 = function () {
    return ($IM16 = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.get_Gravity)) ();
  };
  var $IM17 = function () {
    return ($IM17 = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.GetRigidBody)) ();
  };
  var $IM18 = function () {
    return ($IM18 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_UserObject)) ();
  };
  var $IM19 = function () {
    return ($IM19 = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.NumberConstraints)) ();
  };
  var $IM1A = function () {
    return ($IM1A = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.NumberRigidBodies)) ();
  };
  var $IM1B = function () {
    return ($IM1B = JSIL.Memoize($asm01.Fusee.Engine.IDynamicWorldImp.StepSimulation)) ();
  };

  function DynamicWorld__ctor () {
    this._dwi = $T00().CreateIDynamicWorldImp();
  };

  function DynamicWorld_AddBoxShape$00 (boxHalfExtents) {
    var iBoxShapeImp = $S00().CallVirtual($IM00(), null, this._dwi, boxHalfExtents);
    var retval = new ($T04())();
    retval.BoxShapeImp = iBoxShapeImp;
    $IM01().Call(iBoxShapeImp, null, retval);
    return retval;
  };

  function DynamicWorld_AddBoxShape$01 (boxHalfExtentsX, boxHalfExtentsY, boxHalfExtentsZ) {
    var iBoxShapeImp = $S01().CallVirtual($IM00(), null, this._dwi, boxHalfExtentsX, boxHalfExtentsY, boxHalfExtentsZ);
    var retval = new ($T04())();
    retval.BoxShapeImp = iBoxShapeImp;
    $IM01().Call(iBoxShapeImp, null, retval);
    return retval;
  };

  function DynamicWorld_AddBoxShape$02 (boxHalfExtents) {
    var iBoxShapeImp = $S02().CallVirtual($IM00(), null, this._dwi, boxHalfExtents);
    var retval = new ($T04())();
    retval.BoxShapeImp = iBoxShapeImp;
    $IM01().Call(iBoxShapeImp, null, retval);
    return retval;
  };

  function DynamicWorld_AddCapsuleShape (radius, height) {
    var iCapsuleShapeImp = $IM02().Call(this._dwi, null, radius, height);
    var retval = new ($T08())();
    retval.CapsuleShapeImp = iCapsuleShapeImp;
    $IM01().Call(iCapsuleShapeImp, null, retval);
    return retval;
  };

  function DynamicWorld_AddCompoundShape (enableDynamicAabbTree) {
    var iCompoundImp = $IM03().Call(this._dwi, null, enableDynamicAabbTree);
    var retval = new ($T0B())();
    retval.CompoundShapeImp = iCompoundImp;
    $IM01().Call(iCompoundImp, null, retval);
    return retval;
  };

  function DynamicWorld_AddConeShape (radius, height) {
    var iConeShapeImp = $IM04().Call(this._dwi, null, radius, height);
    var retval = new ($T0D())();
    retval.ConeShapeImp = iConeShapeImp;
    $IM01().Call(iConeShapeImp, null, retval);
    return retval;
  };

  function DynamicWorld_AddConeTwistConstraint$03 (rigidBodyA, rbAFrame) {
    var icti = $S03().CallVirtual($IM05(), null, this._dwi, rigidBodyA._iRigidBodyImp, rbAFrame);
    var retval = new ($T11())();
    retval._iCTConstraintImp = icti;
    $IM06().Call(icti, null, retval);
    return retval;
  };

  function DynamicWorld_AddConeTwistConstraint$04 (rigidBodyA, rigidBodyB, rbAFrame, rbBFrame) {
    var icti = $S04().CallVirtual($IM05(), null, this._dwi, rigidBodyA._iRigidBodyImp, rigidBodyB._iRigidBodyImp, rbAFrame, rbBFrame);
    var retval = new ($T11())();
    retval._iCTConstraintImp = icti;
    $IM06().Call(icti, null, retval);
    return retval;
  };

  function DynamicWorld_AddConvexHullShape$05 () {
    var iConvexHullShapeImp = $S05().CallVirtual($IM07(), null, this._dwi);
    var retval = new ($T14())();
    retval.ConvexHullShapeImp = iConvexHullShapeImp;
    $IM01().Call(iConvexHullShapeImp, null, retval);
    return retval;
  };

  function DynamicWorld_AddConvexHullShape$06 (points, optimized) {
    var iConvexHullShapeImp = $S06().CallVirtual($IM07(), null, this._dwi, points, optimized);
    var retval = new ($T14())();
    retval.ConvexHullShapeImp = iConvexHullShapeImp;
    $IM01().Call(iConvexHullShapeImp, null, retval);
    return retval;
  };

  function DynamicWorld_AddCylinderShape$07 (halfExtents) {
    var iCylinderShapeImp = $S07().CallVirtual($IM08(), null, this._dwi, halfExtents);
    var retval = new ($T17())();
    retval.CylinderShapeImp = iCylinderShapeImp;
    $IM01().Call(iCylinderShapeImp, null, retval);
    return retval;
  };

  function DynamicWorld_AddCylinderShape$08 (halfExtentsX, halfExtentsY, halfExtentsZ) {
    var iCylinderShapeImp = $S08().CallVirtual($IM08(), null, this._dwi, halfExtentsX, halfExtentsY, halfExtentsZ);
    var retval = new ($T17())();
    retval.CylinderShapeImp = iCylinderShapeImp;
    $IM01().Call(iCylinderShapeImp, null, retval);
    return retval;
  };

  function DynamicWorld_AddCylinderShape$09 (halfExtents) {
    var iCylinderShapeImp = $S09().CallVirtual($IM08(), null, this._dwi, halfExtents);
    var retval = new ($T17())();
    retval.CylinderShapeImp = iCylinderShapeImp;
    $IM01().Call(iCylinderShapeImp, null, retval);
    return retval;
  };

  function DynamicWorld_AddEmptyShape () {
    var iEmptyShapeImp = $IM09().Call(this._dwi, null);
    var retval = new ($T19())();
    retval.EmtyShapeImp = iEmptyShapeImp;
    $IM01().Call(iEmptyShapeImp, null, retval);
    return retval;
  };

  function DynamicWorld_AddGearConstraint (rigidBodyA, rigidBodyB, axisInA, axisInB, ratio) {
    var igci = $IM0A().Call(this._dwi, null, 
      rigidBodyA._iRigidBodyImp, 
      rigidBodyB._iRigidBodyImp, 
      axisInA, 
      axisInB, 
      ratio
    );
    var retval = new ($T1B())();
    retval._iGearConstraintImp = igci;
    $IM06().Call(igci, null, retval);
    return retval;
  };

  function DynamicWorld_AddGeneric6DofConstraint$0A (rigidBodyA, frameInA, useReferenceFrameA) {
    var ig6dofci = $S0A().CallVirtual($IM0B(), null, this._dwi, rigidBodyA._iRigidBodyImp, frameInA, useReferenceFrameA);
    var retval = new ($T1D())();
    retval._IG6DofConstraintImp = ig6dofci;
    $IM06().Call(ig6dofci, null, retval);
    return retval;
  };

  function DynamicWorld_AddGeneric6DofConstraint$0B (rigidBodyA, rigidBodyB, frameInA, frameInB, useReferenceFrameA) {
    var ig6dofci = $S0B().CallVirtual($IM0B(), null, this._dwi, 
      rigidBodyA._iRigidBodyImp, 
      rigidBodyB._iRigidBodyImp, 
      frameInA, 
      frameInB, 
      useReferenceFrameA
    );
    var retval = new ($T1D())();
    retval._IG6DofConstraintImp = ig6dofci;
    $IM06().Call(ig6dofci, null, retval);
    return retval;
  };

  function DynamicWorld_AddGImpactMeshShape (mesh) {
    var meshTrianglesArray = JSIL.Array.New($T20(), mesh.get_Triangles().length);

    for (var c = 0; c < mesh.get_Triangles().length; c = ((c + 1) | 0)) {
      meshTrianglesArray[c] = $S0C().CallStatic($T22(), "ToInt32", null, mesh.get_Triangles()[c]);
    }
    var meshVerteciesCount = mesh.get_Vertices().length;
    var meshVerteciesArray = JSIL.Array.New($T06(), meshVerteciesCount);
    meshVerteciesArray = mesh.get_Vertices();
    var iGImpactMeshShapeImp = $IM0C().Call(this._dwi, null, meshTrianglesArray, mesh.get_Vertices());
    var retval = new ($T24())();
    retval.GImpactMeshShapeImp = iGImpactMeshShapeImp;
    $IM01().Call(iGImpactMeshShapeImp, null, retval);
    return retval;
  };

  function DynamicWorld_AddHingeConstraint$0C (rigidBodyA, frameInA, useReferenceFrameA) {
    var ip2pci = $S0D().CallVirtual($IM0D(), null, this._dwi, rigidBodyA._iRigidBodyImp, frameInA, useReferenceFrameA);
    var retval = new ($T26())();
    retval._iHConstraintImp = ip2pci;
    $IM06().Call(ip2pci, null, retval);
    return retval;
  };

  function DynamicWorld_AddHingeConstraint$0D (rigidBodyA, pivotInA, axisInA, useReferenceFrameA) {
    var ip2pci = $S0E().CallVirtual($IM0D(), null, this._dwi, rigidBodyA._iRigidBodyImp, pivotInA, axisInA, useReferenceFrameA);
    var retval = new ($T26())();
    retval._iHConstraintImp = ip2pci;
    $IM06().Call(ip2pci, null, retval);
    return retval;
  };

  function DynamicWorld_AddHingeConstraint$0E (rigidBodyA, rigidBodyB, pivotInA, pivotInB, axisInA, axisInB, useReferenceFrameA) {
    var ip2pci = $S0F().CallVirtual($IM0D(), null, this._dwi, 
      rigidBodyA._iRigidBodyImp, 
      rigidBodyB._iRigidBodyImp, 
      pivotInA, 
      pivotInB, 
      axisInA, 
      axisInB, 
      useReferenceFrameA
    );
    var retval = new ($T26())();
    retval._iHConstraintImp = ip2pci;
    $IM06().Call(ip2pci, null, retval);
    return retval;
  };

  function DynamicWorld_AddHingeConstraint$0F (rigidBodyA, rigidBodyB, brAFrame, brBFrame, useReferenceFrameA) {
    var ip2pci = $S10().CallVirtual($IM0D(), null, this._dwi, 
      rigidBodyA._iRigidBodyImp, 
      rigidBodyB._iRigidBodyImp, 
      brAFrame, 
      brBFrame, 
      useReferenceFrameA
    );
    var retval = new ($T26())();
    retval._iHConstraintImp = ip2pci;
    $IM06().Call(ip2pci, null, retval);
    return retval;
  };

  function DynamicWorld_AddMultiSphereShape (positions, radi) {
    var iMultiSphereShapeImp = $IM0E().Call(this._dwi, null, positions, radi);
    var retval = new ($T29())();
    retval.MultiSphereShapeImp = iMultiSphereShapeImp;
    $IM01().Call(iMultiSphereShapeImp, null, retval);
    return retval;
  };

  function DynamicWorld_AddPoint2PointConstraint$10 (rigidBodyA, pivotInA) {
    var ip2pci = $S11().CallVirtual($IM0F(), null, this._dwi, rigidBodyA._iRigidBodyImp, pivotInA);
    var retval = new ($T2B())();
    retval._iP2PConstraintImp = ip2pci;
    $IM06().Call(ip2pci, null, retval);
    return retval;
  };

  function DynamicWorld_AddPoint2PointConstraint$11 (rigidBodyA, rigidBodyB, pivotInA, pivotInB) {
    var ip2pci = $S12().CallVirtual($IM0F(), null, this._dwi, rigidBodyA._iRigidBodyImp, rigidBodyB._iRigidBodyImp, pivotInA, pivotInB);
    var retval = new ($T2B())();
    retval._iP2PConstraintImp = ip2pci;
    $IM06().Call(ip2pci, null, retval);
    return retval;
  };

  function DynamicWorld_AddRigidBody (mass, position, orientation, colShape) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var shapeType = JSIL.GetType(colShape).toString();
          var text = shapeType;
          if (text !== null) {
            switch (text) {
              case "Fusee.Engine.BoxShape": 
                var box = $T04().$Cast(colShape);
                var rbi = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), box.BoxShapeImp);
                break $labelgroup0;

              case "Fusee.Engine.CapsuleShape": 
                var capsule = $T08().$Cast(colShape);
                rbi = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), capsule.CapsuleShapeImp);
                break $labelgroup0;

              case "Fusee.Engine.ConeShape": 
                var cone = $T0D().$Cast(colShape);
                rbi = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), cone.ConeShapeImp);
                break $labelgroup0;

              case "Fusee.Engine.CylinderShape": 
                var cylinder = $T17().$Cast(colShape);
                rbi = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), cylinder.CylinderShapeImp);
                break $labelgroup0;

              case "Fusee.Engine.MultiSphereShape": 
                var multiSphere = $T29().$Cast(colShape);
                rbi = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), multiSphere.MultiSphereShapeImp);
                break $labelgroup0;

              case "Fusee.Engine.SphereShape": 
                var sphere = $T30().$Cast(colShape);
                rbi = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), sphere.SphereShapeImp);
                break $labelgroup0;

              case "Fusee.Engine.CompoundShape": 
                var compShape = $T0B().$Cast(colShape);
                rbi = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), compShape.CompoundShapeImp);
                break $labelgroup0;

              case "Fusee.Engine.EmptyShape": 
                var empty = $T19().$Cast(colShape);
                rbi = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), empty.EmtyShapeImp);
                break $labelgroup0;

              case "Fusee.Engine.ConvexHullShape": 
                var convHullShape = $T14().$Cast(colShape);
                rbi = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), convHullShape.ConvexHullShapeImp);
                break $labelgroup0;

              case "Fusee.Engine.GImpactMeshShape": 
                var gImpMeshShape = $T24().$Cast(colShape);
                rbi = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), gImpMeshShape.GImpactMeshShapeImp);
                break $labelgroup0;

              case "Fusee.Engine.StaticPlaneShape": 
                var staticPaneShape = $T31().$Cast(colShape);
                rbi = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), staticPaneShape.StaticPlaneShapeImp);
                break $labelgroup0;

            }
          }
          var defaultShape = new ($T19())();
          $S13().CallStatic($T32(), "WriteLine", null, "default");
          rbi = $IM10().Call(this._dwi, null, mass, position.MemberwiseClone(), orientation.MemberwiseClone(), defaultShape.EmtyShapeImp);
          break $labelgroup0;

      }
    }
    /* Original label IL_2AE */ 
    var retval = new ($T0E())();
    retval._iRigidBodyImp = rbi;
    $IM11().Call(rbi, null, retval);
    return retval;
  };

  function DynamicWorld_AddSliderConstraint$12 (rigidBodyA, rigidBodyB, frameInA, frameInB, useLinearReferenceFrameA) {
    var isci = $S14().CallVirtual($IM12(), null, this._dwi, 
      rigidBodyA._iRigidBodyImp, 
      rigidBodyB._iRigidBodyImp, 
      frameInA, 
      frameInB, 
      useLinearReferenceFrameA
    );
    var retval = new ($T34())();
    retval._iSliderConstraintImp = isci;
    $IM06().Call(isci, null, retval);
    return retval;
  };

  function DynamicWorld_AddSliderConstraint$13 (rigidBodyA, frameInA, useLinearReferenceFrameA) {
    var isci = $S15().CallVirtual($IM12(), null, this._dwi, rigidBodyA._iRigidBodyImp, frameInA, useLinearReferenceFrameA);
    var retval = new ($T34())();
    retval._iSliderConstraintImp = isci;
    $IM06().Call(isci, null, retval);
    return retval;
  };

  function DynamicWorld_AddSphereShape (radius) {
    var iSphereShapeImp = $IM13().Call(this._dwi, null, radius);
    var retval = new ($T30())();
    retval.SphereShapeImp = iSphereShapeImp;
    $IM01().Call(iSphereShapeImp, null, retval);
    return retval;
  };

  function DynamicWorld_AddStaticPlaneShape (planeNormal, planeConstant) {
    var iStaticPlaneShapeImp = $IM14().Call(this._dwi, null, planeNormal, planeConstant);
    var retval = new ($T31())();
    retval.StaticPlaneShapeImp = iStaticPlaneShapeImp;
    $IM01().Call(iStaticPlaneShapeImp, null, retval);
    return retval;
  };

  function DynamicWorld_Dispose () {
    $IM15().Call(this._dwi, null);
  };

  function DynamicWorld_get_Gravity () {
    return $IM16().Call(this._dwi, null);
  };

  function DynamicWorld_GetRigidBody (i) {
    var rbi = $IM17().Call(this._dwi, null, i);
    return $T0E().$Cast($IM18().Call(rbi, null));
  };

  function DynamicWorld_NumberConstraints () {
    return $IM19().Call(this._dwi, null);
  };

  function DynamicWorld_NumberRigidBodies () {
    return $IM1A().Call(this._dwi, null);
  };

  function DynamicWorld_set_Gravity (value) {
    (this._dwi.Gravity = value);
  };

  function DynamicWorld_StepSimulation (timeSteps, maxSubSteps, fixedTimeSteps) {
    return $IM1B().Call(this._dwi, null, timeSteps, maxSubSteps, fixedTimeSteps);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.DynamicWorld", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      DynamicWorld__ctor
    );

    $.Method({Static:false, Public:true }, "AddBoxShape", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.BoxShape"), [$.Single], []), 
      DynamicWorld_AddBoxShape$00
    );

    $.Method({Static:false, Public:true }, "AddBoxShape", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.BoxShape"), [
          $.Single, $.Single, 
          $.Single
        ], []), 
      DynamicWorld_AddBoxShape$01
    );

    $.Method({Static:false, Public:true }, "AddBoxShape", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.BoxShape"), [$asm04.TypeRef("Fusee.Math.float3")], []), 
      DynamicWorld_AddBoxShape$02
    );

    $.Method({Static:false, Public:true }, "AddCapsuleShape", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.CapsuleShape"), [$.Single, $.Single], []), 
      DynamicWorld_AddCapsuleShape
    );

    $.Method({Static:false, Public:true }, "AddCompoundShape", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.CompoundShape"), [$.Boolean], []), 
      DynamicWorld_AddCompoundShape
    );

    $.Method({Static:false, Public:true }, "AddConeShape", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.ConeShape"), [$.Single, $.Single], []), 
      DynamicWorld_AddConeShape
    );

    $.Method({Static:false, Public:true }, "AddConeTwistConstraint", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.ConeTwistConstraint"), [$asm02.TypeRef("Fusee.Engine.RigidBody"), $asm04.TypeRef("Fusee.Math.float4x4")], []), 
      DynamicWorld_AddConeTwistConstraint$03
    );

    $.Method({Static:false, Public:true }, "AddConeTwistConstraint", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.ConeTwistConstraint"), [
          $asm02.TypeRef("Fusee.Engine.RigidBody"), $asm02.TypeRef("Fusee.Engine.RigidBody"), 
          $asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4")
        ], []), 
      DynamicWorld_AddConeTwistConstraint$04
    );

    $.Method({Static:false, Public:true }, "AddConvexHullShape", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.ConvexHullShape"), [], []), 
      DynamicWorld_AddConvexHullShape$05
    );

    $.Method({Static:false, Public:true }, "AddConvexHullShape", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.ConvexHullShape"), [$jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")]), $.Boolean], []), 
      DynamicWorld_AddConvexHullShape$06
    );

    $.Method({Static:false, Public:true }, "AddCylinderShape", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.CylinderShape"), [$.Single], []), 
      DynamicWorld_AddCylinderShape$07
    );

    $.Method({Static:false, Public:true }, "AddCylinderShape", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.CylinderShape"), [
          $.Single, $.Single, 
          $.Single
        ], []), 
      DynamicWorld_AddCylinderShape$08
    );

    $.Method({Static:false, Public:true }, "AddCylinderShape", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.CylinderShape"), [$asm04.TypeRef("Fusee.Math.float3")], []), 
      DynamicWorld_AddCylinderShape$09
    );

    $.Method({Static:false, Public:true }, "AddEmptyShape", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.EmptyShape"), [], []), 
      DynamicWorld_AddEmptyShape
    );

    $.Method({Static:false, Public:true }, "AddGearConstraint", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.GearConstraint"), [
          $asm02.TypeRef("Fusee.Engine.RigidBody"), $asm02.TypeRef("Fusee.Engine.RigidBody"), 
          $asm04.TypeRef("Fusee.Math.float3"), $asm04.TypeRef("Fusee.Math.float3"), 
          $.Single
        ], []), 
      DynamicWorld_AddGearConstraint
    );

    $.Method({Static:false, Public:true }, "AddGeneric6DofConstraint", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.Generic6DofConstraint"), [
          $asm02.TypeRef("Fusee.Engine.RigidBody"), $asm04.TypeRef("Fusee.Math.float4x4"), 
          $.Boolean
        ], []), 
      DynamicWorld_AddGeneric6DofConstraint$0A
    );

    $.Method({Static:false, Public:true }, "AddGeneric6DofConstraint", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.Generic6DofConstraint"), [
          $asm02.TypeRef("Fusee.Engine.RigidBody"), $asm02.TypeRef("Fusee.Engine.RigidBody"), 
          $asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4"), 
          $.Boolean
        ], []), 
      DynamicWorld_AddGeneric6DofConstraint$0B
    );

    $.Method({Static:false, Public:true }, "AddGImpactMeshShape", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.GImpactMeshShape"), [$asm02.TypeRef("Fusee.Engine.Mesh")], []), 
      DynamicWorld_AddGImpactMeshShape
    );

    $.Method({Static:false, Public:true }, "AddHingeConstraint", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.HingeConstraint"), [
          $asm02.TypeRef("Fusee.Engine.RigidBody"), $asm04.TypeRef("Fusee.Math.float4x4"), 
          $.Boolean
        ], []), 
      DynamicWorld_AddHingeConstraint$0C
    );

    $.Method({Static:false, Public:true }, "AddHingeConstraint", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.HingeConstraint"), [
          $asm02.TypeRef("Fusee.Engine.RigidBody"), $asm04.TypeRef("Fusee.Math.float3"), 
          $asm04.TypeRef("Fusee.Math.float3"), $.Boolean
        ], []), 
      DynamicWorld_AddHingeConstraint$0D
    );

    $.Method({Static:false, Public:true }, "AddHingeConstraint", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.HingeConstraint"), [
          $asm02.TypeRef("Fusee.Engine.RigidBody"), $asm02.TypeRef("Fusee.Engine.RigidBody"), 
          $asm04.TypeRef("Fusee.Math.float3"), $asm04.TypeRef("Fusee.Math.float3"), 
          $asm04.TypeRef("Fusee.Math.float3"), $asm04.TypeRef("Fusee.Math.float3"), 
          $.Boolean
        ], []), 
      DynamicWorld_AddHingeConstraint$0E
    );

    $.Method({Static:false, Public:true }, "AddHingeConstraint", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.HingeConstraint"), [
          $asm02.TypeRef("Fusee.Engine.RigidBody"), $asm02.TypeRef("Fusee.Engine.RigidBody"), 
          $asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4"), 
          $.Boolean
        ], []), 
      DynamicWorld_AddHingeConstraint$0F
    );

    $.Method({Static:false, Public:true }, "AddMultiSphereShape", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.MultiSphereShape"), [$jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")]), $jsilcore.TypeRef("System.Array", [$.Single])], []), 
      DynamicWorld_AddMultiSphereShape
    );

    $.Method({Static:false, Public:true }, "AddPoint2PointConstraint", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.Point2PointConstraint"), [$asm02.TypeRef("Fusee.Engine.RigidBody"), $asm04.TypeRef("Fusee.Math.float3")], []), 
      DynamicWorld_AddPoint2PointConstraint$10
    );

    $.Method({Static:false, Public:true }, "AddPoint2PointConstraint", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.Point2PointConstraint"), [
          $asm02.TypeRef("Fusee.Engine.RigidBody"), $asm02.TypeRef("Fusee.Engine.RigidBody"), 
          $asm04.TypeRef("Fusee.Math.float3"), $asm04.TypeRef("Fusee.Math.float3")
        ], []), 
      DynamicWorld_AddPoint2PointConstraint$11
    );

    $.Method({Static:false, Public:true }, "AddRigidBody", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.RigidBody"), [
          $.Single, $asm04.TypeRef("Fusee.Math.float3"), 
          $asm04.TypeRef("Fusee.Math.float3"), $asm02.TypeRef("Fusee.Engine.CollisionShape")
        ], []), 
      DynamicWorld_AddRigidBody
    );

    $.Method({Static:false, Public:true }, "AddSliderConstraint", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.SliderConstraint"), [
          $asm02.TypeRef("Fusee.Engine.RigidBody"), $asm02.TypeRef("Fusee.Engine.RigidBody"), 
          $asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4"), 
          $.Boolean
        ], []), 
      DynamicWorld_AddSliderConstraint$12
    );

    $.Method({Static:false, Public:true }, "AddSliderConstraint", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.SliderConstraint"), [
          $asm02.TypeRef("Fusee.Engine.RigidBody"), $asm04.TypeRef("Fusee.Math.float4x4"), 
          $.Boolean
        ], []), 
      DynamicWorld_AddSliderConstraint$13
    );

    $.Method({Static:false, Public:true }, "AddSphereShape", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.SphereShape"), [$.Single], []), 
      DynamicWorld_AddSphereShape
    );

    $.Method({Static:false, Public:true }, "AddStaticPlaneShape", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.StaticPlaneShape"), [$asm04.TypeRef("Fusee.Math.float3"), $.Single], []), 
      DynamicWorld_AddStaticPlaneShape
    );

    $.Method({Static:false, Public:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], []), 
      DynamicWorld_Dispose
    );

    $.Method({Static:false, Public:true }, "get_Gravity", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      DynamicWorld_get_Gravity
    );

    $.Method({Static:false, Public:true }, "GetRigidBody", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.RigidBody"), [$.Int32], []), 
      DynamicWorld_GetRigidBody
    );

    $.Method({Static:false, Public:true }, "NumberConstraints", 
      new JSIL.MethodSignature($.Int32, [], []), 
      DynamicWorld_NumberConstraints
    );

    $.Method({Static:false, Public:true }, "NumberRigidBodies", 
      new JSIL.MethodSignature($.Int32, [], []), 
      DynamicWorld_NumberRigidBodies
    );

    $.Method({Static:false, Public:true }, "set_Gravity", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      DynamicWorld_set_Gravity
    );

    $.Method({Static:false, Public:true }, "StepSimulation", 
      new JSIL.MethodSignature($.Int32, [
          $.Single, $.Int32, 
          $.Single
        ], []), 
      DynamicWorld_StepSimulation
    );

    $.Field({Static:false, Public:false}, "_dwi", $asm01.TypeRef("Fusee.Engine.IDynamicWorldImp")); 
    $.Property({Static:false, Public:true }, "Gravity", $asm04.TypeRef("Fusee.Math.float3"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.EmptyShape */ 

(function EmptyShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Fusee.Engine.CollisionShape)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.Fusee.Engine.BoxShape)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.set_Margin)) ();
  };

  function EmptyShape__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function EmptyShape_get_Margin () {
    return +$IM00().Call(this.EmtyShapeImp, null);
  };

  function EmptyShape_set_Margin (value) {
    var o = $T03().$Cast($IM01().Call(this.EmtyShapeImp, null));
    $IM02().Call(o.BoxShapeImp, null, value);
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Fusee.Engine.CollisionShape"), 
      Name: "Fusee.Engine.EmptyShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      EmptyShape__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Margin", 
      new JSIL.MethodSignature($.Single, [], []), 
      EmptyShape_get_Margin
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Margin", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      EmptyShape_set_Margin
    );

    $.Field({Static:false, Public:false}, "EmtyShapeImp", $asm01.TypeRef("Fusee.Engine.IEmptyShapeImp")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Margin", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.GearConstraint */ 

(function GearConstraint$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.Fusee.Engine.RigidBody)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_UserObject)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.get_RigidBodyA)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.get_RigidBodyB)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.GetUid)) ();
  };

  function GearConstraint__ctor () {
  };

  function GearConstraint_get_RigidBodyA () {
    var retval = $IM00().Call($IM01().Call(this._iGearConstraintImp, null), null);
    return $T03().$Cast(retval);
  };

  function GearConstraint_get_RigidBodyB () {
    var retval = $IM00().Call($IM02().Call(this._iGearConstraintImp, null), null);
    return $T03().$Cast(retval);
  };

  function GearConstraint_GetUid () {
    return $IM03().Call(this._iGearConstraintImp, null);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.GearConstraint", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      GearConstraint__ctor
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyA", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.RigidBody"), [], []), 
      GearConstraint_get_RigidBodyA
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyB", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.RigidBody"), [], []), 
      GearConstraint_get_RigidBodyB
    );

    $.Method({Static:false, Public:true }, "GetUid", 
      new JSIL.MethodSignature($.Int32, [], []), 
      GearConstraint_GetUid
    );

    $.Field({Static:false, Public:false}, "_iGearConstraintImp", $asm01.TypeRef("Fusee.Engine.IGearConstraintImp")); 
    $.Property({Static:false, Public:true }, "RigidBodyA", $asm02.TypeRef("Fusee.Engine.RigidBody"));

    $.Property({Static:false, Public:true }, "RigidBodyB", $asm02.TypeRef("Fusee.Engine.RigidBody"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Generic6DofConstraint */ 

(function Generic6DofConstraint$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Math.float4x4)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Fusee.Engine.RigidBody)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Fusee.Math.float3)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4")], []))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp.CalcAnchorPos)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp.CalculateTransforms)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp.get_AngularLowerLimit)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp.get_AngularUpperLimit)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp.get_CalculatedTransformA)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp.get_CalculatedTransformB)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp.get_FrameOffsetA)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp.get_FrameOffsetB)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp.get_LinearLowerLimit)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp.get_LinearUpperLimit)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_UserObject)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.get_RigidBodyA)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.get_RigidBodyB)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp.get_UseFrameOffset)) ();
  };
  var $IM0E = function () {
    return ($IM0E = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp.GetAngle)) ();
  };
  var $IM0F = function () {
    return ($IM0F = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp.GetAxis)) ();
  };
  var $IM10 = function () {
    return ($IM10 = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp.GetRelativePivotPosition)) ();
  };
  var $IM11 = function () {
    return ($IM11 = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.GetUid)) ();
  };
  var $IM12 = function () {
    return ($IM12 = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp.IsLimited)) ();
  };
  var $IM13 = function () {
    return ($IM13 = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.get_UserObject)) ();
  };
  var $IM14 = function () {
    return ($IM14 = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp.set_UseFrameOffset)) ();
  };
  var $IM15 = function () {
    return ($IM15 = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp.SetAxis)) ();
  };
  var $IM16 = function () {
    return ($IM16 = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp.SetFrames)) ();
  };
  var $IM17 = function () {
    return ($IM17 = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp.SetLimit)) ();
  };
  var $IM18 = function () {
    return ($IM18 = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp.TestAngularLimitMotor)) ();
  };
  var $IM19 = function () {
    return ($IM19 = JSIL.Memoize($asm01.Fusee.Engine.IGeneric6DofConstraintImp.UpdateRhs)) ();
  };

  function Generic6DofConstraint__ctor () {
  };

  function Generic6DofConstraint_CalcAnchorPos () {
    $IM00().Call(this._IG6DofConstraintImp, null);
  };

  function Generic6DofConstraint_CalculateTransforms$00 () {
    $S00().CallVirtual($IM01(), null, this._IG6DofConstraintImp);
  };

  function Generic6DofConstraint_CalculateTransforms$01 (transA, transB) {
    $S01().CallVirtual($IM01(), null, this._IG6DofConstraintImp, transA, transB);
  };

  function Generic6DofConstraint_get_AngularLowerLimit () {
    return $IM02().Call(this._IG6DofConstraintImp, null);
  };

  function Generic6DofConstraint_get_AngularUpperLimit () {
    return $IM03().Call(this._IG6DofConstraintImp, null);
  };

  function Generic6DofConstraint_get_CalculatedTransformA () {
    return $IM04().Call(this._IG6DofConstraintImp, null);
  };

  function Generic6DofConstraint_get_CalculatedTransformB () {
    return $IM05().Call(this._IG6DofConstraintImp, null);
  };

  function Generic6DofConstraint_get_FrameOffsetA () {
    return $IM06().Call(this._IG6DofConstraintImp, null);
  };

  function Generic6DofConstraint_get_FrameOffsetB () {
    return $IM07().Call(this._IG6DofConstraintImp, null);
  };

  function Generic6DofConstraint_get_LinearLowerLimit () {
    return $IM08().Call(this._IG6DofConstraintImp, null);
  };

  function Generic6DofConstraint_get_LinearUpperLimit () {
    return $IM09().Call(this._IG6DofConstraintImp, null);
  };

  function Generic6DofConstraint_get_RigidBodyA () {
    var retval = $IM0A().Call($IM0B().Call(this._IG6DofConstraintImp, null), null);
    return $T05().$Cast(retval);
  };

  function Generic6DofConstraint_get_RigidBodyB () {
    var retval = $IM0A().Call($IM0C().Call(this._IG6DofConstraintImp, null), null);
    return $T05().$Cast(retval);
  };

  function Generic6DofConstraint_get_UseFrameOffset () {
    return $IM0D().Call(this._IG6DofConstraintImp, null);
  };

  function Generic6DofConstraint_GetAngle (axisIndex) {
    return +$IM0E().Call(this._IG6DofConstraintImp, null, axisIndex);
  };

  function Generic6DofConstraint_GetAxis (axisIndex) {
    return $IM0F().Call(this._IG6DofConstraintImp, null, axisIndex);
  };

  function Generic6DofConstraint_GetRelativePivotPosition (axisIndex) {
    return +$IM10().Call(this._IG6DofConstraintImp, null, axisIndex);
  };

  function Generic6DofConstraint_GetUid () {
    return $IM11().Call(this._IG6DofConstraintImp, null);
  };

  function Generic6DofConstraint_IsLimited (limitIndex) {
    return $IM12().Call(this._IG6DofConstraintImp, null, limitIndex);
  };

  function Generic6DofConstraint_set_AngularLowerLimit (value) {
    var o = $thisType.$Cast($IM13().Call(this._IG6DofConstraintImp, null));
    (o._IG6DofConstraintImp.AngularLowerLimit = value);
  };

  function Generic6DofConstraint_set_AngularUpperLimit (value) {
    var o = $thisType.$Cast($IM13().Call(this._IG6DofConstraintImp, null));
    (o._IG6DofConstraintImp.AngularUpperLimit = value);
  };

  function Generic6DofConstraint_set_FrameOffsetA (value) {
    var o = $thisType.$Cast($IM13().Call(this._IG6DofConstraintImp, null));
    (o._IG6DofConstraintImp.FrameOffsetA = value);
  };

  function Generic6DofConstraint_set_FrameOffsetB (value) {
    var o = $thisType.$Cast($IM13().Call(this._IG6DofConstraintImp, null));
    (o._IG6DofConstraintImp.FrameOffsetB = value);
  };

  function Generic6DofConstraint_set_LinearLowerLimit (value) {
    var o = $thisType.$Cast($IM13().Call(this._IG6DofConstraintImp, null));
    (o._IG6DofConstraintImp.LinearLowerLimit = value);
  };

  function Generic6DofConstraint_set_LinearUpperLimit (value) {
    var o = $thisType.$Cast($IM13().Call(this._IG6DofConstraintImp, null));
    (o._IG6DofConstraintImp.LinearUpperLimit = value);
  };

  function Generic6DofConstraint_set_UseFrameOffset (value) {
    var o = $thisType.$Cast($IM13().Call(this._IG6DofConstraintImp, null));
    $IM14().Call(o._IG6DofConstraintImp, null, value);
  };

  function Generic6DofConstraint_SetAxis (axis1, axis2) {
    $IM15().Call(this._IG6DofConstraintImp, null, axis1, axis2);
  };

  function Generic6DofConstraint_SetFrames (frameA, frameB) {
    $IM16().Call(this._IG6DofConstraintImp, null, frameA, frameB);
  };

  function Generic6DofConstraint_SetLimit (axis, lo, hi) {
    $IM17().Call(this._IG6DofConstraintImp, null, axis, lo, hi);
  };

  function Generic6DofConstraint_TestAngularLimitMotor (axisIndex) {
    return $IM18().Call(this._IG6DofConstraintImp, null, axisIndex);
  };

  function Generic6DofConstraint_UpdateRhs (timeStep) {
    $IM19().Call(this._IG6DofConstraintImp, null, timeStep);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Generic6DofConstraint", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      Generic6DofConstraint__ctor
    );

    $.Method({Static:false, Public:true }, "CalcAnchorPos", 
      new JSIL.MethodSignature(null, [], []), 
      Generic6DofConstraint_CalcAnchorPos
    );

    $.Method({Static:false, Public:true }, "CalculateTransforms", 
      new JSIL.MethodSignature(null, [], []), 
      Generic6DofConstraint_CalculateTransforms$00
    );

    $.Method({Static:false, Public:true }, "CalculateTransforms", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4")], []), 
      Generic6DofConstraint_CalculateTransforms$01
    );

    $.Method({Static:false, Public:true }, "get_AngularLowerLimit", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      Generic6DofConstraint_get_AngularLowerLimit
    );

    $.Method({Static:false, Public:true }, "get_AngularUpperLimit", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      Generic6DofConstraint_get_AngularUpperLimit
    );

    $.Method({Static:false, Public:true }, "get_CalculatedTransformA", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      Generic6DofConstraint_get_CalculatedTransformA
    );

    $.Method({Static:false, Public:true }, "get_CalculatedTransformB", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      Generic6DofConstraint_get_CalculatedTransformB
    );

    $.Method({Static:false, Public:true }, "get_FrameOffsetA", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      Generic6DofConstraint_get_FrameOffsetA
    );

    $.Method({Static:false, Public:true }, "get_FrameOffsetB", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      Generic6DofConstraint_get_FrameOffsetB
    );

    $.Method({Static:false, Public:true }, "get_LinearLowerLimit", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      Generic6DofConstraint_get_LinearLowerLimit
    );

    $.Method({Static:false, Public:true }, "get_LinearUpperLimit", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      Generic6DofConstraint_get_LinearUpperLimit
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyA", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.RigidBody"), [], []), 
      Generic6DofConstraint_get_RigidBodyA
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyB", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.RigidBody"), [], []), 
      Generic6DofConstraint_get_RigidBodyB
    );

    $.Method({Static:false, Public:true }, "get_UseFrameOffset", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      Generic6DofConstraint_get_UseFrameOffset
    );

    $.Method({Static:false, Public:true }, "GetAngle", 
      new JSIL.MethodSignature($.Single, [$.Int32], []), 
      Generic6DofConstraint_GetAngle
    );

    $.Method({Static:false, Public:true }, "GetAxis", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [$.Int32], []), 
      Generic6DofConstraint_GetAxis
    );

    $.Method({Static:false, Public:true }, "GetRelativePivotPosition", 
      new JSIL.MethodSignature($.Single, [$.Int32], []), 
      Generic6DofConstraint_GetRelativePivotPosition
    );

    $.Method({Static:false, Public:true }, "GetUid", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Generic6DofConstraint_GetUid
    );

    $.Method({Static:false, Public:true }, "IsLimited", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], []), 
      Generic6DofConstraint_IsLimited
    );

    $.Method({Static:false, Public:true }, "set_AngularLowerLimit", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      Generic6DofConstraint_set_AngularLowerLimit
    );

    $.Method({Static:false, Public:true }, "set_AngularUpperLimit", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      Generic6DofConstraint_set_AngularUpperLimit
    );

    $.Method({Static:false, Public:true }, "set_FrameOffsetA", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4")], []), 
      Generic6DofConstraint_set_FrameOffsetA
    );

    $.Method({Static:false, Public:true }, "set_FrameOffsetB", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4")], []), 
      Generic6DofConstraint_set_FrameOffsetB
    );

    $.Method({Static:false, Public:true }, "set_LinearLowerLimit", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      Generic6DofConstraint_set_LinearLowerLimit
    );

    $.Method({Static:false, Public:true }, "set_LinearUpperLimit", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      Generic6DofConstraint_set_LinearUpperLimit
    );

    $.Method({Static:false, Public:true }, "set_UseFrameOffset", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      Generic6DofConstraint_set_UseFrameOffset
    );

    $.Method({Static:false, Public:true }, "SetAxis", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3"), $asm04.TypeRef("Fusee.Math.float3")], []), 
      Generic6DofConstraint_SetAxis
    );

    $.Method({Static:false, Public:true }, "SetFrames", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4")], []), 
      Generic6DofConstraint_SetFrames
    );

    $.Method({Static:false, Public:true }, "SetLimit", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Single, 
          $.Single
        ], []), 
      Generic6DofConstraint_SetLimit
    );

    $.Method({Static:false, Public:true }, "TestAngularLimitMotor", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], []), 
      Generic6DofConstraint_TestAngularLimitMotor
    );

    $.Method({Static:false, Public:true }, "UpdateRhs", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      Generic6DofConstraint_UpdateRhs
    );

    $.Field({Static:false, Public:false}, "_IG6DofConstraintImp", $asm01.TypeRef("Fusee.Engine.IGeneric6DofConstraintImp")); 
    $.Property({Static:false, Public:true }, "AngularLowerLimit", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "AngularUpperLimit", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "CalculatedTransformA", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "CalculatedTransformB", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "FrameOffsetA", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "FrameOffsetB", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "LinearLowerLimit", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "LinearUpperLimit", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "UseFrameOffset", $.Boolean);

    $.Property({Static:false, Public:true }, "RigidBodyA", $asm02.TypeRef("Fusee.Engine.RigidBody"));

    $.Property({Static:false, Public:true }, "RigidBodyB", $asm02.TypeRef("Fusee.Engine.RigidBody"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Face */ 

(function Face$Members () {
  var $, $thisType;
  function Face__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Face", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      Face__ctor
    );

    $.Field({Static:false, Public:true }, "InxVert", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:true }, "InxNormal", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    $.Field({Static:false, Public:true }, "InxTexCoord", $jsilcore.TypeRef("System.Array", [$.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Geometry */ 

(function Geometry$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Collections.Generic.List$b1.Of($asm04.Fusee.Math.double3))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm07.System.Int32))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.Fusee.Engine.Face)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.ArgumentException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Void)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Collections.Generic.List$b1.Of($asm04.Fusee.Math.double2))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Collections.Generic.List$b1.Of($asm02.Fusee.Engine.Face))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.Fusee.Math.double3)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Fusee.Math.double2)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.FormatException)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.Double)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.System.Collections.Generic.IList$b1.Of($asm07.System.Int32))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerator$b1.Of($asm07.System.Int32))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerable$b1.Of($asm07.System.Int32))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.Collections.IEnumerator)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm07.System.Collections.Generic.ICollection$b1.Of($asm07.System.Int32))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm07.System.Collections.Generic.List$b1.Of($asm07.System.Int32))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm07.System.Collections.Generic.IList$b1.Of($asm02.Fusee.Engine.Face))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm07.System.Collections.Generic.IList$b1.Of($asm04.Fusee.Math.double3))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm07.System.Collections.Generic.IList$b1.Of($asm04.Fusee.Math.double2))) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm07.System.Collections.Generic.Dictionary$b2.Of($asm02.Fusee.Engine.Geometry_TripleInx, $asm07.System.Int32))) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm07.System.Collections.Generic.List$b1.Of($asm07.System.UInt16))) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm07.System.Collections.Generic.List$b1.Of($asm04.Fusee.Math.float3))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm07.System.Collections.Generic.List$b1.Of($asm04.Fusee.Math.float2))) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm02.Fusee.Engine.Geometry_TripleInx)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm04.Fusee.Math.float3)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm04.Fusee.Math.float2)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm02.Fusee.Engine.Mesh)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerable$b1.Of($asm07.System.UInt16))) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize(System.Array.Of($asm07.System.UInt16))) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm07.System.UInt16)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm04.TypeRef("Fusee.Math.double3")]), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentNullException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentException"), [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("Fusee.Engine.Face")]), []))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.Face")], []))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.double3")], []))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm04.TypeRef("Fusee.Math.double2")]), []))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.double2")], []))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.FormatException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Int32")]), []))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Int32")], []))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("Fusee.Engine.Face")]), [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("Fusee.Engine.Face")])]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm04.TypeRef("Fusee.Math.double3")]), [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("Fusee.Math.double3")])]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm04.TypeRef("Fusee.Math.double2")]), [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm04.TypeRef("Fusee.Math.double2")])]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm02.TypeRef("Fusee.Engine.Geometry/TripleInx"), $asm07.TypeRef("System.Int32")]), []))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.UInt16")]), []))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm04.TypeRef("Fusee.Math.float3")]), []))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm04.TypeRef("Fusee.Math.float2")]), []))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Math.float3"), [
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single"), 
        $asm07.TypeRef("System.Single")
      ]))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float2")], []))) ();
  };
  var $S15 = function () {
    return ($S15 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Math.float2"), [$asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerable$b1.Of($asm07.System.Int32).GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm07.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerator$b1.Of($asm07.System.Int32).get_Current)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm07.System.Collections.Generic.ICollection$b1.Of($asm07.System.Int32).get_Count)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm07.System.Collections.Generic.IList$b1.Of($asm07.System.Int32).get_Item)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm07.System.Collections.Generic.ICollection$b1.Of($asm07.System.Int32).Add)) ();
  };

  function Geometry__ctor () {
    this._vertices = $S00().Construct();
  };

  function Geometry_AddFace (vertInx, texCoordInx, normalInx) {
    var f = new ($T02())();
    if (vertInx === null) {
      throw $S01().Construct("vertInx");
    }
    f.InxVert = JSIL.Array.New($T04(), vertInx.length);

    for (var i = 0; i < vertInx.length; i = ((i + 1) | 0)) {
      var vInx = vertInx[i];
      if (!((0 <= vInx) && (vInx < this._vertices.get_Count()))) {
        throw $S02().Construct(JSIL.ConcatString("Vertex index out of range: ", vInx), JSIL.ConcatString("vertInx[", i, "]"));
      }
      f.InxVert[i] = vInx;
    }
    if (texCoordInx !== null) {
      if (texCoordInx.length !== vertInx.length) {
        throw $S02().Construct("Number of texture coordinate indices must match number of vertex indices", "texCoordInx");
      }
      f.InxTexCoord = JSIL.Array.New($T04(), texCoordInx.length);

      for (i = 0; i < texCoordInx.length; i = ((i + 1) | 0)) {
        var tInx = texCoordInx[i];
        if (!((0 <= tInx) && (tInx < this._texCoords.get_Count()))) {
          throw $S02().Construct(JSIL.ConcatString("Texture coordinate index out of range: ", tInx), JSIL.ConcatString("texCoordInx[", i, "]"));
        }
        f.InxTexCoord[i] = tInx;
      }
    }
    if (normalInx !== null) {
      if (normalInx.length !== vertInx.length) {
        throw $S02().Construct("Number of normal indices must match number of vertex indices", "normalInx");
      }
      f.InxNormal = JSIL.Array.New($T04(), normalInx.length);

      for (i = 0; i < normalInx.length; i = ((i + 1) | 0)) {
        var nInx = normalInx[i];
        if (!((0 <= nInx) && (nInx < this._normals.get_Count()))) {
          throw $S02().Construct(JSIL.ConcatString("Normal index out of range: ", nInx), JSIL.ConcatString("normalInx[", i, "]"));
        }
        f.InxNormal[i] = nInx;
      }
    }
    if (this._faces === null) {
      this._faces = $S03().Construct();
    }
    $S04().CallVirtual("Add", null, this._faces, f);
    return ((this._faces.get_Count() - 1) | 0);
  };

  function Geometry_AddNormal (normal) {
    if (this._normals === null) {
      this._normals = $S00().Construct();
    }
    $S05().CallVirtual("Add", null, this._normals, normal);
    return ((this._normals.get_Count() - 1) | 0);
  };

  function Geometry_AddTexCoord (uv) {
    if (this._texCoords === null) {
      this._texCoords = $S06().Construct();
    }
    $S07().CallVirtual("Add", null, this._texCoords, uv);
    return ((this._texCoords.get_Count() - 1) | 0);
  };

  function Geometry_AddVertex (v) {
    $S05().CallVirtual("Add", null, this._vertices, v);
    return ((this._vertices.get_Count() - 1) | 0);
  };

  function Geometry_CalcFaceNormal (f) {
    if (f.InxVert.length < 3) {
      throw $S08().Construct(JSIL.ConcatString("Cannot calculate normal of degenerate face with only ", f.InxVert.length, " vertices."));
    }
    var vertex0 = f.InxVert[0];
    var v = $T0A().op_Subtraction(
      this._vertices.get_Item(vertex0).MemberwiseClone(), 
      this._vertices.get_Item(f.InxVert[2]).MemberwiseClone()
    ).MemberwiseClone();
    var v2 = $T0A().op_Subtraction(
      this._vertices.get_Item(vertex0).MemberwiseClone(), 
      this._vertices.get_Item(f.InxVert[1]).MemberwiseClone()
    ).MemberwiseClone();
    return $T0A().Normalize($T0A().Cross(v.MemberwiseClone(), v2.MemberwiseClone()).MemberwiseClone());
  };

  function Geometry_CreateNormals (smoothingAngle) {
    var $temp00;
    var vertInFace = new JSIL.BoxedVariable(null);
    var cSmoothingAngle = +(Math.cos(smoothingAngle));
    this._normals = $S00().Construct();

    for (var iV = 0; iV < this._vertices.get_Count(); iV = ((iV + 1) | 0)) {
      var facesWithIV = this.GetAllFacesContainingVertex(iV, /* ref */ vertInFace);
      var normals = $S00().Construct();
      var enumerator = $IM00().Call(facesWithIV, null);
      try {

        while ($IM01().Call(enumerator, null)) {
          var i = $IM02().Call(enumerator, null);
          $S05().CallVirtual("Add", null, normals, this.CalcFaceNormal(this._faces.get_Item(i)).MemberwiseClone());
        }
      } finally {
        if (enumerator !== null) {
          $IM03().Call(enumerator, null);
        }
      }
      var smoothit = true;

    $loop2: 
      for (i = 0; i < normals.get_Count(); i = ((i + 1) | 0)) {

      $loop3: 
        for (var j = ((i + 1) | 0); j < normals.get_Count(); j = ((j + 1) | 0)) {
          if ($T0A().Dot(
              normals.get_Item(i), 
              normals.get_Item(j)
            ) < cSmoothingAngle) {
            smoothit = false;
            break $loop3;
          }
        }
        if (!smoothit) {
          break $loop2;
        }
      }
      if (smoothit) {
        var daNormal = (new ($T0A())()).__Initialize__({
            x: 0, 
            y: 0, 
            z: 0}
        );

        for (var a$0 = normals._items, i$0 = 0, l$0 = normals._size; i$0 < l$0; ($temp00 = i$0, 
            i$0 = ((i$0 + 1) | 0), 
            $temp00)) {
          var k = a$0[i$0].MemberwiseClone();
          daNormal = $T0A().op_Addition(daNormal.MemberwiseClone(), k.MemberwiseClone()).MemberwiseClone();
        }
        daNormal = $T0A().op_Division(daNormal.MemberwiseClone(), normals.get_Count()).MemberwiseClone();
        var iN = this.AddNormal(daNormal.MemberwiseClone());

        for (i = 0; i < $IM04().Call(facesWithIV, null); i = ((i + 1) | 0)) {
          if (this._faces.get_Item($IM05().Call(facesWithIV, null, i)).InxNormal === null) {
            this._faces.get_Item($IM05().Call(facesWithIV, null, i)).InxNormal = JSIL.Array.New($T04(), this._faces.get_Item($IM05().Call(facesWithIV, null, i)).InxVert.length);
          }
          this._faces.get_Item($IM05().Call(facesWithIV, null, i)).InxNormal[$IM05().Call(vertInFace.get(), null, i)] = iN;
        }
      } else {

        for (i = 0; i < normals.get_Count(); i = ((i + 1) | 0)) {
          iN = this.AddNormal(normals.get_Item(i).MemberwiseClone());
          if (this._faces.get_Item($IM05().Call(facesWithIV, null, i)).InxNormal === null) {
            this._faces.get_Item($IM05().Call(facesWithIV, null, i)).InxNormal = JSIL.Array.New($T04(), this._faces.get_Item($IM05().Call(facesWithIV, null, i)).InxVert.length);
          }
          this._faces.get_Item($IM05().Call(facesWithIV, null, i)).InxNormal[$IM05().Call(vertInFace.get(), null, i)] = iN;
        }
      }
    }
  };

  function Geometry_get_Faces () {
    return this._faces;
  };

  function Geometry_get_HasNormals () {
    return (this._normals !== null);
  };

  function Geometry_get_HasTexCoords () {
    return (this._texCoords !== null);
  };

  function Geometry_get_Normals () {
    return this._normals;
  };

  function Geometry_get_TexCoords () {
    return this._texCoords;
  };

  function Geometry_get_Vertices () {
    return this._vertices;
  };

  function Geometry_GetAllFacesContainingVertex (iV, /* ref */ vertInFace) {
    var ret = $S09().Construct();
    vertInFace.set($S09().Construct());

    for (var iF = 0; iF < this._faces.get_Count(); iF = ((iF + 1) | 0)) {
      var inxVert = this._faces.get_Item(iF).InxVert;

    $loop1: 
      for (var iFV = 0; iFV < inxVert.length; iFV = ((iFV + 1) | 0)) {
        if (iV === inxVert[iFV]) {
          $S0A().CallVirtual("Add", null, ret, iF);
          $IM06().Call(vertInFace.get(), null, iFV);
          break $loop1;
        }
      }
    }
    return ret;
  };

  function Geometry_set_Faces (value) {
    this._faces = $S0B().Construct(value);
  };

  function Geometry_set_Normals (value) {
    this._normals = $S0C().Construct(value);
  };

  function Geometry_set_TexCoords (value) {
    this._texCoords = $S0D().Construct(value);
  };

  function Geometry_set_Vertices (value) {
    this._vertices = $S0C().Construct(value);
  };

  function Geometry_ToMesh () {
    var $temp00;
    var inx = new JSIL.BoxedVariable(0);
    var _vDict = $S0E().Construct();
    var mTris = $S0F().Construct();
    var mVerts = $S10().Construct();
    var mTexCoords = (this.get_HasTexCoords() ? $S11().Construct() : null);
    var mNormals = (this.get_HasNormals() ? $S10().Construct() : null);

    for (var a$0 = this._faces._items, i$0 = 0, l$0 = this._faces._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var f = a$0[i$0];
      var mFace = JSIL.Array.New($T04(), f.InxVert.length);

      for (var i = 0; i < f.InxVert.length; i = ((i + 1) | 0)) {
        var ti = (new ($T1D())()).__Initialize__({
            iV: f.InxVert[i], 
            iT: (this.get_HasTexCoords() ? f.InxTexCoord[i] : 0), 
            iN: (this.get_HasNormals() ? f.InxNormal[i] : 0)}
        );
        if (!_vDict.TryGetValue(ti.MemberwiseClone(), /* ref */ inx)) {
          var vInx = f.InxVert[i];
          $S12().CallVirtual("Add", null, mVerts, $S13().Construct($T1F().$Cast(this._vertices.get_Item(vInx).x), $T1F().$Cast(this._vertices.get_Item(vInx).y), $T1F().$Cast(this._vertices.get_Item(vInx).z)));
          if (this.get_HasTexCoords()) {
            var tInx = f.InxTexCoord[i];
            $S14().CallVirtual("Add", null, mTexCoords, $S15().Construct($T1F().$Cast(this._texCoords.get_Item(tInx).x), $T1F().$Cast(this._texCoords.get_Item(tInx).y)));
          }
          if (this.get_HasNormals()) {
            var nInx = f.InxNormal[i];
            $S12().CallVirtual("Add", null, mNormals, $S13().Construct($T1F().$Cast(this._normals.get_Item(nInx).x), $T1F().$Cast(this._normals.get_Item(nInx).y), $T1F().$Cast(this._normals.get_Item(nInx).z)));
          }
          inx.set(((mVerts.get_Count() - 1) | 0));
          _vDict.Add(ti.MemberwiseClone(), inx.get());
        }
        mFace[i] = inx.get();
      }
      $T1A().prototype.AddRange.call(mTris, this.Triangulate(f, mFace));
    }
    var j = new ($T21())();
    j.set_Vertices($T1B().prototype.ToArray.call(mVerts));
    if (this.get_HasNormals()) {
      j.set_Normals($T1B().prototype.ToArray.call(mNormals));
    }
    if (this.get_HasTexCoords()) {
      j.set_UVs($T1C().prototype.ToArray.call(mTexCoords));
    }
    j.set_Triangles($T1A().prototype.ToArray.call(mTris));
    return j;
  };

  function Geometry_Triangulate (f, indices) {
    if (f.InxVert.length < 3) {
      var result = null;
    } else {
      if (indices === null) {
        indices = f.InxVert;
      }
      var ret = JSIL.Array.New($T24(), ((3 * ((f.InxVert.length - 2) | 0)) | 0));

      for (var i = 2; i < f.InxVert.length; i = ((i + 1) | 0)) {
        ret[((((i - 2) | 0) * 3) | 0)] = $T24().$Cast(indices[0]);
        ret[((((((i - 2) | 0) * 3) | 0) + 1) | 0)] = $T24().$Cast(indices[((i - 1) | 0)]);
        ret[((((((i - 2) | 0) * 3) | 0) + 2) | 0)] = $T24().$Cast(indices[i]);
      }
      result = $T22().$Cast(ret);
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Geometry", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      Geometry__ctor
    );

    $.Method({Static:false, Public:true }, "AddFace", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ], []), 
      Geometry_AddFace
    );

    $.Method({Static:false, Public:true }, "AddNormal", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("Fusee.Math.double3")], []), 
      Geometry_AddNormal
    );

    $.Method({Static:false, Public:true }, "AddTexCoord", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("Fusee.Math.double2")], []), 
      Geometry_AddTexCoord
    );

    $.Method({Static:false, Public:true }, "AddVertex", 
      new JSIL.MethodSignature($.Int32, [$asm04.TypeRef("Fusee.Math.double3")], []), 
      Geometry_AddVertex
    );

    $.Method({Static:false, Public:true }, "CalcFaceNormal", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.double3"), [$asm02.TypeRef("Fusee.Engine.Face")], []), 
      Geometry_CalcFaceNormal
    );

    $.Method({Static:false, Public:true }, "CreateNormals", 
      new JSIL.MethodSignature(null, [$.Double], []), 
      Geometry_CreateNormals
    );

    $.Method({Static:false, Public:true }, "get_Faces", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm02.TypeRef("Fusee.Engine.Face")]), [], []), 
      Geometry_get_Faces
    );

    $.Method({Static:false, Public:true }, "get_HasNormals", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      Geometry_get_HasNormals
    );

    $.Method({Static:false, Public:true }, "get_HasTexCoords", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      Geometry_get_HasTexCoords
    );

    $.Method({Static:false, Public:true }, "get_Normals", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("Fusee.Math.double3")]), [], []), 
      Geometry_get_Normals
    );

    $.Method({Static:false, Public:true }, "get_TexCoords", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("Fusee.Math.double2")]), [], []), 
      Geometry_get_TexCoords
    );

    $.Method({Static:false, Public:true }, "get_Vertices", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("Fusee.Math.double3")]), [], []), 
      Geometry_get_Vertices
    );

    $.Method({Static:false, Public:true }, "GetAllFacesContainingVertex", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IList`1", [$.Int32]), [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Collections.Generic.IList`1", [$.Int32])])], []), 
      Geometry_GetAllFacesContainingVertex
    );

    $.Method({Static:false, Public:true }, "set_Faces", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IList`1", [$asm02.TypeRef("Fusee.Engine.Face")])], []), 
      Geometry_set_Faces
    );

    $.Method({Static:false, Public:true }, "set_Normals", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("Fusee.Math.double3")])], []), 
      Geometry_set_Normals
    );

    $.Method({Static:false, Public:true }, "set_TexCoords", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("Fusee.Math.double2")])], []), 
      Geometry_set_TexCoords
    );

    $.Method({Static:false, Public:true }, "set_Vertices", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("Fusee.Math.double3")])], []), 
      Geometry_set_Vertices
    );

    $.Method({Static:false, Public:true }, "ToMesh", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.Mesh"), [], []), 
      Geometry_ToMesh
    );

    $.Method({Static:false, Public:false}, "Triangulate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.UInt16]), [$asm02.TypeRef("Fusee.Engine.Face"), $jsilcore.TypeRef("System.Array", [$.Int32])], []), 
      Geometry_Triangulate
    );

    $.Field({Static:false, Public:false}, "_vertices", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm04.TypeRef("Fusee.Math.double3")])); 
    $.Field({Static:false, Public:false}, "_normals", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm04.TypeRef("Fusee.Math.double3")])); 
    $.Field({Static:false, Public:false}, "_texCoords", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm04.TypeRef("Fusee.Math.double2")])); 
    $.Field({Static:false, Public:false}, "_faces", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("Fusee.Engine.Face")])); 
    $.Property({Static:false, Public:true }, "Vertices", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("Fusee.Math.double3")]));

    $.Property({Static:false, Public:true }, "Normals", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("Fusee.Math.double3")]));

    $.Property({Static:false, Public:true }, "TexCoords", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm04.TypeRef("Fusee.Math.double2")]));

    $.Property({Static:false, Public:true }, "Faces", $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm02.TypeRef("Fusee.Engine.Face")]));

    $.Property({Static:false, Public:true }, "HasNormals", $.Boolean);

    $.Property({Static:false, Public:true }, "HasTexCoords", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Engine.Geometry/TripleInx */ 

(function TripleInx$Members () {
  var $, $thisType;
  function TripleInx_GetHashCode () {
    return ((this.iV ^ this.iT) ^ this.iN);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.Geometry/TripleInx", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [], []), 
      TripleInx_GetHashCode
    );

    $.Field({Static:false, Public:true }, "iV", $.Int32); 
    $.Field({Static:false, Public:true }, "iT", $.Int32); 
    $.Field({Static:false, Public:true }, "iN", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Fusee.Engine.GUIButtonHandler */ 

JSIL.MakeDelegate("Fusee.Engine.GUIButtonHandler", true, []);

/* class Fusee.Engine.GUIElement */ 

(function GUIElement$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Fusee.Engine.IFont)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.Fusee.Engine.RenderContext)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.Fusee.Engine.ShaderEffect)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize(System.Array.Of($asm04.Fusee.Math.float3))) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm04.Fusee.Math.float2))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm07.System.UInt16))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm07.System.UInt32))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm02.Fusee.Engine.Mesh)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm02.Fusee.Engine.EffectPassDeclaration)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm02.Fusee.Engine.RenderStateSet)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Fusee.Engine.Blend)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm02.Fusee.Engine.EffectParameterDeclaration)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm04.Fusee.Math.float4)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm04.Fusee.Math.float3)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm04.Fusee.Math.MathHelper)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm07.System.UInt16)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm07.System.Math)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm04.Fusee.Math.float2)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize(System.Array.Of($asm01.Fusee.Engine.CharInfoStruct))) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm07.System.Char)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Math.float3"), [
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single"), 
        $asm07.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Math.float2"), [$asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.IFont.get_TexAtlas)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.IFont.get_CharInfo)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.IFont.get_Width)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.IFont.get_Height)) ();
  };

  function GUIElement__ctor$00 (text, font, x, y, z, width, height) {
    this.GUIVS = "\r\n            attribute vec3 fuVertex;\r\n            attribute vec2 fuUV;\r\n            attribute vec4 fuColor;\r\n\r\n            varying vec2 vUV;\r\n            varying vec4 vColor;\r\n\r\n            void main()\r\n            {\r\n                vUV = fuUV;\r\n                vColor = fuColor;\r\n\r\n                gl_Position = vec4(fuVertex, 1);\r\n            }";
    this.GUIPS = "\r\n            #ifdef GL_ES\r\n                precision highp float;\r\n            #endif    \r\n  \r\n            varying vec2 vUV;\r\n            varying vec4 vColor;\r\n\r\n            void main(void) {\r\n                gl_FragColor = vColor;\r\n            }";
    this.TEXTPS = "\r\n            #ifdef GL_ES\r\n                precision highp float;\r\n            #endif    \r\n  \r\n            varying vec2 vUV;\r\n            varying vec4 vColor;\r\n\r\n            uniform sampler2D tex;\r\n            uniform vec4 uColor;\r\n\r\n            void main(void) {\r\n                gl_FragColor = vec4(1, 1, 1, texture2D(tex, vUV).a) * uColor;\r\n            }";
    this.Dirty = false;
    this.set_PosX(x);
    this.set_PosY(y);
    this.PosZ = z;
    this.set_OffsetX(0);
    this.set_OffsetY(0);
    this.set_OffsetZ(0);
    this.Width = width;
    this.Height = height;
    this.set_Text(text);
    this.Font = font;
    if (this.Font !== null) {
      this.CreateTextShader();
    }
  };

  function GUIElement_AttachToContext (rc) {
    if (this.RContext !== rc) {
      this.RContext = rc;
      if (this.GUIShader !== null) {
        this.GUIShader.AttachToContext(this.RContext);
      }
      if (this.TextShader !== null) {
        this.TextShader.AttachToContext(this.RContext);
      }
      this.Refresh();
    }
  };

  function GUIElement_CreateGUIMesh (vertices, uvs, indices, colors) {
    if (this.GUIElement$GUIMesh$value === null) {
      this.GUIElement$GUIMesh$value = (new ($T09())()).__Initialize__({
          Vertices: vertices, 
          UVs: uvs, 
          Triangles: indices, 
          Colors: colors}
      );
    } else {
      this.GUIElement$GUIMesh$value.set_Vertices(vertices);
      this.GUIElement$GUIMesh$value.set_UVs(uvs);
      this.GUIElement$GUIMesh$value.set_Triangles(indices);
      this.GUIElement$GUIMesh$value.set_Colors(colors);
    }
  };

  function GUIElement_CreateGUIShader () {
    this.GUIShader = new ($T04())(JSIL.Array.New($T0A(), [(new ($T0A())()).__Initialize__({
            VS: this.GUIVS, 
            PS: this.GUIPS, 
            StateSet: (new ($T0B())()).__Initialize__({
                AlphaBlendEnable: true, 
                SourceBlend: $T0C().SourceAlpha, 
                DestinationBlend: $T0C().InverseSourceAlpha, 
                ZEnable: true}
            )}
        )]), null);
  };

  function GUIElement_CreateTextMesh (vertices, uvs, indices) {
    if (this.GUIElement$TextMesh$value === null) {
      this.GUIElement$TextMesh$value = (new ($T09())()).__Initialize__({
          Vertices: vertices, 
          UVs: uvs, 
          Triangles: indices}
      );
    } else {
      this.GUIElement$TextMesh$value.set_Vertices(vertices);
      this.GUIElement$TextMesh$value.set_UVs(uvs);
      this.GUIElement$TextMesh$value.set_Triangles(indices);
    }
  };

  function GUIElement_CreateTextShader () {
    this.TextShader = new ($T04())(JSIL.Array.New($T0A(), [(new ($T0A())()).__Initialize__({
            VS: this.GUIVS, 
            PS: this.TEXTPS, 
            StateSet: (new ($T0B())()).__Initialize__({
                AlphaBlendEnable: true, 
                SourceBlend: $T0C().SourceAlpha, 
                DestinationBlend: $T0C().InverseSourceAlpha, 
                ZEnable: false}
            )}
        )]), JSIL.Array.New($T0D(), [(new ($T0D())()).__Initialize__({
            Name: "tex", 
            Value: $IM00().Call(this.Font, null)}
        ), (new ($T0D())()).__Initialize__({
            Name: "uColor", 
            Value: this._textColor.MemberwiseClone()}
        )]));
  };

  function GUIElement_DrawRectangle (c1, c2, c3, c4, vtStart, indStart, color, /* ref */ vertices, /* ref */ indices, /* ref */ colors) {
    vertices.get()[vtStart] = $S00().Construct(c1, c3, 0);
    vertices.get()[((vtStart + 1) | 0)] = $S00().Construct(c1, c4, 0);
    vertices.get()[((vtStart + 2) | 0)] = $S00().Construct(c2, c3, 0);
    vertices.get()[((vtStart + 3) | 0)] = $S00().Construct(c2, c4, 0);
    var colorInt = $T12().Float4ToABGR(color);
    colors.get()[vtStart] = colorInt;
    colors.get()[((vtStart + 1) | 0)] = colorInt;
    colors.get()[((vtStart + 2) | 0)] = colorInt;
    colors.get()[((vtStart + 3) | 0)] = colorInt;
    indices.get()[indStart] = $T13().$Cast(((vtStart + 1) | 0));
    indices.get()[((indStart + 1) | 0)] = $T13().$Cast(vtStart);
    indices.get()[((indStart + 2) | 0)] = $T13().$Cast(((vtStart + 2) | 0));
    indices.get()[((indStart + 3) | 0)] = $T13().$Cast(((vtStart + 1) | 0));
    indices.get()[((indStart + 4) | 0)] = $T13().$Cast(((vtStart + 2) | 0));
    indices.get()[((indStart + 5) | 0)] = $T13().$Cast(((vtStart + 3) | 0));
  };

  function GUIElement_get_GUIMesh () {
    return this.GUIElement$GUIMesh$value;
  };

  function GUIElement_get_OffsetX () {
    return this._offsetX;
  };

  function GUIElement_get_OffsetY () {
    return this._offsetY;
  };

  function GUIElement_get_OffsetZ () {
    return this._offsetZ;
  };

  function GUIElement_get_PosX () {
    return this._posX;
  };

  function GUIElement_get_PosY () {
    return this._posY;
  };

  function GUIElement_get_Tag () {
    return this.GUIElement$Tag$value;
  };

  function GUIElement_get_Text () {
    return this._text;
  };

  function GUIElement_get_TextColor () {
    return this._textColor;
  };

  function GUIElement_get_TextMesh () {
    return this.GUIElement$TextMesh$value;
  };

  function GUIElement_get_ZIndex () {
    return ((this.PosZ + this._offsetZ) | 0);
  };

  function GUIElement_PreRender (rc) {
    if (this.RContext !== rc) {
      this.AttachToContext(rc);
    }
    if (this.Dirty) {
      this.Refresh();
    }
  };

  function GUIElement_Refresh () {
    if (this.RContext !== null) {
      this.Dirty = false;
      this.CreateMesh();
    }
  };

  function GUIElement_Render (rc) {
    this.PreRender(rc);
    if (!((this.GUIShader === null) || (this.GUIElement$GUIMesh$value === null))) {
      this.GUIShader.RenderMesh(this.GUIElement$GUIMesh$value);
    }
    if (!((this.TextShader === null) || (this.GUIElement$TextMesh$value === null))) {
      this.TextShader.SetEffectParam("uColor", this._textColor.MemberwiseClone());
      this.TextShader.RenderMesh(this.GUIElement$TextMesh$value);
    }
  };

  function GUIElement_set_GUIMesh (value) {
    this.GUIElement$GUIMesh$value = value;
  };

  function GUIElement_set_OffsetX (value) {
    if (value !== this._offsetX) {
      this.Dirty = true;
    }
    this._offsetX = value;
  };

  function GUIElement_set_OffsetY (value) {
    if (value !== this._offsetY) {
      this.Dirty = true;
    }
    this._offsetY = value;
  };

  function GUIElement_set_OffsetZ (value) {
    if (value !== this._offsetZ) {
      this.Dirty = true;
    }
    this._offsetZ = value;
  };

  function GUIElement_set_PosX (value) {
    this._posX = value;
    this.Dirty = true;
  };

  function GUIElement_set_PosY (value) {
    this._posY = value;
    this.Dirty = true;
  };

  function GUIElement_set_Tag (value) {
    this.GUIElement$Tag$value = value;
  };

  function GUIElement_set_Text (value) {
    this._text = value;
    this.Dirty = true;
  };

  function GUIElement_set_TextColor (value) {
    this._textColor = value;
  };

  function GUIElement_set_TextMesh (value) {
    this.GUIElement$TextMesh$value = value;
  };

  function GUIElement_SetRectangleMesh (borderWidth, rectColor, borderColor) {
    var x = ((this.get_PosX() + this.get_OffsetX()) | 0);
    var y = ((this.get_PosY() + this.get_OffsetY()) | 0);
    var scaleX = +(2 / $T0E().$Cast(this.RContext.RenderContext$ViewportWidth$value));
    var scaleY = +(2 / $T0E().$Cast(this.RContext.RenderContext$ViewportHeight$value));
    var xS = +(-1 + ($T0E().$Cast(x) * scaleX));
    var yS = +(1 - ($T0E().$Cast(y) * scaleY));
    var width = +($T0E().$Cast(this.Width) * scaleX);
    var height = +($T0E().$Cast(this.Height) * scaleY);
    var borderX = +$T15().Max(0, (borderWidth * scaleX));
    var borderY = +$T15().Max(0, (borderWidth * scaleY));
    var vertices = new JSIL.BoxedVariable(JSIL.Array.New($T10(), ((borderWidth > 0) ? 8 : 4)));
    var uvs = JSIL.Array.New($T16(), ((borderWidth > 0) ? 8 : 4));
    var indices = new JSIL.BoxedVariable(JSIL.Array.New($T13(), ((borderWidth > 0) ? 12 : 6)));
    var colors = new JSIL.BoxedVariable(JSIL.Array.New($T11(), ((borderWidth > 0) ? 8 : 4)));
    var c = +(xS + borderX);
    var c2 = +((xS - borderX) + width);
    var c3 = +((yS - height) + borderY);
    var c4 = +(yS - borderY);
    this.DrawRectangle(
      c, 
      c2, 
      c3, 
      c4, 
      0, 
      0, 
      rectColor, 
      /* ref */ vertices, 
      /* ref */ indices, 
      /* ref */ colors
    );
    if (borderWidth > 0) {
      c = +xS;
      c2 = +(xS + width);
      c3 = +(yS - height);
      c4 = +yS;
      this.DrawRectangle(
        c, 
        c2, 
        c3, 
        c4, 
        4, 
        6, 
        borderColor, 
        /* ref */ vertices, 
        /* ref */ indices, 
        /* ref */ colors
      );
    }
    this.CreateGUIMesh(vertices.get(), uvs, indices.get(), colors.get());
  };

  function GUIElement_SetTextMesh (posX, posY) {
    var $temp00, $temp01, $temp02, $temp03, $temp04, $temp05;
    if (this.Font !== null) {
      var scaleX = +(2 / $T0E().$Cast(this.RContext.RenderContext$ViewportWidth$value));
      var scaleY = +(2 / $T0E().$Cast(this.RContext.RenderContext$ViewportHeight$value));
      var x = +(-1 + ($T0E().$Cast(posX) * scaleX));
      var y = +(1 - ($T0E().$Cast(posY) * scaleY));
      var vertices = JSIL.Array.New($T10(), ((4 * this.get_Text().length) | 0));
      var uvs = JSIL.Array.New($T16(), ((4 * this.get_Text().length) | 0));
      var indices = JSIL.Array.New($T13(), ((6 * this.get_Text().length) | 0));
      var charInfo = $IM01().Call(this.Font, null);
      var atlasWidth = $IM02().Call(this.Font, null);
      var atlasHeight = $IM03().Call(this.Font, null);
      var index = 0;
      var vertex = 0;
      var text = this.get_Text();

      for (var i = 0; i < text.length; i = ((i + 1) | 0)) {
        var letter = (text[i]);
        var x2 = +(x + (charInfo[letter.charCodeAt(0)].BitmapL * scaleX));
        var y2 = +(-y - (charInfo[letter.charCodeAt(0)].BitmapT * scaleY));
        var w = +(charInfo[letter.charCodeAt(0)].BitmapW * scaleX);
        var h = +(charInfo[letter.charCodeAt(0)].BitmapH * scaleY);
        x += +(charInfo[letter.charCodeAt(0)].AdvanceX * scaleX);
        y += +(charInfo[letter.charCodeAt(0)].AdvanceY * scaleY);
        if ((w > 1.192093E-07) && (h > 1.192093E-07)) {
          var bitmapW = +charInfo[letter.charCodeAt(0)].BitmapW;
          var bitmapH = +charInfo[letter.charCodeAt(0)].BitmapH;
          var texOffsetX = +charInfo[letter.charCodeAt(0)].TexOffX;
          var texOffsetY = +charInfo[letter.charCodeAt(0)].TexOffY;
          vertices[vertex] = $S00().Construct(x2, (-y2 - h), 0);
          vertices[((vertex + 1) | 0)] = $S00().Construct(x2, -y2, 0);
          vertices[((vertex + 2) | 0)] = $S00().Construct((x2 + w), (-y2 - h), 0);
          vertices[((vertex + 3) | 0)] = $S00().Construct((x2 + w), -y2, 0);
          uvs[vertex] = $S01().Construct(texOffsetX, (texOffsetY + (bitmapH / $T0E().$Cast(atlasHeight))));
          uvs[((vertex + 1) | 0)] = $S01().Construct(texOffsetX, texOffsetY);
          uvs[((vertex + 2) | 0)] = $S01().Construct((texOffsetX + (bitmapW / $T0E().$Cast(atlasWidth))), (texOffsetY + (bitmapH / $T0E().$Cast(atlasHeight))));
          uvs[((vertex + 3) | 0)] = $S01().Construct((texOffsetX + (bitmapW / $T0E().$Cast(atlasWidth))), texOffsetY);
          indices[($temp00 = index, 
            index = ((index + 1) | 0), 
            $temp00)] = ((vertex + 1) | 0);
          indices[($temp01 = index, 
            index = ((index + 1) | 0), 
            $temp01)] = vertex;
          indices[($temp02 = index, 
            index = ((index + 1) | 0), 
            $temp02)] = ((vertex + 2) | 0);
          indices[($temp03 = index, 
            index = ((index + 1) | 0), 
            $temp03)] = ((vertex + 1) | 0);
          indices[($temp04 = index, 
            index = ((index + 1) | 0), 
            $temp04)] = ((vertex + 2) | 0);
          indices[($temp05 = index, 
            index = ((index + 1) | 0), 
            $temp05)] = ((vertex + 3) | 0);
          vertex = ((vertex + 4) | 0);
        }
      }
      vertices = this.RContext.FixTextKerning(this.Font, vertices, this.get_Text(), scaleX);
      this.CreateTextMesh(vertices, uvs, indices);
    }
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.GUIElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("Fusee.Engine.IFont"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ], []), 
      GUIElement__ctor$00
    );

    $.Method({Static:false, Public:false, Virtual:true }, "AttachToContext", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.RenderContext")], []), 
      GUIElement_AttachToContext
    );

    $.Method({Static:false, Public:false}, "CreateGUIMesh", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")]), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float2")]), 
          $jsilcore.TypeRef("System.Array", [$.UInt16]), $jsilcore.TypeRef("System.Array", [$.UInt32])
        ], []), 
      GUIElement_CreateGUIMesh
    );

    $.Method({Static:false, Public:false, Virtual:true }, "CreateGUIShader", 
      new JSIL.MethodSignature(null, [], []), 
      GUIElement_CreateGUIShader
    );

    $.Method({Static:false, Public:false}, "CreateTextMesh", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")]), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float2")]), 
          $jsilcore.TypeRef("System.Array", [$.UInt16])
        ], []), 
      GUIElement_CreateTextMesh
    );

    $.Method({Static:false, Public:false}, "CreateTextShader", 
      new JSIL.MethodSignature(null, [], []), 
      GUIElement_CreateTextShader
    );

    $.Method({Static:false, Public:false}, "DrawRectangle", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Int32, $.Int32, 
          $asm04.TypeRef("Fusee.Math.float4"), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.UInt16])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.UInt32])])
        ], []), 
      GUIElement_DrawRectangle
    );

    $.Method({Static:false, Public:true }, "get_GUIMesh", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.Mesh"), [], []), 
      GUIElement_get_GUIMesh
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_OffsetX", 
      new JSIL.MethodSignature($.Int32, [], []), 
      GUIElement_get_OffsetX
    );

    $.Method({Static:false, Public:false}, "get_OffsetY", 
      new JSIL.MethodSignature($.Int32, [], []), 
      GUIElement_get_OffsetY
    );

    $.Method({Static:false, Public:false}, "get_OffsetZ", 
      new JSIL.MethodSignature($.Int32, [], []), 
      GUIElement_get_OffsetZ
    );

    $.Method({Static:false, Public:true }, "get_PosX", 
      new JSIL.MethodSignature($.Int32, [], []), 
      GUIElement_get_PosX
    );

    $.Method({Static:false, Public:true }, "get_PosY", 
      new JSIL.MethodSignature($.Int32, [], []), 
      GUIElement_get_PosY
    );

    $.Method({Static:false, Public:true }, "get_Tag", 
      new JSIL.MethodSignature($.Object, [], []), 
      GUIElement_get_Tag
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "get_Text", 
      new JSIL.MethodSignature($.String, [], []), 
      GUIElement_get_Text
    );

    $.Method({Static:false, Public:true }, "get_TextColor", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4"), [], []), 
      GUIElement_get_TextColor
    );

    $.Method({Static:false, Public:true }, "get_TextMesh", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.Mesh"), [], []), 
      GUIElement_get_TextMesh
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_ZIndex", 
      new JSIL.MethodSignature($.Int32, [], []), 
      GUIElement_get_ZIndex
    );

    $.Method({Static:false, Public:false, Virtual:true }, "PreRender", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.RenderContext")], []), 
      GUIElement_PreRender
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Refresh", 
      new JSIL.MethodSignature(null, [], []), 
      GUIElement_Refresh
    );

    $.Method({Static:false, Public:true }, "Render", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.RenderContext")], []), 
      GUIElement_Render
    );

    $.Method({Static:false, Public:false}, "set_GUIMesh", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.Mesh")], []), 
      GUIElement_set_GUIMesh
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_OffsetX", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      GUIElement_set_OffsetX
    );

    $.Method({Static:false, Public:false}, "set_OffsetY", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      GUIElement_set_OffsetY
    );

    $.Method({Static:false, Public:false}, "set_OffsetZ", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      GUIElement_set_OffsetZ
    );

    $.Method({Static:false, Public:true }, "set_PosX", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      GUIElement_set_PosX
    );

    $.Method({Static:false, Public:true }, "set_PosY", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      GUIElement_set_PosY
    );

    $.Method({Static:false, Public:true }, "set_Tag", 
      new JSIL.MethodSignature(null, [$.Object], []), 
      GUIElement_set_Tag
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "set_Text", 
      new JSIL.MethodSignature(null, [$.String], []), 
      GUIElement_set_Text
    );

    $.Method({Static:false, Public:true }, "set_TextColor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4")], []), 
      GUIElement_set_TextColor
    );

    $.Method({Static:false, Public:false}, "set_TextMesh", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.Mesh")], []), 
      GUIElement_set_TextMesh
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "SetRectangleMesh", 
      new JSIL.MethodSignature(null, [
          $.Single, $asm04.TypeRef("Fusee.Math.float4"), 
          $asm04.TypeRef("Fusee.Math.float4")
        ], []), 
      GUIElement_SetRectangleMesh
    );

    $.Method({Static:false, Public:false}, "SetTextMesh", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32], []), 
      GUIElement_SetTextMesh
    );

    $.Field({Static:false, Public:false}, "RContext", $asm02.TypeRef("Fusee.Engine.RenderContext")); 
    $.Field({Static:false, Public:false}, "Dirty", $.Boolean); 
    $.Field({Static:false, Public:false}, "Height", $.Int32); 
    $.Field({Static:false, Public:false}, "Width", $.Int32); 
    $.Field({Static:false, Public:false}, "PosZ", $.Int32); 
    $.Field({Static:false, Public:false}, "Font", $asm01.TypeRef("Fusee.Engine.IFont")); 
    $.Field({Static:false, Public:false}, "ImgSrc", $.String); 
    $.Field({Static:false, Public:false}, "GUITexture", $asm01.TypeRef("Fusee.Engine.ITexture")); 
    $.Field({Static:false, Public:false}, "GUIShader", $asm02.TypeRef("Fusee.Engine.ShaderEffect")); 
    $.Field({Static:false, Public:false}, "TextShader", $asm02.TypeRef("Fusee.Engine.ShaderEffect")); 
    $.Field({Static:false, Public:false}, "ColorParam", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "GUIVS", $.String); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "GUIPS", $.String); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "TEXTPS", $.String); 
    $.Field({Static:false, Public:false}, "_posX", $.Int32); 
    $.Field({Static:false, Public:false}, "_posY", $.Int32); 
    $.Field({Static:false, Public:false}, "_offsetX", $.Int32); 
    $.Field({Static:false, Public:false}, "_offsetY", $.Int32); 
    $.Field({Static:false, Public:false}, "_offsetZ", $.Int32); 
    $.Field({Static:false, Public:false}, "_text", $.String); 
    $.Field({Static:false, Public:false}, "_textColor", $asm04.TypeRef("Fusee.Math.float4")); 
    $.Field({Static:false, Public:false}, "GUIElement$Tag$value", $.Object)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GUIElement$GUIMesh$value", $asm02.TypeRef("Fusee.Engine.Mesh"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "GUIElement$TextMesh$value", $asm02.TypeRef("Fusee.Engine.Mesh"))
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:false}, "OffsetX", $.Int32);

    $.Property({Static:false, Public:false}, "OffsetY", $.Int32);

    $.Property({Static:false, Public:false}, "OffsetZ", $.Int32);

    $.Property({Static:false, Public:false}, "ZIndex", $.Int32);

    $.Property({Static:false, Public:true }, "TextColor", $asm04.TypeRef("Fusee.Math.float4"));

    $.Property({Static:false, Public:true }, "Text", $.String);

    $.Property({Static:false, Public:true }, "PosX", $.Int32);

    $.Property({Static:false, Public:true }, "PosY", $.Int32);

    $.Property({Static:false, Public:true }, "Tag", $.Object);

    $.Property({Static:false, Public:true }, "GUIMesh", $asm02.TypeRef("Fusee.Engine.Mesh"));

    $.Property({Static:false, Public:true }, "TextMesh", $asm02.TypeRef("Fusee.Engine.Mesh"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.GUIButton */ 

(function GUIButton$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.Fusee.Engine.GUIElement)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Fusee.Engine.IFont)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.Fusee.Engine.GUIButtonHandler)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Delegate)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Threading.Interlocked)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm02.Fusee.Engine.GUIText)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Void)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.Double)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Fusee.Engine.MouseEventArgs)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Fusee.Math.float4)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm02.Fusee.Engine.Input)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.System.EventHandler$b1.Of($asm01.Fusee.Engine.MouseEventArgs))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Math.float4"), [
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single"), 
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single")
      ]))) ();
  };

  function GUIButton__ctor$00 (x, y, width, height) {
    $T01().prototype._ctor.call(this, 
      $T02().Empty, 
      null, 
      x, 
      y, 
      0, 
      width, 
      height
    );
    this.SetupButton();
  };

  function GUIButton__ctor$01 (x, y, z, width, height) {
    $T01().prototype._ctor.call(this, 
      $T02().Empty, 
      null, 
      x, 
      y, 
      z, 
      width, 
      height
    );
    this.SetupButton();
  };

  function GUIButton__ctor$02 (text, font, x, y, width, height) {
    $T01().prototype._ctor.call(this, 
      text, 
      font, 
      x, 
      y, 
      0, 
      width, 
      height
    );
    this.SetupButton();
  };

  function GUIButton__ctor$03 (text, font, x, y, z, width, height) {
    $T01().prototype._ctor.call(this, 
      text, 
      font, 
      x, 
      y, 
      z, 
      width, 
      height
    );
    this.SetupButton();
  };

  function GUIButton_add_OnGUIButtonDown (value) {
    var gUIButtonHandler = this.OnGUIButtonDown;

    do {
      var gUIButtonHandler2 = gUIButtonHandler;
      var value2 = $T05().Combine(gUIButtonHandler2, value);
      gUIButtonHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIButtonDown"), value2, gUIButtonHandler2);
    } while (gUIButtonHandler !== gUIButtonHandler2);
  };

  function GUIButton_add_OnGUIButtonEnter (value) {
    var gUIButtonHandler = this.OnGUIButtonEnter;

    do {
      var gUIButtonHandler2 = gUIButtonHandler;
      var value2 = $T05().Combine(gUIButtonHandler2, value);
      gUIButtonHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIButtonEnter"), value2, gUIButtonHandler2);
    } while (gUIButtonHandler !== gUIButtonHandler2);
  };

  function GUIButton_add_OnGUIButtonLeave (value) {
    var gUIButtonHandler = this.OnGUIButtonLeave;

    do {
      var gUIButtonHandler2 = gUIButtonHandler;
      var value2 = $T05().Combine(gUIButtonHandler2, value);
      gUIButtonHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIButtonLeave"), value2, gUIButtonHandler2);
    } while (gUIButtonHandler !== gUIButtonHandler2);
  };

  function GUIButton_add_OnGUIButtonUp (value) {
    var gUIButtonHandler = this.OnGUIButtonUp;

    do {
      var gUIButtonHandler2 = gUIButtonHandler;
      var value2 = $T05().Combine(gUIButtonHandler2, value);
      gUIButtonHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIButtonUp"), value2, gUIButtonHandler2);
    } while (gUIButtonHandler !== gUIButtonHandler2);
  };

  function GUIButton_CreateMesh () {
    this.SetRectangleMesh(
      $T07().$Cast(this.get_BorderWidth()), 
      this.get_ButtonColor(), 
      this.get_BorderColor()
    );
    var x = ((this.get_PosX() + this.get_OffsetX()) | 0);
    var y = ((this.get_PosY() + this.get_OffsetY()) | 0);
    var maxW = +$T08().GetTextWidth(this.get_Text(), this.Font);
    x = ((Math.round(($T07().$Cast(x) + (($T07().$Cast(this.Width) - maxW) / 2)))) | 0);
    var maxH = +$T08().GetTextHeight(this.get_Text(), this.Font);
    y = ((Math.round((($T07().$Cast(y) + maxH) + (($T07().$Cast(this.Height) - maxH) / 2)))) | 0);
    this.SetTextMesh(x, y);
  };

  function GUIButton_get_BorderColor () {
    return this._borderColor;
  };

  function GUIButton_get_BorderWidth () {
    return this._borderWidth;
  };

  function GUIButton_get_ButtonColor () {
    return this._buttonColor;
  };

  function GUIButton_MouseOnButton (mea) {
    var x = mea.MouseEventArgs$Position$value.x;
    var y = mea.MouseEventArgs$Position$value.y;
    return (!((x < ((this.get_PosX() + this.get_OffsetX()) | 0)) || 
        (x > ((((this.get_PosX() + this.get_OffsetX()) | 0) + this.Width) | 0)) || 
        (y < ((this.get_PosY() + this.get_OffsetY()) | 0))) && (y <= ((((this.get_PosY() + this.get_OffsetY()) | 0) + this.Height) | 0)));
  };

  function GUIButton_OnButtonDown (sender, mea) {
    if (this.OnGUIButtonDown !== null) {
      if (this.MouseOnButton(mea)) {
        this.OnGUIButtonDown(this, mea);
      }
    }
  };

  function GUIButton_OnButtonUp (sender, mea) {
    if (this.OnGUIButtonUp !== null) {
      if (this.MouseOnButton(mea)) {
        this.OnGUIButtonUp(this, mea);
      }
    }
  };

  function GUIButton_OnMouseMove (sender, mea) {
    if (this.MouseOnButton(mea)) {
      if (!this._mouseOnButton) {
        this._mouseOnButton = true;
        if (this.OnGUIButtonEnter !== null) {
          this.OnGUIButtonEnter(this, mea);
        }
      }
    } else if (this._mouseOnButton) {
      this._mouseOnButton = false;
      if (this.OnGUIButtonLeave !== null) {
        this.OnGUIButtonLeave(this, mea);
      }
    }
  };

  function GUIButton_remove_OnGUIButtonDown (value) {
    var gUIButtonHandler = this.OnGUIButtonDown;

    do {
      var gUIButtonHandler2 = gUIButtonHandler;
      var value2 = $T05().Remove(gUIButtonHandler2, value);
      gUIButtonHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIButtonDown"), value2, gUIButtonHandler2);
    } while (gUIButtonHandler !== gUIButtonHandler2);
  };

  function GUIButton_remove_OnGUIButtonEnter (value) {
    var gUIButtonHandler = this.OnGUIButtonEnter;

    do {
      var gUIButtonHandler2 = gUIButtonHandler;
      var value2 = $T05().Remove(gUIButtonHandler2, value);
      gUIButtonHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIButtonEnter"), value2, gUIButtonHandler2);
    } while (gUIButtonHandler !== gUIButtonHandler2);
  };

  function GUIButton_remove_OnGUIButtonLeave (value) {
    var gUIButtonHandler = this.OnGUIButtonLeave;

    do {
      var gUIButtonHandler2 = gUIButtonHandler;
      var value2 = $T05().Remove(gUIButtonHandler2, value);
      gUIButtonHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIButtonLeave"), value2, gUIButtonHandler2);
    } while (gUIButtonHandler !== gUIButtonHandler2);
  };

  function GUIButton_remove_OnGUIButtonUp (value) {
    var gUIButtonHandler = this.OnGUIButtonUp;

    do {
      var gUIButtonHandler2 = gUIButtonHandler;
      var value2 = $T05().Remove(gUIButtonHandler2, value);
      gUIButtonHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIButtonUp"), value2, gUIButtonHandler2);
    } while (gUIButtonHandler !== gUIButtonHandler2);
  };

  function GUIButton_set_BorderColor (value) {
    this._borderColor = value;
    this.Dirty = true;
  };

  function GUIButton_set_BorderWidth (value) {
    this._borderWidth = value;
    this.Dirty = true;
  };

  function GUIButton_set_ButtonColor (value) {
    this._buttonColor = value;
    this.Dirty = true;
  };

  function GUIButton_SetupButton () {
    (this.ButtonColor = $S00().Construct(1, 1, 1, 1));
    (this.GUIElement$TextColor = $S00().Construct(0, 0, 0, 1));
    this.set_BorderWidth(1);
    (this.BorderColor = $S00().Construct(0, 0, 0, 1));
    $T0E().get_Instance().add_OnMouseButtonDown($T0F().New(this, $thisType.prototype.OnButtonDown));
    $T0E().get_Instance().add_OnMouseButtonUp($T0F().New(this, $thisType.prototype.OnButtonUp));
    $T0E().get_Instance().add_OnMouseMove($T0F().New(this, $thisType.prototype.OnMouseMove));
    this._mouseOnButton = false;
    this.CreateGUIShader();
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Fusee.Engine.GUIElement"), 
      Name: "Fusee.Engine.GUIButton", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ], []), 
      GUIButton__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ], []), 
      GUIButton__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("Fusee.Engine.IFont"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ], []), 
      GUIButton__ctor$02
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("Fusee.Engine.IFont"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ], []), 
      GUIButton__ctor$03
    );

    $.Method({Static:false, Public:true }, "add_OnGUIButtonDown", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIButtonHandler")], []), 
      GUIButton_add_OnGUIButtonDown
    );

    $.Method({Static:false, Public:true }, "add_OnGUIButtonEnter", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIButtonHandler")], []), 
      GUIButton_add_OnGUIButtonEnter
    );

    $.Method({Static:false, Public:true }, "add_OnGUIButtonLeave", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIButtonHandler")], []), 
      GUIButton_add_OnGUIButtonLeave
    );

    $.Method({Static:false, Public:true }, "add_OnGUIButtonUp", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIButtonHandler")], []), 
      GUIButton_add_OnGUIButtonUp
    );

    $.Method({Static:false, Public:false, Virtual:true }, "CreateMesh", 
      new JSIL.MethodSignature(null, [], []), 
      GUIButton_CreateMesh
    );

    $.Method({Static:false, Public:true }, "get_BorderColor", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4"), [], []), 
      GUIButton_get_BorderColor
    );

    $.Method({Static:false, Public:true }, "get_BorderWidth", 
      new JSIL.MethodSignature($.Int32, [], []), 
      GUIButton_get_BorderWidth
    );

    $.Method({Static:false, Public:true }, "get_ButtonColor", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4"), [], []), 
      GUIButton_get_ButtonColor
    );

    $.Method({Static:false, Public:false}, "MouseOnButton", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Fusee.Engine.MouseEventArgs")], []), 
      GUIButton_MouseOnButton
    );

    $.Method({Static:false, Public:false}, "OnButtonDown", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("Fusee.Engine.MouseEventArgs")], []), 
      GUIButton_OnButtonDown
    );

    $.Method({Static:false, Public:false}, "OnButtonUp", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("Fusee.Engine.MouseEventArgs")], []), 
      GUIButton_OnButtonUp
    );

    $.Method({Static:false, Public:false}, "OnMouseMove", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("Fusee.Engine.MouseEventArgs")], []), 
      GUIButton_OnMouseMove
    );

    $.Method({Static:false, Public:true }, "remove_OnGUIButtonDown", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIButtonHandler")], []), 
      GUIButton_remove_OnGUIButtonDown
    );

    $.Method({Static:false, Public:true }, "remove_OnGUIButtonEnter", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIButtonHandler")], []), 
      GUIButton_remove_OnGUIButtonEnter
    );

    $.Method({Static:false, Public:true }, "remove_OnGUIButtonLeave", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIButtonHandler")], []), 
      GUIButton_remove_OnGUIButtonLeave
    );

    $.Method({Static:false, Public:true }, "remove_OnGUIButtonUp", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIButtonHandler")], []), 
      GUIButton_remove_OnGUIButtonUp
    );

    $.Method({Static:false, Public:true }, "set_BorderColor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4")], []), 
      GUIButton_set_BorderColor
    );

    $.Method({Static:false, Public:true }, "set_BorderWidth", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      GUIButton_set_BorderWidth
    );

    $.Method({Static:false, Public:true }, "set_ButtonColor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4")], []), 
      GUIButton_set_ButtonColor
    );

    $.Method({Static:false, Public:false}, "SetupButton", 
      new JSIL.MethodSignature(null, [], []), 
      GUIButton_SetupButton
    );

    $.Field({Static:false, Public:false}, "_buttonColor", $asm04.TypeRef("Fusee.Math.float4")); 
    $.Field({Static:false, Public:false}, "_borderWidth", $.Int32); 
    $.Field({Static:false, Public:false}, "_borderColor", $asm04.TypeRef("Fusee.Math.float4")); 
    $.Field({Static:false, Public:false}, "_mouseOnButton", $.Boolean); 
    $.Field({Static:false, Public:false}, "OnGUIButtonDown", $asm02.TypeRef("Fusee.Engine.GUIButtonHandler")); 
    $.Field({Static:false, Public:false}, "OnGUIButtonUp", $asm02.TypeRef("Fusee.Engine.GUIButtonHandler")); 
    $.Field({Static:false, Public:false}, "OnGUIButtonEnter", $asm02.TypeRef("Fusee.Engine.GUIButtonHandler")); 
    $.Field({Static:false, Public:false}, "OnGUIButtonLeave", $asm02.TypeRef("Fusee.Engine.GUIButtonHandler")); 
    $.Property({Static:false, Public:true }, "ButtonColor", $asm04.TypeRef("Fusee.Math.float4"));

    $.Property({Static:false, Public:true }, "BorderWidth", $.Int32);

    $.Property({Static:false, Public:true }, "BorderColor", $asm04.TypeRef("Fusee.Math.float4"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.GUIHandler */ 

(function GUIHandler$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Collections.Generic.List$b1.Of($asm02.Fusee.Engine.GUIElement))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.Fusee.Engine.RenderContext)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.Fusee.Engine.GUIElement)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm02.Fusee.Engine.GUIElement))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Fusee.Engine.ClearFlags)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIElement")], []))) ();
  };

  function GUIHandler__ctor$00 () {
    $T00().prototype._ctor.call(this);
  };

  function GUIHandler__ctor$01 (rc) {
    $T00().prototype._ctor.call(this);
    this._renderContext = rc;
  };

  function GUIHandler_Add (item) {
    $S00().Call($T00().prototype, "Add", null, this, item);
    item.AttachToContext(this._renderContext);
  };

  function GUIHandler_AttachToContext (rc) {
    this._renderContext = rc;
  };

  function GUIHandler_DetachFromContext () {
    this._renderContext = null;
  };

  function GUIHandler_Refresh () {
    var $temp00;

    for (var a$0 = this._items, i$0 = 0, l$0 = this._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var guiElement = a$0[i$0];
      guiElement.Refresh();
    }
  };

  function GUIHandler_RenderGUI () {
    var tmpArray = new JSIL.BoxedVariable(null);
    if (this._renderContext !== null) {
      tmpArray.set($T00().prototype.ToArray.call(this));
      this.SortArray(/* ref */ tmpArray);
      var curZ = ($T00().prototype.get_Item.call(this, 0)).get_ZIndex();
      var array = tmpArray.get();

      for (var i = 0; i < array.length; i = ((i + 1) | 0)) {
        var guiElement = array[i];
        if (guiElement.get_ZIndex() !== curZ) {
          this._renderContext.Clear($T05().Depth);
          curZ = guiElement.get_ZIndex();
        }
        guiElement.Render(this._renderContext);
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("Fusee.Engine.GUIElement")]), 
      Name: "Fusee.Engine.GUIHandler", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      GUIHandler__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.RenderContext")], []), 
      GUIHandler__ctor$01
    );

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIElement")], []), 
      GUIHandler_Add
    );

    $.Method({Static:false, Public:true }, "AttachToContext", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.RenderContext")], []), 
      GUIHandler_AttachToContext
    );

    $.Method({Static:false, Public:true }, "DetachFromContext", 
      new JSIL.MethodSignature(null, [], []), 
      GUIHandler_DetachFromContext
    );

    $.Method({Static:false, Public:true }, "Refresh", 
      new JSIL.MethodSignature(null, [], []), 
      GUIHandler_Refresh
    );

    $.Method({Static:false, Public:true }, "RenderGUI", 
      new JSIL.MethodSignature(null, [], []), 
      GUIHandler_RenderGUI
    );

    $.ExternalMethod({Static:false, Public:false}, "SortArray", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm02.TypeRef("Fusee.Engine.GUIElement")])])], [])
    )
      .Attribute($asm0F.TypeRef("JSIL.Meta.JSExternal"));

    $.Field({Static:false, Public:false}, "_renderContext", $asm02.TypeRef("Fusee.Engine.RenderContext")); 
    $.ImplementInterfaces(
      /* 9 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.GUIText */ 

(function GUIText$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Fusee.Engine.IFont)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.Fusee.Engine.GUIElement)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm04.Fusee.Math.float4)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Char)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Math)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Math.float4"), [
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single"), 
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single")
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.IFont.get_CharInfo)) ();
  };

  function GUIText__ctor$00 (text, font, x, y) {
    $T03().prototype._ctor.call(this, 
      text, 
      font, 
      x, 
      y, 
      0, 
      0, 
      0
    );
    (this.GUIElement$TextColor = $S00().Construct(0, 0, 0, 1));
  };

  function GUIText__ctor$01 (text, font, x, y, z) {
    $T03().prototype._ctor.call(this, 
      text, 
      font, 
      x, 
      y, 
      z, 
      0, 
      0
    );
    (this.GUIElement$TextColor = $S00().Construct(0, 0, 0, 1));
  };

  function GUIText__ctor$02 (text, font, x, y, z, color) {
    $T03().prototype._ctor.call(this, 
      text, 
      font, 
      x, 
      y, 
      z, 
      0, 
      0
    );
    (this.GUIElement$TextColor = color);
  };

  function GUIText__ctor$03 (text, font, x, y, color) {
    $T03().prototype._ctor.call(this, 
      text, 
      font, 
      x, 
      y, 
      0, 
      0, 
      0
    );
    (this.GUIElement$TextColor = color);
  };

  function GUIText_CreateMesh () {
    this.SetTextMesh(
      ((this.get_PosX() + this.get_OffsetX()) | 0), 
      ((this.get_PosY() + this.get_OffsetY()) | 0)
    );
  };

  function GUIText_GetTextHeight (text, font) {
    var maxH = +0;

    for (var i = 0; i < text.length; i = ((i + 1) | 0)) {
      var letter = (text[i]);
      maxH = +$T07().Max(maxH, $IM00().Call(font, null)[letter.charCodeAt(0)].BitmapH);
    }
    return +maxH;
  };

  function GUIText_GetTextWidth (text, font) {
    var maxW = +0;

    for (var i = 0; i < text.length; i = ((i + 1) | 0)) {
      var letter = (text[i]);
      maxW += +$IM00().Call(font, null)[letter.charCodeAt(0)].AdvanceX;
    }
    return +maxW;
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Fusee.Engine.GUIElement"), 
      Name: "Fusee.Engine.GUIText", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("Fusee.Engine.IFont"), 
          $.Int32, $.Int32
        ], []), 
      GUIText__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("Fusee.Engine.IFont"), 
          $.Int32, $.Int32, 
          $.Int32
        ], []), 
      GUIText__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("Fusee.Engine.IFont"), 
          $.Int32, $.Int32, 
          $.Int32, $asm04.TypeRef("Fusee.Math.float4")
        ], []), 
      GUIText__ctor$02
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("Fusee.Engine.IFont"), 
          $.Int32, $.Int32, 
          $asm04.TypeRef("Fusee.Math.float4")
        ], []), 
      GUIText__ctor$03
    );

    $.Method({Static:false, Public:false, Virtual:true }, "CreateMesh", 
      new JSIL.MethodSignature(null, [], []), 
      GUIText_CreateMesh
    );

    $.Method({Static:true , Public:true }, "GetTextHeight", 
      new JSIL.MethodSignature($.Single, [$.String, $asm01.TypeRef("Fusee.Engine.IFont")], []), 
      GUIText_GetTextHeight
    );

    $.Method({Static:true , Public:true }, "GetTextWidth", 
      new JSIL.MethodSignature($.Single, [$.String, $asm01.TypeRef("Fusee.Engine.IFont")], []), 
      GUIText_GetTextWidth
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Fusee.Engine.GUIPanelHandler */ 

JSIL.MakeDelegate("Fusee.Engine.GUIPanelHandler", true, []);

/* class Fusee.Engine.GUIPanel */ 

(function GUIPanel$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Fusee.Engine.IFont)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.Fusee.Engine.GUIElement)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.Fusee.Engine.GUIPanelHandler)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Delegate)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Threading.Interlocked)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm02.Fusee.Engine.GUIText)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Void)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.Double)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Fusee.Engine.MouseEventArgs)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm02.Fusee.Engine.RenderContext)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerator$b1.Of($asm02.Fusee.Engine.GUIElement))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.System.Collections.ObjectModel.Collection$b1.Of($asm02.Fusee.Engine.GUIElement))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm07.System.Collections.IEnumerator)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm04.Fusee.Math.float4)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm02.Fusee.Engine.Input)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm07.System.EventHandler$b1.Of($asm01.Fusee.Engine.MouseEventArgs))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm02.TypeRef("Fusee.Engine.GUIElement")]), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Math.float4"), [
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single"), 
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single")
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerator$b1.Of($asm02.Fusee.Engine.GUIElement).get_Current)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };

  function GUIPanel__ctor$00 (text, font, x, y, z, width, height) {
    $T03().prototype._ctor.call(this, 
      text, 
      font, 
      x, 
      y, 
      z, 
      width, 
      height
    );
    this.SetupPanel();
  };

  function GUIPanel__ctor$01 (text, font, x, y, width, height) {
    $T03().prototype._ctor.call(this, 
      text, 
      font, 
      x, 
      y, 
      0, 
      width, 
      height
    );
    this.SetupPanel();
  };

  function GUIPanel_add_OnGUIPanelDown (value) {
    var gUIPanelHandler = this.OnGUIPanelDown;

    do {
      var gUIPanelHandler2 = gUIPanelHandler;
      var value2 = $T05().Combine(gUIPanelHandler2, value);
      gUIPanelHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIPanelDown"), value2, gUIPanelHandler2);
    } while (gUIPanelHandler !== gUIPanelHandler2);
  };

  function GUIPanel_add_OnGUIPanelEnter (value) {
    var gUIPanelHandler = this.OnGUIPanelEnter;

    do {
      var gUIPanelHandler2 = gUIPanelHandler;
      var value2 = $T05().Combine(gUIPanelHandler2, value);
      gUIPanelHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIPanelEnter"), value2, gUIPanelHandler2);
    } while (gUIPanelHandler !== gUIPanelHandler2);
  };

  function GUIPanel_add_OnGUIPanelLeave (value) {
    var gUIPanelHandler = this.OnGUIPanelLeave;

    do {
      var gUIPanelHandler2 = gUIPanelHandler;
      var value2 = $T05().Combine(gUIPanelHandler2, value);
      gUIPanelHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIPanelLeave"), value2, gUIPanelHandler2);
    } while (gUIPanelHandler !== gUIPanelHandler2);
  };

  function GUIPanel_add_OnGUIPanelUp (value) {
    var gUIPanelHandler = this.OnGUIPanelUp;

    do {
      var gUIPanelHandler2 = gUIPanelHandler;
      var value2 = $T05().Combine(gUIPanelHandler2, value);
      gUIPanelHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIPanelUp"), value2, gUIPanelHandler2);
    } while (gUIPanelHandler !== gUIPanelHandler2);
  };

  function GUIPanel_CreateMesh () {
    this.SetRectangleMesh(
      $T07().$Cast(this.get_BorderWidth()), 
      this.get_PanelColor(), 
      this.get_BorderColor()
    );
    var x = ((this.get_PosX() + this.get_OffsetX()) | 0);
    var y = ((this.get_PosY() + this.get_OffsetY()) | 0);
    var maxW = +$T08().GetTextWidth(this.get_Text(), this.Font);
    x = ((Math.round(($T07().$Cast(x) + (($T07().$Cast(this.Width) - maxW) / 2)))) | 0);
    this.SetTextMesh(x, ((y + 20) | 0));
  };

  function GUIPanel_get_BorderColor () {
    return this._borderColor;
  };

  function GUIPanel_get_BorderWidth () {
    return this._borderWidth;
  };

  function GUIPanel_get_PanelColor () {
    return this._panelColor;
  };

  function GUIPanel_MouseOnPanel (mea) {
    var x = mea.MouseEventArgs$Position$value.x;
    var y = mea.MouseEventArgs$Position$value.y;
    return (!((x < ((this.get_PosX() + this.get_OffsetX()) | 0)) || 
        (x > ((((this.get_PosX() + this.get_OffsetX()) | 0) + this.Width) | 0)) || 
        (y < ((this.get_PosY() + this.get_OffsetY()) | 0))) && (y <= ((((this.get_PosY() + this.get_OffsetY()) | 0) + this.Height) | 0)));
  };

  function GUIPanel_OnButtonDown (sender, mea) {
    if (this.OnGUIPanelDown !== null) {
      if (this.MouseOnPanel(mea)) {
        this.OnGUIPanelDown(this, mea);
      }
    }
  };

  function GUIPanel_OnButtonUp (sender, mea) {
    if (this.OnGUIPanelUp !== null) {
      if (this.MouseOnPanel(mea)) {
        this.OnGUIPanelUp(this, mea);
      }
    }
  };

  function GUIPanel_OnMouseMove (sender, mea) {
    if (this.MouseOnPanel(mea)) {
      if (!this._mouseOnPanel) {
        this._mouseOnPanel = true;
        if (this.OnGUIPanelEnter !== null) {
          this.OnGUIPanelEnter(this, mea);
        }
      }
    } else if (this._mouseOnPanel) {
      this._mouseOnPanel = false;
      if (this.OnGUIPanelLeave !== null) {
        this.OnGUIPanelLeave(this, mea);
      }
    }
  };

  function GUIPanel_PreRender (rc) {
    $T03().prototype.PreRender.call(this, rc);
    var enumerator = this.ChildElements.GetEnumerator();
    try {

      while ($IM00().Call(enumerator, null)) {
        var childElement = $IM01().Call(enumerator, null);
        childElement.set_OffsetX(this.get_PosX());
        childElement.set_OffsetY(this.get_PosY());
        childElement.set_OffsetZ(this.PosZ);
        childElement.Render(rc);
      }
    } finally {
      if (enumerator !== null) {
        $IM02().Call(enumerator, null);
      }
    }
  };

  function GUIPanel_Refresh () {
    $T03().prototype.Refresh.call(this);
    var enumerator = this.ChildElements.GetEnumerator();
    try {

      while ($IM00().Call(enumerator, null)) {
        var childElement = $IM01().Call(enumerator, null);
        childElement.Refresh();
      }
    } finally {
      if (enumerator !== null) {
        $IM02().Call(enumerator, null);
      }
    }
  };

  function GUIPanel_remove_OnGUIPanelDown (value) {
    var gUIPanelHandler = this.OnGUIPanelDown;

    do {
      var gUIPanelHandler2 = gUIPanelHandler;
      var value2 = $T05().Remove(gUIPanelHandler2, value);
      gUIPanelHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIPanelDown"), value2, gUIPanelHandler2);
    } while (gUIPanelHandler !== gUIPanelHandler2);
  };

  function GUIPanel_remove_OnGUIPanelEnter (value) {
    var gUIPanelHandler = this.OnGUIPanelEnter;

    do {
      var gUIPanelHandler2 = gUIPanelHandler;
      var value2 = $T05().Remove(gUIPanelHandler2, value);
      gUIPanelHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIPanelEnter"), value2, gUIPanelHandler2);
    } while (gUIPanelHandler !== gUIPanelHandler2);
  };

  function GUIPanel_remove_OnGUIPanelLeave (value) {
    var gUIPanelHandler = this.OnGUIPanelLeave;

    do {
      var gUIPanelHandler2 = gUIPanelHandler;
      var value2 = $T05().Remove(gUIPanelHandler2, value);
      gUIPanelHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIPanelLeave"), value2, gUIPanelHandler2);
    } while (gUIPanelHandler !== gUIPanelHandler2);
  };

  function GUIPanel_remove_OnGUIPanelUp (value) {
    var gUIPanelHandler = this.OnGUIPanelUp;

    do {
      var gUIPanelHandler2 = gUIPanelHandler;
      var value2 = $T05().Remove(gUIPanelHandler2, value);
      gUIPanelHandler = $T06().CompareExchange$b1($T04())(/* ref */ new JSIL.MemberReference(this, "OnGUIPanelUp"), value2, gUIPanelHandler2);
    } while (gUIPanelHandler !== gUIPanelHandler2);
  };

  function GUIPanel_set_BorderColor (value) {
    this._borderColor = value;
    this.Dirty = true;
  };

  function GUIPanel_set_BorderWidth (value) {
    this._borderWidth = value;
    this.Dirty = true;
  };

  function GUIPanel_set_PanelColor (value) {
    this._panelColor = value;
    this.Dirty = true;
  };

  function GUIPanel_SetupPanel () {
    this.ChildElements = $S00().Construct();
    (this.PanelColor = $S01().Construct(0.1, 0.1, 0.1, 0.5));
    (this.GUIElement$TextColor = $S01().Construct(0.9, 0.9, 0.9, 1));
    this.set_BorderWidth(1);
    (this.BorderColor = $S01().Construct(0.2, 0.2, 0.2, 0.5));
    $T13().get_Instance().add_OnMouseButtonDown($T14().New(this, $thisType.prototype.OnButtonDown));
    $T13().get_Instance().add_OnMouseButtonUp($T14().New(this, $thisType.prototype.OnButtonUp));
    $T13().get_Instance().add_OnMouseMove($T14().New(this, $thisType.prototype.OnMouseMove));
    this.CreateGUIShader();
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Fusee.Engine.GUIElement"), 
      Name: "Fusee.Engine.GUIPanel", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("Fusee.Engine.IFont"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ], []), 
      GUIPanel__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("Fusee.Engine.IFont"), 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ], []), 
      GUIPanel__ctor$01
    );

    $.Method({Static:false, Public:true }, "add_OnGUIPanelDown", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIPanelHandler")], []), 
      GUIPanel_add_OnGUIPanelDown
    );

    $.Method({Static:false, Public:true }, "add_OnGUIPanelEnter", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIPanelHandler")], []), 
      GUIPanel_add_OnGUIPanelEnter
    );

    $.Method({Static:false, Public:true }, "add_OnGUIPanelLeave", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIPanelHandler")], []), 
      GUIPanel_add_OnGUIPanelLeave
    );

    $.Method({Static:false, Public:true }, "add_OnGUIPanelUp", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIPanelHandler")], []), 
      GUIPanel_add_OnGUIPanelUp
    );

    $.Method({Static:false, Public:false, Virtual:true }, "CreateMesh", 
      new JSIL.MethodSignature(null, [], []), 
      GUIPanel_CreateMesh
    );

    $.Method({Static:false, Public:true }, "get_BorderColor", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4"), [], []), 
      GUIPanel_get_BorderColor
    );

    $.Method({Static:false, Public:true }, "get_BorderWidth", 
      new JSIL.MethodSignature($.Int32, [], []), 
      GUIPanel_get_BorderWidth
    );

    $.Method({Static:false, Public:true }, "get_PanelColor", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4"), [], []), 
      GUIPanel_get_PanelColor
    );

    $.Method({Static:false, Public:false}, "MouseOnPanel", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Fusee.Engine.MouseEventArgs")], []), 
      GUIPanel_MouseOnPanel
    );

    $.Method({Static:false, Public:false}, "OnButtonDown", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("Fusee.Engine.MouseEventArgs")], []), 
      GUIPanel_OnButtonDown
    );

    $.Method({Static:false, Public:false}, "OnButtonUp", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("Fusee.Engine.MouseEventArgs")], []), 
      GUIPanel_OnButtonUp
    );

    $.Method({Static:false, Public:false}, "OnMouseMove", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("Fusee.Engine.MouseEventArgs")], []), 
      GUIPanel_OnMouseMove
    );

    $.Method({Static:false, Public:false, Virtual:true }, "PreRender", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.RenderContext")], []), 
      GUIPanel_PreRender
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Refresh", 
      new JSIL.MethodSignature(null, [], []), 
      GUIPanel_Refresh
    );

    $.Method({Static:false, Public:true }, "remove_OnGUIPanelDown", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIPanelHandler")], []), 
      GUIPanel_remove_OnGUIPanelDown
    );

    $.Method({Static:false, Public:true }, "remove_OnGUIPanelEnter", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIPanelHandler")], []), 
      GUIPanel_remove_OnGUIPanelEnter
    );

    $.Method({Static:false, Public:true }, "remove_OnGUIPanelLeave", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIPanelHandler")], []), 
      GUIPanel_remove_OnGUIPanelLeave
    );

    $.Method({Static:false, Public:true }, "remove_OnGUIPanelUp", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.GUIPanelHandler")], []), 
      GUIPanel_remove_OnGUIPanelUp
    );

    $.Method({Static:false, Public:true }, "set_BorderColor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4")], []), 
      GUIPanel_set_BorderColor
    );

    $.Method({Static:false, Public:true }, "set_BorderWidth", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      GUIPanel_set_BorderWidth
    );

    $.Method({Static:false, Public:true }, "set_PanelColor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4")], []), 
      GUIPanel_set_PanelColor
    );

    $.Method({Static:false, Public:false}, "SetupPanel", 
      new JSIL.MethodSignature(null, [], []), 
      GUIPanel_SetupPanel
    );

    $.Field({Static:false, Public:false}, "_panelColor", $asm04.TypeRef("Fusee.Math.float4")); 
    $.Field({Static:false, Public:false}, "_borderWidth", $.Int32); 
    $.Field({Static:false, Public:false}, "_borderColor", $asm04.TypeRef("Fusee.Math.float4")); 
    $.Field({Static:false, Public:false}, "_mouseOnPanel", $.Boolean); 
    $.Field({Static:false, Public:true }, "ChildElements", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm02.TypeRef("Fusee.Engine.GUIElement")])); 
    $.Field({Static:false, Public:false}, "OnGUIPanelDown", $asm02.TypeRef("Fusee.Engine.GUIPanelHandler")); 
    $.Field({Static:false, Public:false}, "OnGUIPanelUp", $asm02.TypeRef("Fusee.Engine.GUIPanelHandler")); 
    $.Field({Static:false, Public:false}, "OnGUIPanelEnter", $asm02.TypeRef("Fusee.Engine.GUIPanelHandler")); 
    $.Field({Static:false, Public:false}, "OnGUIPanelLeave", $asm02.TypeRef("Fusee.Engine.GUIPanelHandler")); 
    $.Property({Static:false, Public:true }, "PanelColor", $asm04.TypeRef("Fusee.Math.float4"));

    $.Property({Static:false, Public:true }, "BorderWidth", $.Int32);

    $.Property({Static:false, Public:true }, "BorderColor", $asm04.TypeRef("Fusee.Math.float4"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.GUIImage */ 

(function GUIImage$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.Fusee.Engine.GUIElement)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.Fusee.Engine.RenderContext)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Fusee.Engine.ImageData)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Fusee.Engine.ShaderEffect)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.Fusee.Engine.EffectPassDeclaration)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm02.Fusee.Engine.RenderStateSet)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Fusee.Engine.Blend)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm02.Fusee.Engine.EffectParameterDeclaration)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Fusee.Math.float4)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize(System.Array.Of($asm04.Fusee.Math.float2))) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm02.Fusee.Engine.Mesh)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm04.Fusee.Math.float2)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Math.float4"), [
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single"), 
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Math.float2"), [$asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single")]))) ();
  };

  function GUIImage__ctor$00 (img, x, y, z, width, height) {
    $T02().prototype._ctor.call(this, 
      $T00().Empty, 
      null, 
      x, 
      y, 
      z, 
      width, 
      height
    );
    this.ImgSrc = img;
    this.set_BorderWidth(0);
  };

  function GUIImage__ctor$01 (img, x, y, width, height) {
    $T02().prototype._ctor.call(this, 
      $T00().Empty, 
      null, 
      x, 
      y, 
      0, 
      width, 
      height
    );
    this.ImgSrc = img;
    this.set_BorderWidth(0);
  };

  function GUIImage_AttachToContext (rc) {
    if (this.RContext !== rc) {
      if (this.ImgSrc !== null) {
        var imgData = rc.LoadImage(this.ImgSrc).MemberwiseClone();
        this.GUITexture = rc.CreateTexture(imgData.MemberwiseClone());
        this.CreateGUIShader();
      }
      $T02().prototype.AttachToContext.call(this, rc);
    }
  };

  function GUIImage_CreateGUIShader () {
    this.GUIShader = new ($T05())(JSIL.Array.New($T06(), [(new ($T06())()).__Initialize__({
            VS: this.GUIVS, 
            PS: "\r\n            #ifdef GL_ES\r\n                precision highp float;\r\n            #endif    \r\n  \r\n            varying vec2 vUV;\r\n            varying vec4 vColor;\r\n\r\n            uniform sampler2D tex;\r\n\r\n            void main(void) {\r\n                if (vUV.x == -1.0)\r\n                    gl_FragColor = vColor;\r\n                else\r\n                    gl_FragColor = texture2D(tex, vUV);\r\n            }", 
            StateSet: (new ($T07())()).__Initialize__({
                AlphaBlendEnable: true, 
                SourceBlend: $T08().SourceAlpha, 
                DestinationBlend: $T08().InverseSourceAlpha, 
                ZEnable: true}
            )}
        )]), JSIL.Array.New($T09(), [(new ($T09())()).__Initialize__({
            Name: "tex", 
            Value: this.GUITexture}
        )]));
  };

  function GUIImage_CreateMesh () {
    this.SetRectangleMesh(
      $T0A().$Cast(this.get_BorderWidth()), 
      $S00().Construct(1, 1, 1, 1), 
      this.get_BorderColor()
    );
    var uvs = this.GUIElement$GUIMesh$value.get_UVs();
    uvs[0] = $S01().Construct(0, 0);
    uvs[1] = $S01().Construct(0, 1);
    uvs[2] = $S01().Construct(1, 0);
    uvs[3] = $S01().Construct(1, 1);
    if (this.get_BorderWidth() > 0) {

      for (var i = 4; i < 8; i = ((i + 1) | 0)) {
        uvs[i] = $S01().Construct(-1, -1);
      }
    }
    this.GUIElement$GUIMesh$value.set_UVs(uvs);
  };

  function GUIImage_get_BorderColor () {
    return this._borderColor;
  };

  function GUIImage_get_BorderWidth () {
    return this._borderWidth;
  };

  function GUIImage_set_BorderColor (value) {
    this._borderColor = value;
    this.Dirty = true;
  };

  function GUIImage_set_BorderWidth (value) {
    this._borderWidth = value;
    this.Dirty = true;
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Fusee.Engine.GUIElement"), 
      Name: "Fusee.Engine.GUIImage", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ], []), 
      GUIImage__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ], []), 
      GUIImage__ctor$01
    );

    $.Method({Static:false, Public:false, Virtual:true }, "AttachToContext", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.RenderContext")], []), 
      GUIImage_AttachToContext
    );

    $.Method({Static:false, Public:false, Virtual:true }, "CreateGUIShader", 
      new JSIL.MethodSignature(null, [], []), 
      GUIImage_CreateGUIShader
    );

    $.Method({Static:false, Public:false, Virtual:true }, "CreateMesh", 
      new JSIL.MethodSignature(null, [], []), 
      GUIImage_CreateMesh
    );

    $.Method({Static:false, Public:true }, "get_BorderColor", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4"), [], []), 
      GUIImage_get_BorderColor
    );

    $.Method({Static:false, Public:true }, "get_BorderWidth", 
      new JSIL.MethodSignature($.Int32, [], []), 
      GUIImage_get_BorderWidth
    );

    $.Method({Static:false, Public:true }, "set_BorderColor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4")], []), 
      GUIImage_set_BorderColor
    );

    $.Method({Static:false, Public:true }, "set_BorderWidth", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      GUIImage_set_BorderWidth
    );

    $.Constant({Static:true , Public:false}, "IMGPS", "\r\n            #ifdef GL_ES\r\n                precision highp float;\r\n            #endif    \r\n  \r\n            varying vec2 vUV;\r\n            varying vec4 vColor;\r\n\r\n            uniform sampler2D tex;\r\n\r\n            void main(void) {\r\n                if (vUV.x == -1.0)\r\n                    gl_FragColor = vColor;\r\n                else\r\n                    gl_FragColor = texture2D(tex, vUV);\r\n            }"); 
    $.Field({Static:false, Public:false}, "_borderColor", $asm04.TypeRef("Fusee.Math.float4")); 
    $.Field({Static:false, Public:false}, "_borderWidth", $.Int32); 
    $.Property({Static:false, Public:true }, "BorderWidth", $.Int32);

    $.Property({Static:false, Public:true }, "BorderColor", $asm04.TypeRef("Fusee.Math.float4"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.GImpactMeshShape */ 

(function GImpactMeshShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Fusee.Engine.CollisionShape)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.set_Margin)) ();
  };

  function GImpactMeshShape__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function GImpactMeshShape_get_Margin () {
    return +$IM00().Call(this.GImpactMeshShapeImp, null);
  };

  function GImpactMeshShape_set_Margin (value) {
    var o = $thisType.$Cast($IM01().Call(this.GImpactMeshShapeImp, null));
    $IM02().Call(o.GImpactMeshShapeImp, null, value);
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Fusee.Engine.CollisionShape"), 
      Name: "Fusee.Engine.GImpactMeshShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      GImpactMeshShape__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Margin", 
      new JSIL.MethodSignature($.Single, [], []), 
      GImpactMeshShape_get_Margin
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Margin", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      GImpactMeshShape_set_Margin
    );

    $.Field({Static:false, Public:false}, "GImpactMeshShapeImp", $asm01.TypeRef("Fusee.Engine.IGImpactMeshShapeImp")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Margin", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.HingeConstraint */ 

(function HingeConstraint$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Fusee.Engine.IHingeConstraintImp)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.Fusee.Engine.RigidBody)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Fusee.Math.float4x4)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm04.Fusee.Math.float3)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.Fusee.Math.Quaternion)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Single"), [], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Single"), [$asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4")], []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.Quaternion"), $asm07.TypeRef("System.Single")], []))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single")], []))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.get_UserObject)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.IHingeConstraintImp.EnableAngularMotor)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.IHingeConstraintImp.get_FrameA)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.IHingeConstraintImp.get_AngularOnly)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.IHingeConstraintImp.get_FrameB)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.Fusee.Engine.IHingeConstraintImp.get_EnableMotor)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm01.Fusee.Engine.IHingeConstraintImp.get_LowerLimit)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm01.Fusee.Engine.IHingeConstraintImp.get_MaxMotorImpulse)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm01.Fusee.Engine.IHingeConstraintImp.get_MotorTargetVelocity)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_UserObject)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.get_RigidBodyA)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.get_RigidBodyB)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm01.Fusee.Engine.IHingeConstraintImp.get_SolverLimit)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm01.Fusee.Engine.IHingeConstraintImp.GetHingeAngle)) ();
  };
  var $IM0E = function () {
    return ($IM0E = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.GetUid)) ();
  };
  var $IM0F = function () {
    return ($IM0F = JSIL.Memoize($asm01.Fusee.Engine.IHingeConstraintImp.set_AngularOnly)) ();
  };
  var $IM10 = function () {
    return ($IM10 = JSIL.Memoize($asm01.Fusee.Engine.IHingeConstraintImp.set_EnableMotor)) ();
  };
  var $IM11 = function () {
    return ($IM11 = JSIL.Memoize($asm01.Fusee.Engine.IHingeConstraintImp.set_MaxMotorImpulse)) ();
  };
  var $IM12 = function () {
    return ($IM12 = JSIL.Memoize($asm01.Fusee.Engine.IHingeConstraintImp.SetAxis)) ();
  };
  var $IM13 = function () {
    return ($IM13 = JSIL.Memoize($asm01.Fusee.Engine.IHingeConstraintImp.SetLimit)) ();
  };
  var $IM14 = function () {
    return ($IM14 = JSIL.Memoize($asm01.Fusee.Engine.IHingeConstraintImp.SetMotorTarget)) ();
  };

  function HingeConstraint__ctor () {
  };

  function HingeConstraint_EnableAngularMotor (enableMotor, targetVelocity, maxMotorImpulse) {
    var o = $thisType.$Cast($IM00().Call(this._iHConstraintImp, null));
    $IM01().Call(o._iHConstraintImp, null, enableMotor, targetVelocity, maxMotorImpulse);
  };

  function HingeConstraint_get_AFrame () {
    return $IM02().Call(this._iHConstraintImp, null);
  };

  function HingeConstraint_get_AngularOnly () {
    return $IM03().Call(this._iHConstraintImp, null);
  };

  function HingeConstraint_get_BFrame () {
    return $IM04().Call(this._iHConstraintImp, null);
  };

  function HingeConstraint_get_EnableMotor () {
    return $IM05().Call(this._iHConstraintImp, null);
  };

  function HingeConstraint_get_GetLowerLimit () {
    return +$IM06().Call(this._iHConstraintImp, null);
  };

  function HingeConstraint_get_GetUpperLimit () {
    return +$IM06().Call(this._iHConstraintImp, null);
  };

  function HingeConstraint_get_MaxMotorImpulse () {
    return +$IM07().Call(this._iHConstraintImp, null);
  };

  function HingeConstraint_get_MotorTargetVelocity () {
    return +$IM08().Call(this._iHConstraintImp, null);
  };

  function HingeConstraint_get_RigidBodyA () {
    var retval = $IM09().Call($IM0A().Call(this._iHConstraintImp, null), null);
    return $T06().$Cast(retval);
  };

  function HingeConstraint_get_RigidBodyB () {
    var retval = $IM09().Call($IM0B().Call(this._iHConstraintImp, null), null);
    return $T06().$Cast(retval);
  };

  function HingeConstraint_get_SolverLimit () {
    return $IM0C().Call(this._iHConstraintImp, null);
  };

  function HingeConstraint_GetHingeAngle$00 () {
    return +$S00().CallVirtual($IM0D(), null, this._iHConstraintImp);
  };

  function HingeConstraint_GetHingeAngle$01 (transA, transB) {
    return +$S01().CallVirtual($IM0D(), null, this._iHConstraintImp, transA, transB);
  };

  function HingeConstraint_GetUid () {
    return $IM0E().Call(this._iHConstraintImp, null);
  };

  function HingeConstraint_set_AngularOnly (value) {
    var o = $thisType.$Cast($IM00().Call(this._iHConstraintImp, null));
    $IM0F().Call(o._iHConstraintImp, null, value);
  };

  function HingeConstraint_set_EnableMotor (value) {
    var o = $thisType.$Cast($IM00().Call(this._iHConstraintImp, null));
    $IM10().Call(o._iHConstraintImp, null, value);
  };

  function HingeConstraint_set_MaxMotorImpulse (value) {
    var o = $thisType.$Cast($IM00().Call(this._iHConstraintImp, null));
    $IM11().Call(o._iHConstraintImp, null, value);
  };

  function HingeConstraint_SetAxis (axisInA) {
    var o = $thisType.$Cast($IM00().Call(this._iHConstraintImp, null));
    $IM12().Call(this._iHConstraintImp, null, axisInA);
  };

  function HingeConstraint_SetLimit (low, high, softness, biasFactor, relaxationFactor) {
    $IM13().Call(this._iHConstraintImp, null, 
      low, 
      high, 
      softness, 
      biasFactor, 
      relaxationFactor
    );
  };

  function HingeConstraint_SetMotorTarget$02 (qAinB, dt) {
    var o = $thisType.$Cast($IM00().Call(this._iHConstraintImp, null));
    $S02().CallVirtual($IM14(), null, o._iHConstraintImp, qAinB, dt);
  };

  function HingeConstraint_SetMotorTarget$03 (targetAngle, dt) {
    var o = $thisType.$Cast($IM00().Call(this._iHConstraintImp, null));
    $S03().CallVirtual($IM14(), null, o._iHConstraintImp, targetAngle, dt);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.HingeConstraint", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      HingeConstraint__ctor
    );

    $.Method({Static:false, Public:true }, "EnableAngularMotor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Single, 
          $.Single
        ], []), 
      HingeConstraint_EnableAngularMotor
    );

    $.Method({Static:false, Public:true }, "get_AFrame", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      HingeConstraint_get_AFrame
    );

    $.Method({Static:false, Public:true }, "get_AngularOnly", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      HingeConstraint_get_AngularOnly
    );

    $.Method({Static:false, Public:true }, "get_BFrame", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      HingeConstraint_get_BFrame
    );

    $.Method({Static:false, Public:true }, "get_EnableMotor", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      HingeConstraint_get_EnableMotor
    );

    $.Method({Static:false, Public:true }, "get_GetLowerLimit", 
      new JSIL.MethodSignature($.Single, [], []), 
      HingeConstraint_get_GetLowerLimit
    );

    $.Method({Static:false, Public:true }, "get_GetUpperLimit", 
      new JSIL.MethodSignature($.Single, [], []), 
      HingeConstraint_get_GetUpperLimit
    );

    $.Method({Static:false, Public:true }, "get_MaxMotorImpulse", 
      new JSIL.MethodSignature($.Single, [], []), 
      HingeConstraint_get_MaxMotorImpulse
    );

    $.Method({Static:false, Public:true }, "get_MotorTargetVelocity", 
      new JSIL.MethodSignature($.Single, [], []), 
      HingeConstraint_get_MotorTargetVelocity
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyA", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.RigidBody"), [], []), 
      HingeConstraint_get_RigidBodyA
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyB", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.RigidBody"), [], []), 
      HingeConstraint_get_RigidBodyB
    );

    $.Method({Static:false, Public:true }, "get_SolverLimit", 
      new JSIL.MethodSignature($.Int32, [], []), 
      HingeConstraint_get_SolverLimit
    );

    $.Method({Static:false, Public:true }, "GetHingeAngle", 
      new JSIL.MethodSignature($.Single, [], []), 
      HingeConstraint_GetHingeAngle$00
    );

    $.Method({Static:false, Public:true }, "GetHingeAngle", 
      new JSIL.MethodSignature($.Single, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4")], []), 
      HingeConstraint_GetHingeAngle$01
    );

    $.Method({Static:false, Public:true }, "GetUid", 
      new JSIL.MethodSignature($.Int32, [], []), 
      HingeConstraint_GetUid
    );

    $.Method({Static:false, Public:true }, "set_AngularOnly", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      HingeConstraint_set_AngularOnly
    );

    $.Method({Static:false, Public:true }, "set_EnableMotor", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      HingeConstraint_set_EnableMotor
    );

    $.Method({Static:false, Public:true }, "set_MaxMotorImpulse", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      HingeConstraint_set_MaxMotorImpulse
    );

    $.Method({Static:false, Public:true }, "SetAxis", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      HingeConstraint_SetAxis
    );

    $.Method({Static:false, Public:true }, "SetLimit", 
      new JSIL.MethodSignature(null, [
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single
        ], []), 
      HingeConstraint_SetLimit
    );

    $.Method({Static:false, Public:true }, "SetMotorTarget", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.Quaternion"), $.Single], []), 
      HingeConstraint_SetMotorTarget$02
    );

    $.Method({Static:false, Public:true }, "SetMotorTarget", 
      new JSIL.MethodSignature(null, [$.Single, $.Single], []), 
      HingeConstraint_SetMotorTarget$03
    );

    $.Field({Static:false, Public:false}, "_iHConstraintImp", $asm01.TypeRef("Fusee.Engine.IHingeConstraintImp")); 
    $.Property({Static:false, Public:true }, "AngularOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "EnableMotor", $.Boolean);

    $.Property({Static:false, Public:true }, "MaxMotorImpulse", $.Single);

    $.Property({Static:false, Public:true }, "MotorTargetVelocity", $.Single);

    $.Property({Static:false, Public:true }, "AFrame", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "BFrame", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "SolverLimit", $.Int32);

    $.Property({Static:false, Public:true }, "GetLowerLimit", $.Single);

    $.Property({Static:false, Public:true }, "GetUpperLimit", $.Single);

    $.Property({Static:false, Public:true }, "RigidBodyA", $asm02.TypeRef("Fusee.Engine.RigidBody"));

    $.Property({Static:false, Public:true }, "RigidBodyB", $asm02.TypeRef("Fusee.Engine.RigidBody"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.NamespaceDoc */ 

(function NamespaceDoc$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Fusee.Engine.NamespaceDoc", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.ImpFactory */ 

(function ImpFactory$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Fusee.Engine.ImpFactory", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "CreateIAudioImp", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IAudioImp"), [], [])
    )
      .Attribute($asm0F.TypeRef("JSIL.Meta.JSExternal"));

    $.ExternalMethod({Static:true , Public:true }, "CreateIDynamicWorldImp", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IDynamicWorldImp"), [], [])
    )
      .Attribute($asm0F.TypeRef("JSIL.Meta.JSExternal"));

    $.ExternalMethod({Static:true , Public:true }, "CreateIInputDriverImp", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IInputDriverImp"), [], [])
    )
      .Attribute($asm0F.TypeRef("JSIL.Meta.JSExternal"));

    $.ExternalMethod({Static:true , Public:true }, "CreateIInputImp", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IInputImp"), [$asm01.TypeRef("Fusee.Engine.IRenderCanvasImp")], [])
    )
      .Attribute($asm0F.TypeRef("JSIL.Meta.JSExternal"));

    $.ExternalMethod({Static:true , Public:true }, "CreateINetworkImp", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.INetworkImp"), [], [])
    )
      .Attribute($asm0F.TypeRef("JSIL.Meta.JSExternal"));

    $.ExternalMethod({Static:true , Public:true }, "CreateIRenderCanvasImp", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IRenderCanvasImp"), [], [])
    )
      .Attribute($asm0F.TypeRef("JSIL.Meta.JSExternal"));

    $.ExternalMethod({Static:true , Public:true }, "CreateIRenderContextImp", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IRenderContextImp"), [$asm01.TypeRef("Fusee.Engine.IRenderCanvasImp")], [])
    )
      .Attribute($asm0F.TypeRef("JSIL.Meta.JSExternal"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Fusee.Engine.DeviceCategory */ 

JSIL.MakeEnum(
  "Fusee.Engine.DeviceCategory", true, {
    Mouse: 0, 
    Keyboard: 1, 
    GameController: 2, 
    Touch: 3, 
    Kinect: 4
  }, false
);

/* enum Fusee.Engine.ControllerButton */ 

JSIL.MakeEnum(
  "Fusee.Engine.ControllerButton", true, {
    A: 0, 
    B: 1, 
    C: 2, 
    D: 3, 
    E: 4, 
    R1: 5, 
    R2: 6, 
    L1: 7, 
    L2: 8, 
    FirstUserButton: 9
  }, false
);

/* class Fusee.Engine.Input */ 

(function Input$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Collections.ObjectModel.Collection$b1.Of($asm02.Fusee.Engine.InputDevice))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.EventHandler$b1.Of($asm01.Fusee.Engine.MouseEventArgs))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Delegate)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Threading.Interlocked)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Fusee.Engine.MouseEventArgs)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0B.System.Collections.Generic.HashSet$b1.Of($asm07.System.Int32))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Fusee.Engine.IInputImp)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Fusee.Engine.InputAxis)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.Exception)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm02.Fusee.Engine.InputDevice)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.Void)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.System.Collections.Generic.List$b1.Of($asm01.Fusee.Engine.IInputDeviceImp))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.Fusee.Engine.IInputDriverImp)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm01.Fusee.Engine.IInputDeviceImp)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.Fusee.Engine.MouseButtons)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.Fusee.Engine.KeyCodes)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.Fusee.Engine.KeyEventArgs)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.Fusee.Engine.Point)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm07.System.EventHandler$b1.Of($asm01.Fusee.Engine.KeyEventArgs))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm02.TypeRef("Fusee.Engine.InputDevice")]), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.InputDevice"), [$asm07.TypeRef("System.Int32")], []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.InputDevice")], []))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.TypeRef("Fusee.Engine.InputDevice"), [$asm01.TypeRef("Fusee.Engine.IInputDeviceImp")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm0B.TypeRef("System.Collections.Generic.HashSet`1", [$asm07.TypeRef("System.Int32")]), []))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.IInputImp.get_CursorVisible)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.IInputImp.GetMousePos)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.IInputDriverImp.DeviceImps)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.IInputImp.GetMouseWheelPos)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.IInputImp.SetMouseToCenter)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.Fusee.Engine.IInputImp.set_CursorVisible)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm01.Fusee.Engine.IInputImp.add_KeyDown)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm01.Fusee.Engine.IInputImp.add_KeyUp)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm01.Fusee.Engine.IInputImp.add_MouseButtonDown)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm01.Fusee.Engine.IInputImp.add_MouseButtonUp)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm01.Fusee.Engine.IInputImp.add_MouseMove)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm01.Fusee.Engine.IInputImp.SetMousePos)) ();
  };

  function Input__ctor () {
    this.Devices = $S00().Construct();
  };

  function Input_add_OnMouseButtonDown (value) {
    var eventHandler = this.OnMouseButtonDown;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Combine(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "OnMouseButtonDown"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Input_add_OnMouseButtonUp (value) {
    var eventHandler = this.OnMouseButtonUp;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Combine(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "OnMouseButtonUp"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Input_add_OnMouseMove (value) {
    var eventHandler = this.OnMouseMove;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Combine(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "OnMouseMove"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Input_ButtonDown (sender, mea) {
    if (this.OnMouseButtonDown !== null) {
      this.OnMouseButtonDown(this, mea);
    }
    if (!this._buttonsPressed.Contains(mea.MouseEventArgs$Button$value.valueOf())) {
      this._buttonsPressed.Add(mea.MouseEventArgs$Button$value.valueOf());
    }
  };

  function Input_ButtonUp (sender, mea) {
    if (this.OnMouseButtonUp !== null) {
      this.OnMouseButtonUp(this, mea);
    }
    if (this._buttonsPressed.Contains(mea.MouseEventArgs$Button$value.valueOf())) {
      this._buttonsPressed.Remove(mea.MouseEventArgs$Button$value.valueOf());
    }
  };

  function Input_CountDevices () {
    return this.Devices.get_Count();
  };

  function Input_get_CursorVisible () {
    return $IM00().Call(this._inputImp, null);
  };

  function Input_get_FixMouseAtCenter () {
    return this.Input$FixMouseAtCenter$value;
  };

  function Input_get_Instance () {
    var arg_15_0 = null;
    if ((arg_15_0 = $thisType._instance) === null) {
      arg_15_0 = ($thisType._instance = new $thisType());
    }
    return arg_15_0;
  };

  function Input_GetAxis (axis) {
    return +this._axes[axis.valueOf()];
  };

  function Input_GetDevice (deviceIndex, $exception) {
    try {
      var result = $S01().CallVirtual("get_Item", null, this.Devices, deviceIndex);
    } catch ($exception) {
      if ($T0C().$Is($exception)) {
        throw $S02().Construct(JSIL.ConcatString("Can not find Input Device with Device-Index ", deviceIndex, "!"));
      } else {
        throw $exception;
      }
    }
    return result;
  };

  function Input_GetMousePos () {
    return $IM01().Call(this._inputImp, null);
  };

  function Input_InitializeDevices () {
    var $temp00;
    var tmp = $IM02().Call(this._inputDriverImp, null);

    for (var a$0 = tmp._items, i$0 = 0, l$0 = tmp._size; i$0 < l$0; ($temp00 = i$0, 
        i$0 = ((i$0 + 1) | 0), 
        $temp00)) {
      var inputDevice = a$0[i$0];
      $S03().CallVirtual("Add", null, this.Devices, $S04().Construct(inputDevice));
    }
  };

  function Input_IsButton (button) {
    return this._buttonsPressed.Contains(button.valueOf());
  };

  function Input_IsKey (key) {
    return this._keys.Contains(key.valueOf());
  };

  function Input_IsKeyDown (key) {
    return this._keysDown.Contains(key.valueOf());
  };

  function Input_IsKeyUp (key) {
    return this._keysUp.Contains(key.valueOf());
  };

  function Input_KeyDown (sender, kea) {
    if (!this._keys.Contains(kea.KeyEventArgs$KeyCode$value.valueOf())) {
      this._keys.Add(kea.KeyEventArgs$KeyCode$value.valueOf());
      if (!this._keysDown.Contains(kea.KeyEventArgs$KeyCode$value.valueOf())) {
        this._keysDown.Add(kea.KeyEventArgs$KeyCode$value.valueOf());
      }
    }
  };

  function Input_KeyUp (sender, kea) {
    if (this._keys.Contains(kea.KeyEventArgs$KeyCode$value.valueOf())) {
      this._keys.Remove(kea.KeyEventArgs$KeyCode$value.valueOf());
    }
    if (!this._keysUp.Contains(kea.KeyEventArgs$KeyCode$value.valueOf())) {
      this._keysUp.Add(kea.KeyEventArgs$KeyCode$value.valueOf());
    }
  };

  function Input_MouseMove (sender, mea) {
    if (this.OnMouseMove !== null) {
      this.OnMouseMove(this, mea);
    }
  };

  function Input_OnLateUpdate () {
    this._keysDown.Clear();
    this._keysUp.Clear();
  };

  function Input_OnUpdateFrame () {
    var p = $IM01().Call(this._inputImp, null).MemberwiseClone();
    var currX = +$T16().$Cast(p.x);
    var currY = +$T16().$Cast(p.y);
    var currR = +$T16().$Cast($IM03().Call(this._inputImp, null));
    this._axes[1] = +((currX - this._axesPreviousAbsolute[1]) * 0.005);
    this._axes[2] = +((currY - this._axesPreviousAbsolute[2]) * 0.005);
    this._axes[3] = +((currR - this._axesPreviousAbsolute[3]) * 0.005);
    if (this.Input$FixMouseAtCenter$value) {
      p = $IM04().Call(this._inputImp, null).MemberwiseClone();
      currX = +$T16().$Cast(p.x);
      currY = +$T16().$Cast(p.y);
    }
    this._axesPreviousAbsolute[1] = +currX;
    this._axesPreviousAbsolute[2] = +currY;
    this._axesPreviousAbsolute[3] = +currR;
  };

  function Input_remove_OnMouseButtonDown (value) {
    var eventHandler = this.OnMouseButtonDown;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Remove(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "OnMouseButtonDown"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Input_remove_OnMouseButtonUp (value) {
    var eventHandler = this.OnMouseButtonUp;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Remove(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "OnMouseButtonUp"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Input_remove_OnMouseMove (value) {
    var eventHandler = this.OnMouseMove;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T02().Remove(eventHandler2, value);
      eventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "OnMouseMove"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function Input_set_CursorVisible (value) {
    $IM05().Call(this._inputImp, null, value);
  };

  function Input_set_FixMouseAtCenter (value) {
    this.Input$FixMouseAtCenter$value = value;
  };

  function Input_set_InputDriverImp (value) {
    this._inputDriverImp = value;
  };

  function Input_set_InputImp (value) {
    this._inputImp = value;
    $IM06().Call(this._inputImp, null, $T18().New(this, $thisType.prototype.KeyDown));
    $IM07().Call(this._inputImp, null, $T18().New(this, $thisType.prototype.KeyUp));
    $IM08().Call(this._inputImp, null, $T01().New(this, $thisType.prototype.ButtonDown));
    $IM09().Call(this._inputImp, null, $T01().New(this, $thisType.prototype.ButtonUp));
    $IM0A().Call(this._inputImp, null, $T01().New(this, $thisType.prototype.MouseMove));
    this._axes = JSIL.Array.New($T16(), 4);
    this._axesPreviousAbsolute = JSIL.Array.New($T16(), 4);
    this._keys = $S05().Construct();
    this._keysUp = $S05().Construct();
    this._keysDown = $S05().Construct();
    this._buttonsPressed = $S05().Construct();
  };

  function Input_SetMousePos (pos) {
    $IM0B().Call(this._inputImp, null, pos);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Input", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      Input__ctor
    );

    $.Method({Static:false, Public:true }, "add_OnMouseButtonDown", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.MouseEventArgs")])], []), 
      Input_add_OnMouseButtonDown
    );

    $.Method({Static:false, Public:true }, "add_OnMouseButtonUp", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.MouseEventArgs")])], []), 
      Input_add_OnMouseButtonUp
    );

    $.Method({Static:false, Public:true }, "add_OnMouseMove", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.MouseEventArgs")])], []), 
      Input_add_OnMouseMove
    );

    $.Method({Static:false, Public:false}, "ButtonDown", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("Fusee.Engine.MouseEventArgs")], []), 
      Input_ButtonDown
    );

    $.Method({Static:false, Public:false}, "ButtonUp", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("Fusee.Engine.MouseEventArgs")], []), 
      Input_ButtonUp
    );

    $.Method({Static:false, Public:true }, "CountDevices", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Input_CountDevices
    );

    $.Method({Static:false, Public:true }, "get_CursorVisible", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      Input_get_CursorVisible
    );

    $.Method({Static:false, Public:true }, "get_FixMouseAtCenter", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      Input_get_FixMouseAtCenter
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:true , Public:true }, "get_Instance", 
      new JSIL.MethodSignature($.Type, [], []), 
      Input_get_Instance
    );

    $.Method({Static:false, Public:true }, "GetAxis", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("Fusee.Engine.InputAxis")], []), 
      Input_GetAxis
    );

    $.Method({Static:false, Public:true }, "GetDevice", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.InputDevice"), [$.Int32], []), 
      Input_GetDevice
    );

    $.Method({Static:false, Public:true }, "GetMousePos", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.Point"), [], []), 
      Input_GetMousePos
    );

    $.Method({Static:false, Public:true }, "InitializeDevices", 
      new JSIL.MethodSignature(null, [], []), 
      Input_InitializeDevices
    );

    $.Method({Static:false, Public:true }, "IsButton", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Fusee.Engine.MouseButtons")], []), 
      Input_IsButton
    );

    $.Method({Static:false, Public:true }, "IsKey", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Fusee.Engine.KeyCodes")], []), 
      Input_IsKey
    );

    $.Method({Static:false, Public:true }, "IsKeyDown", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Fusee.Engine.KeyCodes")], []), 
      Input_IsKeyDown
    );

    $.Method({Static:false, Public:true }, "IsKeyUp", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("Fusee.Engine.KeyCodes")], []), 
      Input_IsKeyUp
    );

    $.Method({Static:false, Public:false}, "KeyDown", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("Fusee.Engine.KeyEventArgs")], []), 
      Input_KeyDown
    );

    $.Method({Static:false, Public:false}, "KeyUp", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("Fusee.Engine.KeyEventArgs")], []), 
      Input_KeyUp
    );

    $.Method({Static:false, Public:false}, "MouseMove", 
      new JSIL.MethodSignature(null, [$.Object, $asm01.TypeRef("Fusee.Engine.MouseEventArgs")], []), 
      Input_MouseMove
    );

    $.Method({Static:false, Public:false}, "OnLateUpdate", 
      new JSIL.MethodSignature(null, [], []), 
      Input_OnLateUpdate
    );

    $.Method({Static:false, Public:false}, "OnUpdateFrame", 
      new JSIL.MethodSignature(null, [], []), 
      Input_OnUpdateFrame
    );

    $.Method({Static:false, Public:true }, "remove_OnMouseButtonDown", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.MouseEventArgs")])], []), 
      Input_remove_OnMouseButtonDown
    );

    $.Method({Static:false, Public:true }, "remove_OnMouseButtonUp", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.MouseEventArgs")])], []), 
      Input_remove_OnMouseButtonUp
    );

    $.Method({Static:false, Public:true }, "remove_OnMouseMove", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.MouseEventArgs")])], []), 
      Input_remove_OnMouseMove
    );

    $.Method({Static:false, Public:true }, "set_CursorVisible", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      Input_set_CursorVisible
    );

    $.Method({Static:false, Public:true }, "set_FixMouseAtCenter", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      Input_set_FixMouseAtCenter
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_InputDriverImp", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IInputDriverImp")], []), 
      Input_set_InputDriverImp
    );

    $.Method({Static:false, Public:false}, "set_InputImp", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IInputImp")], []), 
      Input_set_InputImp
    );

    $.Method({Static:false, Public:true }, "SetMousePos", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.Point")], []), 
      Input_SetMousePos
    );

    $.Field({Static:true , Public:false}, "_instance", $.Type); 
    $.Field({Static:false, Public:false}, "_inputImp", $asm01.TypeRef("Fusee.Engine.IInputImp")); 
    $.Field({Static:false, Public:false}, "OnMouseButtonDown", $asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.MouseEventArgs")])); 
    $.Field({Static:false, Public:false}, "OnMouseButtonUp", $asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.MouseEventArgs")])); 
    $.Field({Static:false, Public:false}, "OnMouseMove", $asm07.TypeRef("System.EventHandler`1", [$asm01.TypeRef("Fusee.Engine.MouseEventArgs")])); 
    $.Field({Static:false, Public:false}, "_axes", $jsilcore.TypeRef("System.Array", [$.Single])); 
    $.Field({Static:false, Public:false}, "_axesPreviousAbsolute", $jsilcore.TypeRef("System.Array", [$.Single])); 
    $.Field({Static:false, Public:false}, "_keys", $asm0B.TypeRef("System.Collections.Generic.HashSet`1", [$.Int32])); 
    $.Field({Static:false, Public:false}, "_keysUp", $asm0B.TypeRef("System.Collections.Generic.HashSet`1", [$.Int32])); 
    $.Field({Static:false, Public:false}, "_keysDown", $asm0B.TypeRef("System.Collections.Generic.HashSet`1", [$.Int32])); 
    $.Field({Static:false, Public:false}, "_buttonsPressed", $asm0B.TypeRef("System.Collections.Generic.HashSet`1", [$.Int32])); 
    $.Field({Static:false, Public:true }, "Devices", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm02.TypeRef("Fusee.Engine.InputDevice")])); 
    $.Field({Static:false, Public:false}, "_inputDriverImp", $asm01.TypeRef("Fusee.Engine.IInputDriverImp")); 
    $.Field({Static:false, Public:false}, "Input$FixMouseAtCenter$value", $.Boolean)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:false}, "InputImp", $asm01.TypeRef("Fusee.Engine.IInputImp"));

    $.Property({Static:false, Public:true }, "FixMouseAtCenter", $.Boolean);

    $.Property({Static:false, Public:true }, "CursorVisible", $.Boolean);

    $.Property({Static:true , Public:true }, "Instance", $.Type);

    $.Property({Static:false, Public:false}, "InputDriverImp", $asm01.TypeRef("Fusee.Engine.IInputDriverImp"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.InputDevice */ 

(function InputDevice$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Fusee.Engine.IInputDeviceImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.Fusee.Engine.InputDevice_Axis)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.IInputDeviceImp.GetXAxis)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.IInputDeviceImp.GetYAxis)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.IInputDeviceImp.GetZAxis)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.IInputDeviceImp.GetButtonCount)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.IInputDeviceImp.GetCategory)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.Fusee.Engine.IInputDeviceImp.GetPressedButton)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm01.Fusee.Engine.IInputDeviceImp.IsButtonDown)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm01.Fusee.Engine.IInputDeviceImp.IsButtonPressed)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm01.Fusee.Engine.IInputDeviceImp.GetName)) ();
  };

  function InputDevice__ctor$00 (inputDeviceImp) {
    this._inputDeviceImp = inputDeviceImp;
  };

  function InputDevice__ctor$01 () {
  };

  function InputDevice_GetAxis (axis) {
    switch (axis.valueOf()) {
      case 0: 
        var result = +$IM00().Call(this._inputDeviceImp, null);
        break;

      case 1: 
        result = +$IM01().Call(this._inputDeviceImp, null);
        break;

      case 2: 
        result = +$IM02().Call(this._inputDeviceImp, null);
        break;

      default: 
        result = +0;
        break;

    }
    return +result;
  };

  function InputDevice_GetButtonCount () {
    return $IM03().Call(this._inputDeviceImp, null);
  };

  function InputDevice_GetCategory () {
    return $IM04().Call(this._inputDeviceImp, null);
  };

  function InputDevice_GetPressedButton () {
    return $IM05().Call(this._inputDeviceImp, null);
  };

  function InputDevice_IsButtonDown (buttonIndex) {
    return $IM06().Call(this._inputDeviceImp, null, buttonIndex);
  };

  function InputDevice_IsButtonPressed (buttonIndex) {
    return $IM07().Call(this._inputDeviceImp, null, buttonIndex);
  };

  function InputDevice_Name () {
    return $IM08().Call(this._inputDeviceImp, null);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.InputDevice", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IInputDeviceImp")], []), 
      InputDevice__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      InputDevice__ctor$01
    );

    $.Method({Static:false, Public:true }, "GetAxis", 
      new JSIL.MethodSignature($.Single, [$asm02.TypeRef("Fusee.Engine.InputDevice/Axis")], []), 
      InputDevice_GetAxis
    );

    $.Method({Static:false, Public:true }, "GetButtonCount", 
      new JSIL.MethodSignature($.Int32, [], []), 
      InputDevice_GetButtonCount
    );

    $.Method({Static:false, Public:true }, "GetCategory", 
      new JSIL.MethodSignature($.String, [], []), 
      InputDevice_GetCategory
    );

    $.Method({Static:false, Public:true }, "GetPressedButton", 
      new JSIL.MethodSignature($.Int32, [], []), 
      InputDevice_GetPressedButton
    );

    $.Method({Static:false, Public:true }, "IsButtonDown", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], []), 
      InputDevice_IsButtonDown
    );

    $.Method({Static:false, Public:true }, "IsButtonPressed", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], []), 
      InputDevice_IsButtonPressed
    );

    $.Method({Static:false, Public:true }, "Name", 
      new JSIL.MethodSignature($.String, [], []), 
      InputDevice_Name
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_inputDeviceImp", $asm01.TypeRef("Fusee.Engine.IInputDeviceImp")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Fusee.Engine.InputDevice/Axis */ 

JSIL.MakeEnum(
  "Fusee.Engine.InputDevice/Axis", false, {
    Horizontal: 0, 
    Vertical: 1, 
    Z: 2
  }, false
);

/* class Fusee.Engine.MeshReader */ 

(function MeshReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm07.System.Char))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0B.System.Linq.Enumerable)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Char)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.IO.StreamReader)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Fusee.Engine.Geometry)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.Fusee.Engine.Mesh)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.IO.TextReader)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm07.System.String))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Fusee.Math.double2)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.Fusee.Math.double3)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.System.Void)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize(System.Array.Of($asm07.System.Int32))) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm07.System.FormatException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm07.TypeRef("System.Func`2", ["!!0", $asm07.TypeRef("System.Boolean")])], ["TSource"]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.IO.StreamReader"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Math.double2"), [$asm07.TypeRef("System.Double"), $asm07.TypeRef("System.Double")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Math.double3"), [
        $asm07.TypeRef("System.Double"), $asm07.TypeRef("System.Double"), 
        $asm07.TypeRef("System.Double")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.FormatException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };

  function MeshReader_FilteredSplit (strIn, separator) {
    return $T02().ToArray$b1($T00())($S00().CallStatic($T02(), "Where$b1", [$asm07.System.String], JSIL.SplitString(strIn, separator), function (str) {
          return (str.length > 0);
        }));
  };

  function MeshReader_LoadMesh (path) {
    var obj = $S01().Construct(path);
    try {
      var geo = $thisType.ReadWavefrontObj(obj);
      var result = geo.ToMesh();
    } finally {
      if (obj !== null) {
        $IM00().Call(obj, null);
      }
    }
    return result;
  };

  function MeshReader_ReadWavefrontObj (tr) {
    var g = new ($T05())();
    var nFaceRefs = 0;
    var lineNumber = 1;
    var line = tr.ReadLine();

    while (line !== null) {
      if (!(System.String.StartsWith(line, "#"))) {
        if (System.String.StartsWith(line, "vt")) {
          var tmp = (line.substr(3));
          var values = $thisType.FilteredSplit(tmp, null);
          g.AddTexCoord($S02().Construct($thisType.Double_Parse(values[0]), $thisType.Double_Parse(values[1])));
        } else if (System.String.StartsWith(line, "vn")) {
          tmp = (line.substr(3));
          values = $thisType.FilteredSplit(tmp, null);
          g.AddNormal($S03().Construct($thisType.Double_Parse(values[0]), $thisType.Double_Parse(values[1]), -$thisType.Double_Parse(values[2])));
        } else if (System.String.StartsWith(line, "v")) {
          tmp = (line.substr(2));
          values = $thisType.FilteredSplit(tmp, null);
          g.AddVertex($S03().Construct($thisType.Double_Parse(values[0]), $thisType.Double_Parse(values[1]), -$thisType.Double_Parse(values[2])));
        } else if (System.String.StartsWith(line, "f")) {
          tmp = (line.substr(2));
          values = $thisType.FilteredSplit(tmp, null);
          if (!((3 <= values.length) && (values.length < 256))) {
            throw $S04().Construct(JSIL.ConcatString.apply(null, JSIL.Array.New($T0F(), ["Error reading obj file (", lineNumber, "). Face definition number of vertices must be within [3..", 256, "]."])));
          }
          var vI = JSIL.Array.New($T09(), values.length);
          var nI = null;
          var tI = null;
          var i = 0;
          var array = values;

          for (var j = 0; j < array.length; j = ((j + 1) | 0)) {
            var vRef = array[j];
            var vDef = (JSIL.SplitString(vRef, JSIL.Array.New($T03(), ["/"])));
            if (nFaceRefs === 0) {
              if (!((1 <= vDef.length) && (vDef.length <= 3))) {
                throw $S04().Construct(JSIL.ConcatString("Error reading obj file (", lineNumber, "). Face definitions must contain 1, 2 or 3 indices per vertex"));
              }
              nFaceRefs = vDef.length;
            } else if (vDef.length !== nFaceRefs) {
              throw $S04().Construct(JSIL.ConcatString("Error reading obj file (", lineNumber, "). Inconsistent face definitions"));
            }
            vI[i] = (($T09().Parse(vDef[0]) - 1) | 0);
            if (!((vDef.length <= 1) || $T00().IsNullOrEmpty(vDef[1]))) {
              if (tI === null) {
                tI = JSIL.Array.New($T09(), values.length);
              }
              tI[i] = (($T09().Parse(vDef[1]) - 1) | 0);
            }
            if (vDef.length > 2) {
              if ($T00().IsNullOrEmpty(vDef[1])) {
                throw $S05().Construct(JSIL.ConcatString("Error reading obj file (", lineNumber, "). Syntax error in face definition"));
              }
              if (nI === null) {
                nI = JSIL.Array.New($T09(), values.length);
              }
              nI[i] = (($T09().Parse(vDef[2]) - 1) | 0);
            }
            i = ((i + 1) | 0);
          }
          g.AddFace(vI, tI, nI);
        } else if (!(System.String.StartsWith(line, "mtllib"))) {
          if (System.String.StartsWith(line, "usemtl")) {
          }
        }
      }
      line = tr.ReadLine();
      lineNumber = ((lineNumber + 1) | 0);
    }
    if (!g.get_HasNormals()) {
      g.CreateNormals(1.396263111111111);
    }
    return g;
  };

  JSIL.MakeStaticClass("Fusee.Engine.MeshReader", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "Double_Parse", 
      new JSIL.MethodSignature($.Double, [$.String], [])
    )
      .Attribute($asm0F.TypeRef("JSIL.Meta.JSExternal"));

    $.Method({Static:true , Public:true }, "FilteredSplit", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String, $jsilcore.TypeRef("System.Array", [$.Char])], []), 
      MeshReader_FilteredSplit
    );

    $.Method({Static:true , Public:true }, "LoadMesh", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.Mesh"), [$.String], []), 
      MeshReader_LoadMesh
    );

    $.Method({Static:true , Public:true }, "ReadWavefrontObj", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.Geometry"), [$asm07.TypeRef("System.IO.TextReader")], []), 
      MeshReader_ReadWavefrontObj
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.MoreShaders */ 

(function MoreShaders$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Fusee.Engine.RenderContext)) ();
  };

  function MoreShaders_GetBumpDiffuseShader (rc) {
    return rc.CreateShader("\r\n            attribute vec3 fuVertex;\r\n            attribute vec3 fuNormal;\r\n            attribute vec2 fuUV;\r\n                  \r\n            varying vec3 vNormal;\r\n            varying vec2 vUV;\r\n            varying vec3 vViewPos;\r\n    \r\n            uniform mat4 FUSEE_MV; \r\n            uniform mat4 FUSEE_MVP;\r\n\r\n            uniform float FUSEE_L0_ACTIVE;\r\n            uniform float FUSEE_L1_ACTIVE;\r\n            uniform float FUSEE_L2_ACTIVE;\r\n            uniform float FUSEE_L3_ACTIVE;\r\n            uniform float FUSEE_L4_ACTIVE;\r\n            uniform float FUSEE_L5_ACTIVE;\r\n            uniform float FUSEE_L6_ACTIVE;\r\n            uniform float FUSEE_L7_ACTIVE;\r\n\r\n            void main()\r\n            {\r\n                gl_Position = FUSEE_MVP * vec4(fuVertex, 1.0);\r\n                vUV = fuUV;\r\n                vNormal = normalize(mat3(FUSEE_MV[0].xyz, FUSEE_MV[1].xyz, FUSEE_MV[2].xyz) * fuNormal);\r\n                vec4 vViewTemp = FUSEE_MV * vec4(fuVertex, 1);\r\n                vViewPos = vec3(vViewTemp)/vViewTemp.w;\r\n            }", "\r\n            /* Copies incoming fragment color without change. */\r\n            #ifdef GL_ES\r\n                precision highp float;\r\n            #endif\r\n\r\n            uniform mat4 FUSEE_V;\r\n            uniform mat4 FUSEE_MV;\r\n         \r\n            uniform sampler2D texture1;\r\n            uniform sampler2D normalTex;\r\n            uniform float shininess;\r\n            uniform float specularLevel;\r\n\r\n            uniform vec3 FUSEE_L0_POSITION;\r\n            uniform vec3 FUSEE_L1_POSITION;\r\n            uniform vec3 FUSEE_L2_POSITION;\r\n            uniform vec3 FUSEE_L3_POSITION;\r\n            uniform vec3 FUSEE_L4_POSITION;\r\n            uniform vec3 FUSEE_L5_POSITION;\r\n            uniform vec3 FUSEE_L6_POSITION;\r\n            uniform vec3 FUSEE_L7_POSITION;\r\n\r\n            uniform vec4 FUSEE_L0_DIFFUSE;\r\n            uniform vec4 FUSEE_L1_DIFFUSE;\r\n            uniform vec4 FUSEE_L2_DIFFUSE;\r\n            uniform vec4 FUSEE_L3_DIFFUSE;\r\n            uniform vec4 FUSEE_L4_DIFFUSE;\r\n            uniform vec4 FUSEE_L5_DIFFUSE;\r\n            uniform vec4 FUSEE_L6_DIFFUSE;\r\n            uniform vec4 FUSEE_L7_DIFFUSE;\r\n\r\n            uniform vec4 FUSEE_L0_AMBIENT;\r\n            uniform vec4 FUSEE_L1_AMBIENT;\r\n            uniform vec4 FUSEE_L2_AMBIENT;\r\n            uniform vec4 FUSEE_L3_AMBIENT;\r\n            uniform vec4 FUSEE_L4_AMBIENT;\r\n            uniform vec4 FUSEE_L5_AMBIENT;\r\n            uniform vec4 FUSEE_L6_AMBIENT;\r\n            uniform vec4 FUSEE_L7_AMBIENT;\r\n\r\n            uniform float FUSEE_L0_ACTIVE;\r\n            uniform float FUSEE_L1_ACTIVE;\r\n            uniform float FUSEE_L2_ACTIVE;\r\n            uniform float FUSEE_L3_ACTIVE;\r\n            uniform float FUSEE_L4_ACTIVE;\r\n            uniform float FUSEE_L5_ACTIVE;\r\n            uniform float FUSEE_L6_ACTIVE;\r\n            uniform float FUSEE_L7_ACTIVE;\r\n\r\n            uniform vec3 FUSEE_L0_DIRECTION;\r\n            uniform vec3 FUSEE_L1_DIRECTION;\r\n            uniform vec3 FUSEE_L2_DIRECTION;\r\n            uniform vec3 FUSEE_L3_DIRECTION;\r\n            uniform vec3 FUSEE_L4_DIRECTION;\r\n            uniform vec3 FUSEE_L5_DIRECTION;\r\n            uniform vec3 FUSEE_L6_DIRECTION;\r\n            uniform vec3 FUSEE_L7_DIRECTION;\r\n            \r\n            uniform vec4 FUSEE_L0_SPECULAR;\r\n            uniform vec4 FUSEE_L1_SPECULAR;\r\n            uniform vec4 FUSEE_L2_SPECULAR;\r\n            uniform vec4 FUSEE_L3_SPECULAR;\r\n            uniform vec4 FUSEE_L4_SPECULAR;\r\n            uniform vec4 FUSEE_L5_SPECULAR;\r\n            uniform vec4 FUSEE_L6_SPECULAR;\r\n            uniform vec4 FUSEE_L7_SPECULAR;\r\n\r\n            uniform float FUSEE_L0_SPOTANGLE;\r\n            uniform float FUSEE_L1_SPOTANGLE;\r\n            uniform float FUSEE_L2_SPOTANGLE;\r\n            uniform float FUSEE_L3_SPOTANGLE;\r\n            uniform float FUSEE_L4_SPOTANGLE;\r\n            uniform float FUSEE_L5_SPOTANGLE;\r\n            uniform float FUSEE_L6_SPOTANGLE;\r\n            uniform float FUSEE_L7_SPOTANGLE;\r\n    \r\n            varying vec3 vNormal;\r\n            varying vec2 vUV;\r\n            varying vec3 vViewPos;\r\n\r\n            void CalcDirectLight(vec4 difColor, vec4 ambColor, vec4 specColor, vec3 direction, inout vec4 intensity) {\r\n                float maxVariance = 100.0; //Parameter for Bump Intensity\r\n                float minVariance = maxVariance / 2.0;\r\n                vec3 bumpNormal = vNormal + normalize(texture2D(normalTex, vUV).rgb * maxVariance - minVariance);\r\n                intensity += ambColor;\r\n                intensity += max(dot(-normalize(direction),normalize(bumpNormal)),0.0) * difColor;\r\n\r\n                if(specularLevel != 0.0){\r\n                    vec3 lightVector = normalize(direction);\r\n                    vec3 r = normalize(reflect(lightVector, normalize(bumpNormal)));\r\n                    float s = pow(max(dot(r, vec3(0,0,1.0)), 0.0), specularLevel) * shininess;\r\n                    intensity += specColor * s;\r\n                }\r\n            }\r\n\r\n            void CalcPointLight(vec4 difColor, vec4 ambColor, vec4 specColor, vec3 position, inout vec4 intensity) {\r\n                float maxVariance = 100.0; //Parameter for Bump Intensity\r\n                float minVariance = maxVariance / 2.0;\r\n                vec3 bumpNormal = vNormal + normalize(texture2D(normalTex, vUV).rgb * maxVariance - minVariance);\r\n                intensity += ambColor;\r\n                vec3 pos = position - vViewPos;\r\n                intensity += max(dot(normalize(pos),normalize(bumpNormal)),0.0) * difColor;\r\n\r\n                if(specularLevel != 0.0){\r\n                    vec3 lightVector = normalize(-pos);  \r\n                    vec3 r = normalize(reflect(lightVector, normalize(bumpNormal)));\r\n                    float s = pow(max(dot(r, vec3(0,0,1.0)), 0.0), specularLevel) * shininess;\r\n                    intensity += specColor * s;\r\n                }\r\n            }\r\n\r\n            void CalcSpotLight(vec4 difColor, vec4 ambColor, vec4 specColor, vec3 position, vec3 direction, float angle, inout vec4 intensity){\r\n                float maxVariance = 100.0; //Parameter for Bump Intensity\r\n                float minVariance = maxVariance / 2.0;\r\n                vec3 bumpNormal = vNormal + normalize(texture2D(normalTex, vUV).rgb * maxVariance - minVariance);\r\n                intensity += ambColor;\r\n                vec3 pos = position - vViewPos;\r\n                float alpha = acos(dot(normalize(pos), normalize(-direction)));\r\n\r\n                if(alpha < angle){\r\n                    intensity += max(dot(normalize(pos),normalize(bumpNormal)),0.0) * difColor; \r\n                    if(specularLevel != 0.0){\r\n                        vec3 lightVector = normalize(-pos);  \r\n                        vec3 r = normalize(reflect(lightVector, normalize(bumpNormal)));\r\n                        float s = pow(max(dot(r, vec3(0,0,1.0)), 0.0), specularLevel) * shininess;\r\n                        intensity += specColor * s;\r\n                    }\r\n                }\r\n            }\r\n\r\n            void main()\r\n            {              \r\n                vec4 endIntensity = vec4(0, 0, 0, 0);\r\n                if(FUSEE_L0_ACTIVE != 0.0){\r\n                    if(FUSEE_L0_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L0_DIFFUSE, FUSEE_L0_AMBIENT, FUSEE_L0_SPECULAR, FUSEE_L0_DIRECTION, endIntensity);\r\n                    if(FUSEE_L0_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L0_DIFFUSE, FUSEE_L0_AMBIENT, FUSEE_L0_SPECULAR, FUSEE_L0_POSITION, endIntensity);\r\n                    if(FUSEE_L0_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L0_DIFFUSE, FUSEE_L0_AMBIENT, FUSEE_L0_SPECULAR, FUSEE_L0_POSITION, FUSEE_L0_DIRECTION, FUSEE_L0_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L1_ACTIVE != 0.0){\r\n                    if(FUSEE_L1_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L1_DIFFUSE, FUSEE_L1_AMBIENT, FUSEE_L1_SPECULAR, FUSEE_L1_DIRECTION, endIntensity);\r\n                    if(FUSEE_L1_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L1_DIFFUSE, FUSEE_L1_AMBIENT, FUSEE_L1_SPECULAR, FUSEE_L1_POSITION, endIntensity);\r\n                    if(FUSEE_L1_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L1_DIFFUSE, FUSEE_L1_AMBIENT, FUSEE_L1_SPECULAR, FUSEE_L1_POSITION, FUSEE_L1_DIRECTION, FUSEE_L1_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L2_ACTIVE != 0.0){\r\n                    if(FUSEE_L2_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L2_DIFFUSE, FUSEE_L2_AMBIENT, FUSEE_L2_SPECULAR, FUSEE_L2_DIRECTION, endIntensity);\r\n                    if(FUSEE_L2_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L2_DIFFUSE, FUSEE_L2_AMBIENT, FUSEE_L2_SPECULAR, FUSEE_L2_POSITION, endIntensity);\r\n                    if(FUSEE_L2_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L2_DIFFUSE, FUSEE_L2_AMBIENT, FUSEE_L2_SPECULAR, FUSEE_L2_POSITION, FUSEE_L2_DIRECTION, FUSEE_L2_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L3_ACTIVE != 0.0){\r\n                    if(FUSEE_L3_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L3_DIFFUSE, FUSEE_L3_AMBIENT, FUSEE_L3_SPECULAR, FUSEE_L3_DIRECTION, endIntensity);\r\n                    if(FUSEE_L3_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L3_DIFFUSE, FUSEE_L3_AMBIENT, FUSEE_L3_SPECULAR, FUSEE_L3_POSITION, endIntensity);\r\n                    if(FUSEE_L3_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L3_DIFFUSE, FUSEE_L3_AMBIENT, FUSEE_L3_SPECULAR, FUSEE_L3_POSITION, FUSEE_L3_DIRECTION, FUSEE_L3_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L4_ACTIVE != 0.0){\r\n                    if(FUSEE_L4_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L4_DIFFUSE, FUSEE_L4_AMBIENT, FUSEE_L4_SPECULAR, FUSEE_L4_DIRECTION, endIntensity);\r\n                    if(FUSEE_L4_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L4_DIFFUSE, FUSEE_L4_AMBIENT, FUSEE_L4_SPECULAR, FUSEE_L4_POSITION, endIntensity);\r\n                    if(FUSEE_L4_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L4_DIFFUSE, FUSEE_L4_AMBIENT, FUSEE_L4_SPECULAR, FUSEE_L4_POSITION, FUSEE_L4_DIRECTION, FUSEE_L4_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L5_ACTIVE != 0.0){\r\n                    if(FUSEE_L5_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L5_DIFFUSE, FUSEE_L5_AMBIENT, FUSEE_L5_SPECULAR, FUSEE_L5_DIRECTION, endIntensity);\r\n                    if(FUSEE_L5_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L5_DIFFUSE, FUSEE_L5_AMBIENT, FUSEE_L5_SPECULAR, FUSEE_L5_POSITION, endIntensity);\r\n                    if(FUSEE_L5_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L5_DIFFUSE, FUSEE_L5_AMBIENT, FUSEE_L5_SPECULAR, FUSEE_L5_POSITION, FUSEE_L5_DIRECTION, FUSEE_L5_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L6_ACTIVE != 0.0){\r\n                    if(FUSEE_L6_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L6_DIFFUSE, FUSEE_L6_AMBIENT, FUSEE_L6_SPECULAR, FUSEE_L6_DIRECTION, endIntensity);\r\n                    if(FUSEE_L6_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L6_DIFFUSE, FUSEE_L6_AMBIENT, FUSEE_L6_SPECULAR, FUSEE_L6_POSITION, endIntensity);\r\n                    if(FUSEE_L6_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L6_DIFFUSE, FUSEE_L6_AMBIENT, FUSEE_L6_SPECULAR, FUSEE_L6_POSITION, FUSEE_L6_DIRECTION, FUSEE_L6_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L7_ACTIVE != 0.0){\r\n                    if(FUSEE_L7_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L7_DIFFUSE, FUSEE_L7_AMBIENT, FUSEE_L7_SPECULAR, FUSEE_L7_DIRECTION, endIntensity);\r\n                    if(FUSEE_L7_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L7_DIFFUSE, FUSEE_L7_AMBIENT, FUSEE_L7_SPECULAR, FUSEE_L7_POSITION, endIntensity);\r\n                    if(FUSEE_L7_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L7_DIFFUSE, FUSEE_L7_AMBIENT, FUSEE_L7_SPECULAR, FUSEE_L7_POSITION, FUSEE_L7_DIRECTION, FUSEE_L7_SPOTANGLE, endIntensity);\r\n                }      \r\n\r\n                gl_FragColor = texture2D(texture1, vUV) * endIntensity; \r\n            }");
  };

  function MoreShaders_GetDiffuseColorShader (rc) {
    return rc.CreateShader("\r\n            attribute vec3 fuVertex;\r\n            attribute vec3 fuNormal;       \r\n        \r\n            varying vec3 vNormal;\r\n        \r\n            uniform mat4 FUSEE_MVP;\r\n            uniform mat4 FUSEE_ITMV;\r\n\r\n            void main()\r\n            {\r\n                gl_Position = FUSEE_MVP * vec4(fuVertex, 1.0);\r\n                vNormal = mat3(FUSEE_ITMV[0].xyz, FUSEE_ITMV[1].xyz, FUSEE_ITMV[2].xyz) * fuNormal;\r\n            }", "\r\n            #ifdef GL_ES\r\n                precision highp float;\r\n            #endif    \r\n  \r\n            uniform vec4 color;\r\n            varying vec3 vNormal;\r\n\r\n            void main()\r\n            {             \r\n                gl_FragColor = max(dot(vec3(0,0,-1),normalize(vNormal)), 0.1) * color;\r\n            }");
  };

  function MoreShaders_GetDiffuseTextureShader (rc) {
    return rc.CreateShader("\r\n            attribute vec4 fuColor;\r\n            attribute vec3 fuVertex;\r\n            attribute vec3 fuNormal;\r\n            attribute vec2 fuUV;\r\n       \r\n            uniform mat4 FUSEE_MVP;\r\n            uniform mat4 FUSEE_MV;\r\n\r\n            varying vec2 vUV;\r\n            varying vec3 vNormal;\r\n            varying vec3 vViewPos;\r\n\r\n            vec3 vPos;\r\n \r\n            void main()\r\n            {\r\n                vec4 vViewPosTemp = FUSEE_MV * vec4(fuVertex, 1);\r\n                vViewPos = vec3(vViewPosTemp)/vViewPosTemp.w;      \r\n                vUV = fuUV;\r\n                vNormal = normalize(mat3(FUSEE_MV[0].xyz, FUSEE_MV[1].xyz, FUSEE_MV[2].xyz) * fuNormal);\r\n                gl_Position = FUSEE_MVP * vec4(fuVertex, 1.0);\r\n            }", "\r\n            #ifdef GL_ES\r\n                precision highp float;\r\n            #endif\r\n\r\n            uniform sampler2D texture1;\r\n\r\n            uniform vec3 FUSEE_L0_POSITION;\r\n            uniform vec3 FUSEE_L1_POSITION;\r\n            uniform vec3 FUSEE_L2_POSITION;\r\n            uniform vec3 FUSEE_L3_POSITION;\r\n            uniform vec3 FUSEE_L4_POSITION;\r\n            uniform vec3 FUSEE_L5_POSITION;\r\n            uniform vec3 FUSEE_L6_POSITION;\r\n            uniform vec3 FUSEE_L7_POSITION;\r\n\r\n            uniform vec4 FUSEE_L0_DIFFUSE;\r\n            uniform vec4 FUSEE_L1_DIFFUSE;\r\n            uniform vec4 FUSEE_L2_DIFFUSE;\r\n            uniform vec4 FUSEE_L3_DIFFUSE;\r\n            uniform vec4 FUSEE_L4_DIFFUSE;\r\n            uniform vec4 FUSEE_L5_DIFFUSE;\r\n            uniform vec4 FUSEE_L6_DIFFUSE;\r\n            uniform vec4 FUSEE_L7_DIFFUSE;\r\n\r\n            uniform vec4 FUSEE_L0_AMBIENT;\r\n            uniform vec4 FUSEE_L1_AMBIENT;\r\n            uniform vec4 FUSEE_L2_AMBIENT;\r\n            uniform vec4 FUSEE_L3_AMBIENT;\r\n            uniform vec4 FUSEE_L4_AMBIENT;\r\n            uniform vec4 FUSEE_L5_AMBIENT;\r\n            uniform vec4 FUSEE_L6_AMBIENT;\r\n            uniform vec4 FUSEE_L7_AMBIENT;\r\n\r\n            uniform float FUSEE_L0_ACTIVE;\r\n            uniform float FUSEE_L1_ACTIVE;\r\n            uniform float FUSEE_L2_ACTIVE;\r\n            uniform float FUSEE_L3_ACTIVE;\r\n            uniform float FUSEE_L4_ACTIVE;\r\n            uniform float FUSEE_L5_ACTIVE;\r\n            uniform float FUSEE_L6_ACTIVE;\r\n            uniform float FUSEE_L7_ACTIVE;\r\n\r\n            uniform vec3 FUSEE_L0_DIRECTION;\r\n            uniform vec3 FUSEE_L1_DIRECTION;\r\n            uniform vec3 FUSEE_L2_DIRECTION;\r\n            uniform vec3 FUSEE_L3_DIRECTION;\r\n            uniform vec3 FUSEE_L4_DIRECTION;\r\n            uniform vec3 FUSEE_L5_DIRECTION;\r\n            uniform vec3 FUSEE_L6_DIRECTION;\r\n            uniform vec3 FUSEE_L7_DIRECTION;\r\n\r\n            uniform float FUSEE_L0_SPOTANGLE;\r\n            uniform float FUSEE_L1_SPOTANGLE;\r\n            uniform float FUSEE_L2_SPOTANGLE;\r\n            uniform float FUSEE_L3_SPOTANGLE;\r\n            uniform float FUSEE_L4_SPOTANGLE;\r\n            uniform float FUSEE_L5_SPOTANGLE;\r\n            uniform float FUSEE_L6_SPOTANGLE;\r\n            uniform float FUSEE_L7_SPOTANGLE;\r\n\r\n            uniform mat4 FUSEE_V;\r\n\r\n            varying vec3 vNormal;\r\n            varying vec2 vUV;\r\n            varying vec3 vViewPos;\r\n\r\n            void CalcDirectLight(vec4 difColor, vec4 ambColor, vec3 direction, inout vec4 intensity) {\r\n                intensity += ambColor;\r\n                intensity += max(dot(-normalize(direction),normalize(vNormal)),0.0) * difColor;\r\n            }\r\n\r\n            void CalcPointLight(vec4 difColor, vec4 ambColor, vec3 position, inout vec4 intensity) {\r\n                intensity += ambColor;\r\n                vec3 pos = position - vViewPos;\r\n                intensity += max(dot(normalize(pos),normalize(vNormal)),0.0) * difColor;   \r\n            }\r\n\r\n            void CalcSpotLight(vec4 difColor, vec4 ambColor, vec3 position, vec3 direction, float angle, inout vec4 intensity) {\r\n                intensity += ambColor;\r\n                vec3 pos = position - vViewPos;\r\n                float alpha = acos(dot(normalize(pos), normalize(-direction)));\r\n\r\n                if(alpha < angle){\r\n                    intensity += max(dot(normalize(pos),normalize(vNormal)),0.0) * difColor;  \r\n                }     \r\n            }\r\n \r\n            void main()\r\n            {\r\n                vec4 endIntensity = vec4(0,0,0,0);\r\n                if(FUSEE_L0_ACTIVE != 0.0){\r\n                    if(FUSEE_L0_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L0_DIFFUSE, FUSEE_L0_AMBIENT, FUSEE_L0_DIRECTION, endIntensity);\r\n                    if(FUSEE_L0_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L0_DIFFUSE, FUSEE_L0_AMBIENT, FUSEE_L0_POSITION, endIntensity);\r\n                    if(FUSEE_L0_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L0_DIFFUSE, FUSEE_L0_AMBIENT, FUSEE_L0_POSITION, FUSEE_L0_DIRECTION, FUSEE_L0_SPOTANGLE, endIntensity);\r\n                }  \r\n\r\n                if(FUSEE_L1_ACTIVE != 0.0){\r\n                    if(FUSEE_L1_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L1_DIFFUSE, FUSEE_L1_AMBIENT, FUSEE_L1_DIRECTION, endIntensity);\r\n                    if(FUSEE_L1_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L1_DIFFUSE, FUSEE_L1_AMBIENT, FUSEE_L1_POSITION, endIntensity);\r\n                    if(FUSEE_L1_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L1_DIFFUSE, FUSEE_L1_AMBIENT, FUSEE_L1_POSITION, FUSEE_L1_DIRECTION, FUSEE_L1_SPOTANGLE, endIntensity);\r\n                }  \r\n\r\n                if(FUSEE_L2_ACTIVE != 0.0){\r\n                    if(FUSEE_L2_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L2_DIFFUSE, FUSEE_L2_AMBIENT, FUSEE_L2_DIRECTION, endIntensity);\r\n                    if(FUSEE_L2_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L2_DIFFUSE, FUSEE_L2_AMBIENT, FUSEE_L2_POSITION, endIntensity);\r\n                    if(FUSEE_L2_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L2_DIFFUSE, FUSEE_L2_AMBIENT, FUSEE_L2_POSITION, FUSEE_L2_DIRECTION, FUSEE_L2_SPOTANGLE, endIntensity);\r\n                }  \r\n\r\n                if(FUSEE_L3_ACTIVE != 0.0){\r\n                    if(FUSEE_L3_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L3_DIFFUSE, FUSEE_L3_AMBIENT, FUSEE_L3_DIRECTION, endIntensity);\r\n                    if(FUSEE_L3_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L3_DIFFUSE, FUSEE_L3_AMBIENT, FUSEE_L3_POSITION, endIntensity);\r\n                    if(FUSEE_L3_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L3_DIFFUSE, FUSEE_L3_AMBIENT, FUSEE_L3_POSITION, FUSEE_L3_DIRECTION, FUSEE_L3_SPOTANGLE, endIntensity);\r\n                }  \r\n\r\n                if(FUSEE_L4_ACTIVE != 0.0){\r\n                    if(FUSEE_L4_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L4_DIFFUSE, FUSEE_L4_AMBIENT, FUSEE_L4_DIRECTION, endIntensity);\r\n                    if(FUSEE_L4_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L4_DIFFUSE, FUSEE_L4_AMBIENT, FUSEE_L4_POSITION, endIntensity);\r\n                    if(FUSEE_L4_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L4_DIFFUSE, FUSEE_L4_AMBIENT, FUSEE_L4_POSITION, FUSEE_L4_DIRECTION, FUSEE_L4_SPOTANGLE, endIntensity);\r\n                }  \r\n\r\n                if(FUSEE_L5_ACTIVE != 0.0){\r\n                    if(FUSEE_L5_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L5_DIFFUSE, FUSEE_L5_AMBIENT, FUSEE_L5_DIRECTION, endIntensity);\r\n                    if(FUSEE_L5_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L5_DIFFUSE, FUSEE_L5_AMBIENT, FUSEE_L5_POSITION, endIntensity);\r\n                    if(FUSEE_L5_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L5_DIFFUSE, FUSEE_L5_AMBIENT, FUSEE_L5_POSITION, FUSEE_L5_DIRECTION, FUSEE_L5_SPOTANGLE, endIntensity);\r\n                }  \r\n\r\n                if(FUSEE_L6_ACTIVE != 0.0){\r\n                    if(FUSEE_L6_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L6_DIFFUSE, FUSEE_L6_AMBIENT, FUSEE_L6_DIRECTION, endIntensity);\r\n                    if(FUSEE_L6_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L6_DIFFUSE, FUSEE_L6_AMBIENT, FUSEE_L6_POSITION, endIntensity);\r\n                    if(FUSEE_L6_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L6_DIFFUSE, FUSEE_L6_AMBIENT, FUSEE_L6_POSITION, FUSEE_L6_DIRECTION, FUSEE_L6_SPOTANGLE, endIntensity);\r\n                }  \r\n\r\n                if(FUSEE_L7_ACTIVE != 0.0){\r\n                    if(FUSEE_L7_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L7_DIFFUSE, FUSEE_L7_AMBIENT, FUSEE_L7_DIRECTION, endIntensity);\r\n                    if(FUSEE_L7_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L7_DIFFUSE, FUSEE_L7_AMBIENT, FUSEE_L7_POSITION, endIntensity);\r\n                    if(FUSEE_L7_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L7_DIFFUSE, FUSEE_L7_AMBIENT, FUSEE_L7_POSITION, FUSEE_L7_DIRECTION, FUSEE_L7_SPOTANGLE, endIntensity);\r\n                }  \r\n\r\n                gl_FragColor = texture2D(texture1, vUV) * endIntensity; \r\n            }");
  };

  function MoreShaders_GetSpecularShader (rc) {
    return rc.CreateShader("\r\n            attribute vec3 fuVertex;\r\n            attribute vec3 fuNormal;\r\n            attribute vec2 fuUV;\r\n                  \r\n            varying vec3 vNormal;\r\n            varying vec2 vUV;\r\n            varying vec3 vViewPos;\r\n\r\n            uniform mat4 FUSEE_MV; \r\n            uniform mat4 FUSEE_MVP;\r\n\r\n            uniform float FUSEE_L0_ACTIVE;\r\n            uniform float FUSEE_L1_ACTIVE;\r\n            uniform float FUSEE_L2_ACTIVE;\r\n            uniform float FUSEE_L3_ACTIVE;\r\n            uniform float FUSEE_L4_ACTIVE;\r\n            uniform float FUSEE_L5_ACTIVE;\r\n            uniform float FUSEE_L6_ACTIVE;\r\n            uniform float FUSEE_L7_ACTIVE;\r\n\r\n            void main()\r\n            {\r\n                gl_Position = FUSEE_MVP * vec4(fuVertex, 1.0);\r\n                vUV = fuUV;\r\n                vNormal = normalize(mat3(FUSEE_MV[0].xyz, FUSEE_MV[1].xyz, FUSEE_MV[2].xyz) * fuNormal);\r\n                vec4 vViewTemp = FUSEE_MV * vec4(fuVertex, 1);\r\n                vViewPos = vec3(vViewTemp)/vViewTemp.w;\r\n            }", "\r\n            /* Copies incoming fragment color without change. */\r\n            #ifdef GL_ES\r\n                precision highp float;\r\n            #endif\r\n         \r\n            uniform sampler2D texture1;\r\n            uniform float specularLevel;\r\n            uniform float shininess;\r\n\r\n            uniform vec3 FUSEE_L0_POSITION;\r\n            uniform vec3 FUSEE_L1_POSITION;\r\n            uniform vec3 FUSEE_L2_POSITION;\r\n            uniform vec3 FUSEE_L3_POSITION;\r\n            uniform vec3 FUSEE_L4_POSITION;\r\n            uniform vec3 FUSEE_L5_POSITION;\r\n            uniform vec3 FUSEE_L6_POSITION;\r\n            uniform vec3 FUSEE_L7_POSITION;\r\n\r\n            uniform vec4 FUSEE_L0_DIFFUSE;\r\n            uniform vec4 FUSEE_L1_DIFFUSE;\r\n            uniform vec4 FUSEE_L2_DIFFUSE;\r\n            uniform vec4 FUSEE_L3_DIFFUSE;\r\n            uniform vec4 FUSEE_L4_DIFFUSE;\r\n            uniform vec4 FUSEE_L5_DIFFUSE;\r\n            uniform vec4 FUSEE_L6_DIFFUSE;\r\n            uniform vec4 FUSEE_L7_DIFFUSE;\r\n\r\n            uniform vec4 FUSEE_L0_AMBIENT;\r\n            uniform vec4 FUSEE_L1_AMBIENT;\r\n            uniform vec4 FUSEE_L2_AMBIENT;\r\n            uniform vec4 FUSEE_L3_AMBIENT;\r\n            uniform vec4 FUSEE_L4_AMBIENT;\r\n            uniform vec4 FUSEE_L5_AMBIENT;\r\n            uniform vec4 FUSEE_L6_AMBIENT;\r\n            uniform vec4 FUSEE_L7_AMBIENT;\r\n\r\n            uniform float FUSEE_L0_ACTIVE;\r\n            uniform float FUSEE_L1_ACTIVE;\r\n            uniform float FUSEE_L2_ACTIVE;\r\n            uniform float FUSEE_L3_ACTIVE;\r\n            uniform float FUSEE_L4_ACTIVE;\r\n            uniform float FUSEE_L5_ACTIVE;\r\n            uniform float FUSEE_L6_ACTIVE;\r\n            uniform float FUSEE_L7_ACTIVE;\r\n\r\n            uniform vec3 FUSEE_L0_DIRECTION;\r\n            uniform vec3 FUSEE_L1_DIRECTION;\r\n            uniform vec3 FUSEE_L2_DIRECTION;\r\n            uniform vec3 FUSEE_L3_DIRECTION;\r\n            uniform vec3 FUSEE_L4_DIRECTION;\r\n            uniform vec3 FUSEE_L5_DIRECTION;\r\n            uniform vec3 FUSEE_L6_DIRECTION;\r\n            uniform vec3 FUSEE_L7_DIRECTION;\r\n            \r\n            uniform vec4 FUSEE_L0_SPECULAR;\r\n            uniform vec4 FUSEE_L1_SPECULAR;\r\n            uniform vec4 FUSEE_L2_SPECULAR;\r\n            uniform vec4 FUSEE_L3_SPECULAR;\r\n            uniform vec4 FUSEE_L4_SPECULAR;\r\n            uniform vec4 FUSEE_L5_SPECULAR;\r\n            uniform vec4 FUSEE_L6_SPECULAR;\r\n            uniform vec4 FUSEE_L7_SPECULAR;\r\n\r\n            uniform float FUSEE_L0_SPOTANGLE;\r\n            uniform float FUSEE_L1_SPOTANGLE;\r\n            uniform float FUSEE_L2_SPOTANGLE;\r\n            uniform float FUSEE_L3_SPOTANGLE;\r\n            uniform float FUSEE_L4_SPOTANGLE;\r\n            uniform float FUSEE_L5_SPOTANGLE;\r\n            uniform float FUSEE_L6_SPOTANGLE;\r\n            uniform float FUSEE_L7_SPOTANGLE;\r\n\r\n            uniform mat4 FUSEE_V;\r\n\r\n            varying vec3 vNormal;\r\n            varying vec2 vUV;\r\n            varying vec3 vViewPos;\r\n\r\n            void CalcDirectLight(vec4 difColor, vec4 ambColor, vec4 specColor, vec3 direction, inout vec4 intensity) {\r\n                intensity += ambColor;\r\n                intensity += max(dot(-normalize(direction),normalize(vNormal)),0.0) * difColor;\r\n\r\n                if(specularLevel != 0.0){\r\n                    vec3 lightVector = normalize(direction);\r\n                    vec3 r = normalize(reflect(lightVector, normalize(vNormal)));\r\n                    float s = pow(max(dot(r, vec3(0,0,1.0)), 0.0), specularLevel) * shininess;\r\n                    intensity += specColor * s;\r\n                }\r\n            }\r\n\r\n            void CalcPointLight(vec4 difColor, vec4 ambColor, vec4 specColor, vec3 position, inout vec4 intensity) {\r\n                intensity += ambColor;\r\n                vec3 pos = position - vViewPos;\r\n                intensity += max(dot(normalize(pos),normalize(vNormal)),0.0) * difColor;\r\n\r\n                if(specularLevel != 0.0){\r\n                    vec3 lightVector = normalize(-pos);\r\n                    vec3 r = normalize(reflect(lightVector, normalize(vNormal)));\r\n                    float s = pow(max(dot(r, vec3(0,0,1.0)), 0.0), specularLevel) * shininess;\r\n                    intensity += specColor * s;\r\n                }\r\n            }\r\n\r\n            void CalcSpotLight(vec4 difColor, vec4 ambColor, vec4 specColor, vec3 position, vec3 direction, float angle, inout vec4 intensity){\r\n                intensity += ambColor;\r\n                vec3 pos = position - vViewPos;\r\n                float alpha = dot(normalize(pos), normalize(-direction));\r\n\r\n                if(alpha > angle){\r\n                    intensity += max(dot(normalize(pos),normalize(vNormal)),0.0) * difColor; \r\n                    if(specularLevel != 0.0){\r\n                        vec3 lightVector = normalize(-pos);  \r\n                        vec3 r = normalize(reflect(lightVector, normalize(vNormal)));\r\n                        float s = pow(max(dot(r, vec3(0,0,1.0)), 0.0), specularLevel) * shininess;\r\n                        intensity += specColor * s; \r\n                    }\r\n                }\r\n            }\r\n\r\n            void main()\r\n            {              \r\n                vec4 endIntensity = vec4(0, 0, 0, 0);\r\n                if(FUSEE_L0_ACTIVE != 0.0){\r\n                    if(FUSEE_L0_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L0_DIFFUSE, FUSEE_L0_AMBIENT, FUSEE_L0_SPECULAR, FUSEE_L0_DIRECTION, endIntensity);\r\n                    if(FUSEE_L0_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L0_DIFFUSE, FUSEE_L0_AMBIENT, FUSEE_L0_SPECULAR, FUSEE_L0_POSITION, endIntensity);\r\n                    if(FUSEE_L0_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L0_DIFFUSE, FUSEE_L0_AMBIENT, FUSEE_L0_SPECULAR, FUSEE_L0_POSITION, FUSEE_L0_DIRECTION, FUSEE_L0_SPOTANGLE, endIntensity);\r\n                }  \r\n  \r\n                if(FUSEE_L1_ACTIVE != 0.0){\r\n                    if(FUSEE_L1_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L1_DIFFUSE, FUSEE_L1_AMBIENT, FUSEE_L1_SPECULAR, FUSEE_L1_DIRECTION, endIntensity);\r\n                    if(FUSEE_L1_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L1_DIFFUSE, FUSEE_L1_AMBIENT, FUSEE_L1_SPECULAR, FUSEE_L1_POSITION, endIntensity);\r\n                    if(FUSEE_L1_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L1_DIFFUSE, FUSEE_L1_AMBIENT, FUSEE_L1_SPECULAR, FUSEE_L1_POSITION, FUSEE_L1_DIRECTION, FUSEE_L1_SPOTANGLE, endIntensity);\r\n                } \r\n\r\n                if(FUSEE_L2_ACTIVE != 0.0){\r\n                    if(FUSEE_L2_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L2_DIFFUSE, FUSEE_L2_AMBIENT, FUSEE_L2_SPECULAR, FUSEE_L2_DIRECTION, endIntensity);\r\n                    if(FUSEE_L2_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L2_DIFFUSE, FUSEE_L2_AMBIENT, FUSEE_L2_SPECULAR, FUSEE_L2_POSITION, endIntensity);\r\n                    if(FUSEE_L2_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L2_DIFFUSE, FUSEE_L2_AMBIENT, FUSEE_L2_SPECULAR, FUSEE_L2_POSITION, FUSEE_L2_DIRECTION, FUSEE_L2_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L3_ACTIVE != 0.0){\r\n                    if(FUSEE_L3_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L3_DIFFUSE, FUSEE_L3_AMBIENT, FUSEE_L3_SPECULAR, FUSEE_L3_DIRECTION, endIntensity);\r\n                    if(FUSEE_L3_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L3_DIFFUSE, FUSEE_L3_AMBIENT, FUSEE_L3_SPECULAR, FUSEE_L3_POSITION, endIntensity);\r\n                    if(FUSEE_L3_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L3_DIFFUSE, FUSEE_L3_AMBIENT, FUSEE_L3_SPECULAR, FUSEE_L3_POSITION, FUSEE_L3_DIRECTION, FUSEE_L3_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L4_ACTIVE != 0.0){\r\n                    if(FUSEE_L4_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L4_DIFFUSE, FUSEE_L4_AMBIENT, FUSEE_L4_SPECULAR, FUSEE_L4_DIRECTION, endIntensity);\r\n                    if(FUSEE_L4_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L4_DIFFUSE, FUSEE_L4_AMBIENT, FUSEE_L4_SPECULAR, FUSEE_L4_POSITION, endIntensity);\r\n                    if(FUSEE_L4_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L4_DIFFUSE, FUSEE_L4_AMBIENT, FUSEE_L4_SPECULAR, FUSEE_L4_POSITION, FUSEE_L4_DIRECTION, FUSEE_L4_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L5_ACTIVE != 0.0){\r\n                    if(FUSEE_L5_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L5_DIFFUSE, FUSEE_L5_AMBIENT, FUSEE_L5_SPECULAR, FUSEE_L5_DIRECTION, endIntensity);\r\n                    if(FUSEE_L5_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L5_DIFFUSE, FUSEE_L5_AMBIENT, FUSEE_L5_SPECULAR, FUSEE_L5_POSITION, endIntensity);\r\n                    if(FUSEE_L5_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L5_DIFFUSE, FUSEE_L5_AMBIENT, FUSEE_L5_SPECULAR, FUSEE_L5_POSITION, FUSEE_L5_DIRECTION, FUSEE_L5_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L6_ACTIVE != 0.0){\r\n                    if(FUSEE_L6_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L6_DIFFUSE, FUSEE_L6_AMBIENT, FUSEE_L6_SPECULAR, FUSEE_L6_DIRECTION, endIntensity);\r\n                    if(FUSEE_L6_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L6_DIFFUSE, FUSEE_L6_AMBIENT, FUSEE_L6_SPECULAR, FUSEE_L6_POSITION, endIntensity);\r\n                    if(FUSEE_L6_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L6_DIFFUSE, FUSEE_L6_AMBIENT, FUSEE_L6_SPECULAR, FUSEE_L6_POSITION, FUSEE_L6_DIRECTION, FUSEE_L6_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L7_ACTIVE != 0.0){\r\n                    if(FUSEE_L7_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L7_DIFFUSE, FUSEE_L7_AMBIENT, FUSEE_L7_SPECULAR, FUSEE_L7_DIRECTION, endIntensity);\r\n                    if(FUSEE_L7_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L7_DIFFUSE, FUSEE_L7_AMBIENT, FUSEE_L7_SPECULAR, FUSEE_L7_POSITION, endIntensity);\r\n                    if(FUSEE_L7_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L7_DIFFUSE, FUSEE_L7_AMBIENT, FUSEE_L7_SPECULAR, FUSEE_L7_POSITION, FUSEE_L7_DIRECTION, FUSEE_L7_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                gl_FragColor = texture2D(texture1, vUV) * endIntensity;\r\n            }");
  };

  function MoreShaders_GetTextureShader (rc) {
    return rc.CreateShader("\r\n            #ifdef GL_ES\r\n                precision mediump float;\r\n            #endif\r\n\r\n            attribute vec3 fuVertex;\r\n            attribute vec3 fuNormal;\r\n            attribute vec2 fuUV;\r\n\r\n            varying vec3 vNormal;\r\n            varying vec2 vUV;\r\n\r\n            uniform mat4 FUSEE_MVP;\r\n            uniform mat4 FUSEE_ITMV;\r\n\r\n            void main(){\r\n                vUV = fuUV;\r\n                gl_Position = FUSEE_MVP * vec4(fuVertex, 1.0);\r\n                vNormal = mat3(FUSEE_ITMV[0].xyz, FUSEE_ITMV[1].xyz, FUSEE_ITMV[2].xyz) * fuNormal;\r\n            }", "\r\n            #ifdef GL_ES\r\n                precision mediump float;\r\n            #endif\r\n\r\n            uniform sampler2D texture1;\r\n            varying vec3 vNormal;\r\n            varying vec2 vUV;\r\n\r\n            void main(){\r\n                gl_FragColor = max(dot(vec3(0,0,-1),normalize(vNormal)), 0.2) * texture2D(texture1, vUV);\r\n            }");
  };

  JSIL.MakeStaticClass("Fusee.Engine.MoreShaders", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "GetBumpDiffuseShader", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.ShaderProgram"), [$asm02.TypeRef("Fusee.Engine.RenderContext")], []), 
      MoreShaders_GetBumpDiffuseShader
    );

    $.Method({Static:true , Public:true }, "GetDiffuseColorShader", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.ShaderProgram"), [$asm02.TypeRef("Fusee.Engine.RenderContext")], []), 
      MoreShaders_GetDiffuseColorShader
    );

    $.Method({Static:true , Public:true }, "GetDiffuseTextureShader", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.ShaderProgram"), [$asm02.TypeRef("Fusee.Engine.RenderContext")], []), 
      MoreShaders_GetDiffuseTextureShader
    );

    $.Method({Static:true , Public:true }, "GetSpecularShader", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.ShaderProgram"), [$asm02.TypeRef("Fusee.Engine.RenderContext")], []), 
      MoreShaders_GetSpecularShader
    );

    $.Method({Static:true , Public:true }, "GetTextureShader", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.ShaderProgram"), [$asm02.TypeRef("Fusee.Engine.RenderContext")], []), 
      MoreShaders_GetTextureShader
    );

    $.Constant({Static:true , Public:false}, "VsSimpleTexture", "\r\n            #ifdef GL_ES\r\n                precision mediump float;\r\n            #endif\r\n\r\n            attribute vec3 fuVertex;\r\n            attribute vec3 fuNormal;\r\n            attribute vec2 fuUV;\r\n\r\n            varying vec3 vNormal;\r\n            varying vec2 vUV;\r\n\r\n            uniform mat4 FUSEE_MVP;\r\n            uniform mat4 FUSEE_ITMV;\r\n\r\n            void main(){\r\n                vUV = fuUV;\r\n                gl_Position = FUSEE_MVP * vec4(fuVertex, 1.0);\r\n                vNormal = mat3(FUSEE_ITMV[0].xyz, FUSEE_ITMV[1].xyz, FUSEE_ITMV[2].xyz) * fuNormal;\r\n            }"); 
    $.Constant({Static:true , Public:false}, "PsSimpleTexture", "\r\n            #ifdef GL_ES\r\n                precision mediump float;\r\n            #endif\r\n\r\n            uniform sampler2D texture1;\r\n            varying vec3 vNormal;\r\n            varying vec2 vUV;\r\n\r\n            void main(){\r\n                gl_FragColor = max(dot(vec3(0,0,-1),normalize(vNormal)), 0.2) * texture2D(texture1, vUV);\r\n            }"); 
    $.Constant({Static:true , Public:false}, "VsDiffuse", "\r\n            attribute vec4 fuColor;\r\n            attribute vec3 fuVertex;\r\n            attribute vec3 fuNormal;\r\n            attribute vec2 fuUV;\r\n       \r\n            uniform mat4 FUSEE_MVP;\r\n            uniform mat4 FUSEE_MV;\r\n\r\n            varying vec2 vUV;\r\n            varying vec3 vNormal;\r\n            varying vec3 vViewPos;\r\n\r\n            vec3 vPos;\r\n \r\n            void main()\r\n            {\r\n                vec4 vViewPosTemp = FUSEE_MV * vec4(fuVertex, 1);\r\n                vViewPos = vec3(vViewPosTemp)/vViewPosTemp.w;      \r\n                vUV = fuUV;\r\n                vNormal = normalize(mat3(FUSEE_MV[0].xyz, FUSEE_MV[1].xyz, FUSEE_MV[2].xyz) * fuNormal);\r\n                gl_Position = FUSEE_MVP * vec4(fuVertex, 1.0);\r\n            }"); 
    $.Constant({Static:true , Public:false}, "PsDiffuse", "\r\n            #ifdef GL_ES\r\n                precision highp float;\r\n            #endif\r\n\r\n            uniform sampler2D texture1;\r\n\r\n            uniform vec3 FUSEE_L0_POSITION;\r\n            uniform vec3 FUSEE_L1_POSITION;\r\n            uniform vec3 FUSEE_L2_POSITION;\r\n            uniform vec3 FUSEE_L3_POSITION;\r\n            uniform vec3 FUSEE_L4_POSITION;\r\n            uniform vec3 FUSEE_L5_POSITION;\r\n            uniform vec3 FUSEE_L6_POSITION;\r\n            uniform vec3 FUSEE_L7_POSITION;\r\n\r\n            uniform vec4 FUSEE_L0_DIFFUSE;\r\n            uniform vec4 FUSEE_L1_DIFFUSE;\r\n            uniform vec4 FUSEE_L2_DIFFUSE;\r\n            uniform vec4 FUSEE_L3_DIFFUSE;\r\n            uniform vec4 FUSEE_L4_DIFFUSE;\r\n            uniform vec4 FUSEE_L5_DIFFUSE;\r\n            uniform vec4 FUSEE_L6_DIFFUSE;\r\n            uniform vec4 FUSEE_L7_DIFFUSE;\r\n\r\n            uniform vec4 FUSEE_L0_AMBIENT;\r\n            uniform vec4 FUSEE_L1_AMBIENT;\r\n            uniform vec4 FUSEE_L2_AMBIENT;\r\n            uniform vec4 FUSEE_L3_AMBIENT;\r\n            uniform vec4 FUSEE_L4_AMBIENT;\r\n            uniform vec4 FUSEE_L5_AMBIENT;\r\n            uniform vec4 FUSEE_L6_AMBIENT;\r\n            uniform vec4 FUSEE_L7_AMBIENT;\r\n\r\n            uniform float FUSEE_L0_ACTIVE;\r\n            uniform float FUSEE_L1_ACTIVE;\r\n            uniform float FUSEE_L2_ACTIVE;\r\n            uniform float FUSEE_L3_ACTIVE;\r\n            uniform float FUSEE_L4_ACTIVE;\r\n            uniform float FUSEE_L5_ACTIVE;\r\n            uniform float FUSEE_L6_ACTIVE;\r\n            uniform float FUSEE_L7_ACTIVE;\r\n\r\n            uniform vec3 FUSEE_L0_DIRECTION;\r\n            uniform vec3 FUSEE_L1_DIRECTION;\r\n            uniform vec3 FUSEE_L2_DIRECTION;\r\n            uniform vec3 FUSEE_L3_DIRECTION;\r\n            uniform vec3 FUSEE_L4_DIRECTION;\r\n            uniform vec3 FUSEE_L5_DIRECTION;\r\n            uniform vec3 FUSEE_L6_DIRECTION;\r\n            uniform vec3 FUSEE_L7_DIRECTION;\r\n\r\n            uniform float FUSEE_L0_SPOTANGLE;\r\n            uniform float FUSEE_L1_SPOTANGLE;\r\n            uniform float FUSEE_L2_SPOTANGLE;\r\n            uniform float FUSEE_L3_SPOTANGLE;\r\n            uniform float FUSEE_L4_SPOTANGLE;\r\n            uniform float FUSEE_L5_SPOTANGLE;\r\n            uniform float FUSEE_L6_SPOTANGLE;\r\n            uniform float FUSEE_L7_SPOTANGLE;\r\n\r\n            uniform mat4 FUSEE_V;\r\n\r\n            varying vec3 vNormal;\r\n            varying vec2 vUV;\r\n            varying vec3 vViewPos;\r\n\r\n            void CalcDirectLight(vec4 difColor, vec4 ambColor, vec3 direction, inout vec4 intensity) {\r\n                intensity += ambColor;\r\n                intensity += max(dot(-normalize(direction),normalize(vNormal)),0.0) * difColor;\r\n            }\r\n\r\n            void CalcPointLight(vec4 difColor, vec4 ambColor, vec3 position, inout vec4 intensity) {\r\n                intensity += ambColor;\r\n                vec3 pos = position - vViewPos;\r\n                intensity += max(dot(normalize(pos),normalize(vNormal)),0.0) * difColor;   \r\n            }\r\n\r\n            void CalcSpotLight(vec4 difColor, vec4 ambColor, vec3 position, vec3 direction, float angle, inout vec4 intensity) {\r\n                intensity += ambColor;\r\n                vec3 pos = position - vViewPos;\r\n                float alpha = acos(dot(normalize(pos), normalize(-direction)));\r\n\r\n                if(alpha < angle){\r\n                    intensity += max(dot(normalize(pos),normalize(vNormal)),0.0) * difColor;  \r\n                }     \r\n            }\r\n \r\n            void main()\r\n            {\r\n                vec4 endIntensity = vec4(0,0,0,0);\r\n                if(FUSEE_L0_ACTIVE != 0.0){\r\n                    if(FUSEE_L0_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L0_DIFFUSE, FUSEE_L0_AMBIENT, FUSEE_L0_DIRECTION, endIntensity);\r\n                    if(FUSEE_L0_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L0_DIFFUSE, FUSEE_L0_AMBIENT, FUSEE_L0_POSITION, endIntensity);\r\n                    if(FUSEE_L0_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L0_DIFFUSE, FUSEE_L0_AMBIENT, FUSEE_L0_POSITION, FUSEE_L0_DIRECTION, FUSEE_L0_SPOTANGLE, endIntensity);\r\n                }  \r\n\r\n                if(FUSEE_L1_ACTIVE != 0.0){\r\n                    if(FUSEE_L1_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L1_DIFFUSE, FUSEE_L1_AMBIENT, FUSEE_L1_DIRECTION, endIntensity);\r\n                    if(FUSEE_L1_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L1_DIFFUSE, FUSEE_L1_AMBIENT, FUSEE_L1_POSITION, endIntensity);\r\n                    if(FUSEE_L1_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L1_DIFFUSE, FUSEE_L1_AMBIENT, FUSEE_L1_POSITION, FUSEE_L1_DIRECTION, FUSEE_L1_SPOTANGLE, endIntensity);\r\n                }  \r\n\r\n                if(FUSEE_L2_ACTIVE != 0.0){\r\n                    if(FUSEE_L2_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L2_DIFFUSE, FUSEE_L2_AMBIENT, FUSEE_L2_DIRECTION, endIntensity);\r\n                    if(FUSEE_L2_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L2_DIFFUSE, FUSEE_L2_AMBIENT, FUSEE_L2_POSITION, endIntensity);\r\n                    if(FUSEE_L2_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L2_DIFFUSE, FUSEE_L2_AMBIENT, FUSEE_L2_POSITION, FUSEE_L2_DIRECTION, FUSEE_L2_SPOTANGLE, endIntensity);\r\n                }  \r\n\r\n                if(FUSEE_L3_ACTIVE != 0.0){\r\n                    if(FUSEE_L3_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L3_DIFFUSE, FUSEE_L3_AMBIENT, FUSEE_L3_DIRECTION, endIntensity);\r\n                    if(FUSEE_L3_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L3_DIFFUSE, FUSEE_L3_AMBIENT, FUSEE_L3_POSITION, endIntensity);\r\n                    if(FUSEE_L3_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L3_DIFFUSE, FUSEE_L3_AMBIENT, FUSEE_L3_POSITION, FUSEE_L3_DIRECTION, FUSEE_L3_SPOTANGLE, endIntensity);\r\n                }  \r\n\r\n                if(FUSEE_L4_ACTIVE != 0.0){\r\n                    if(FUSEE_L4_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L4_DIFFUSE, FUSEE_L4_AMBIENT, FUSEE_L4_DIRECTION, endIntensity);\r\n                    if(FUSEE_L4_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L4_DIFFUSE, FUSEE_L4_AMBIENT, FUSEE_L4_POSITION, endIntensity);\r\n                    if(FUSEE_L4_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L4_DIFFUSE, FUSEE_L4_AMBIENT, FUSEE_L4_POSITION, FUSEE_L4_DIRECTION, FUSEE_L4_SPOTANGLE, endIntensity);\r\n                }  \r\n\r\n                if(FUSEE_L5_ACTIVE != 0.0){\r\n                    if(FUSEE_L5_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L5_DIFFUSE, FUSEE_L5_AMBIENT, FUSEE_L5_DIRECTION, endIntensity);\r\n                    if(FUSEE_L5_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L5_DIFFUSE, FUSEE_L5_AMBIENT, FUSEE_L5_POSITION, endIntensity);\r\n                    if(FUSEE_L5_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L5_DIFFUSE, FUSEE_L5_AMBIENT, FUSEE_L5_POSITION, FUSEE_L5_DIRECTION, FUSEE_L5_SPOTANGLE, endIntensity);\r\n                }  \r\n\r\n                if(FUSEE_L6_ACTIVE != 0.0){\r\n                    if(FUSEE_L6_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L6_DIFFUSE, FUSEE_L6_AMBIENT, FUSEE_L6_DIRECTION, endIntensity);\r\n                    if(FUSEE_L6_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L6_DIFFUSE, FUSEE_L6_AMBIENT, FUSEE_L6_POSITION, endIntensity);\r\n                    if(FUSEE_L6_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L6_DIFFUSE, FUSEE_L6_AMBIENT, FUSEE_L6_POSITION, FUSEE_L6_DIRECTION, FUSEE_L6_SPOTANGLE, endIntensity);\r\n                }  \r\n\r\n                if(FUSEE_L7_ACTIVE != 0.0){\r\n                    if(FUSEE_L7_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L7_DIFFUSE, FUSEE_L7_AMBIENT, FUSEE_L7_DIRECTION, endIntensity);\r\n                    if(FUSEE_L7_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L7_DIFFUSE, FUSEE_L7_AMBIENT, FUSEE_L7_POSITION, endIntensity);\r\n                    if(FUSEE_L7_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L7_DIFFUSE, FUSEE_L7_AMBIENT, FUSEE_L7_POSITION, FUSEE_L7_DIRECTION, FUSEE_L7_SPOTANGLE, endIntensity);\r\n                }  \r\n\r\n                gl_FragColor = texture2D(texture1, vUV) * endIntensity; \r\n            }"); 
    $.Constant({Static:true , Public:false}, "VsSpecular", "\r\n            attribute vec3 fuVertex;\r\n            attribute vec3 fuNormal;\r\n            attribute vec2 fuUV;\r\n                  \r\n            varying vec3 vNormal;\r\n            varying vec2 vUV;\r\n            varying vec3 vViewPos;\r\n\r\n            uniform mat4 FUSEE_MV; \r\n            uniform mat4 FUSEE_MVP;\r\n\r\n            uniform float FUSEE_L0_ACTIVE;\r\n            uniform float FUSEE_L1_ACTIVE;\r\n            uniform float FUSEE_L2_ACTIVE;\r\n            uniform float FUSEE_L3_ACTIVE;\r\n            uniform float FUSEE_L4_ACTIVE;\r\n            uniform float FUSEE_L5_ACTIVE;\r\n            uniform float FUSEE_L6_ACTIVE;\r\n            uniform float FUSEE_L7_ACTIVE;\r\n\r\n            void main()\r\n            {\r\n                gl_Position = FUSEE_MVP * vec4(fuVertex, 1.0);\r\n                vUV = fuUV;\r\n                vNormal = normalize(mat3(FUSEE_MV[0].xyz, FUSEE_MV[1].xyz, FUSEE_MV[2].xyz) * fuNormal);\r\n                vec4 vViewTemp = FUSEE_MV * vec4(fuVertex, 1);\r\n                vViewPos = vec3(vViewTemp)/vViewTemp.w;\r\n            }"); 
    $.Constant({Static:true , Public:false}, "PsSpecular", "\r\n            /* Copies incoming fragment color without change. */\r\n            #ifdef GL_ES\r\n                precision highp float;\r\n            #endif\r\n         \r\n            uniform sampler2D texture1;\r\n            uniform float specularLevel;\r\n            uniform float shininess;\r\n\r\n            uniform vec3 FUSEE_L0_POSITION;\r\n            uniform vec3 FUSEE_L1_POSITION;\r\n            uniform vec3 FUSEE_L2_POSITION;\r\n            uniform vec3 FUSEE_L3_POSITION;\r\n            uniform vec3 FUSEE_L4_POSITION;\r\n            uniform vec3 FUSEE_L5_POSITION;\r\n            uniform vec3 FUSEE_L6_POSITION;\r\n            uniform vec3 FUSEE_L7_POSITION;\r\n\r\n            uniform vec4 FUSEE_L0_DIFFUSE;\r\n            uniform vec4 FUSEE_L1_DIFFUSE;\r\n            uniform vec4 FUSEE_L2_DIFFUSE;\r\n            uniform vec4 FUSEE_L3_DIFFUSE;\r\n            uniform vec4 FUSEE_L4_DIFFUSE;\r\n            uniform vec4 FUSEE_L5_DIFFUSE;\r\n            uniform vec4 FUSEE_L6_DIFFUSE;\r\n            uniform vec4 FUSEE_L7_DIFFUSE;\r\n\r\n            uniform vec4 FUSEE_L0_AMBIENT;\r\n            uniform vec4 FUSEE_L1_AMBIENT;\r\n            uniform vec4 FUSEE_L2_AMBIENT;\r\n            uniform vec4 FUSEE_L3_AMBIENT;\r\n            uniform vec4 FUSEE_L4_AMBIENT;\r\n            uniform vec4 FUSEE_L5_AMBIENT;\r\n            uniform vec4 FUSEE_L6_AMBIENT;\r\n            uniform vec4 FUSEE_L7_AMBIENT;\r\n\r\n            uniform float FUSEE_L0_ACTIVE;\r\n            uniform float FUSEE_L1_ACTIVE;\r\n            uniform float FUSEE_L2_ACTIVE;\r\n            uniform float FUSEE_L3_ACTIVE;\r\n            uniform float FUSEE_L4_ACTIVE;\r\n            uniform float FUSEE_L5_ACTIVE;\r\n            uniform float FUSEE_L6_ACTIVE;\r\n            uniform float FUSEE_L7_ACTIVE;\r\n\r\n            uniform vec3 FUSEE_L0_DIRECTION;\r\n            uniform vec3 FUSEE_L1_DIRECTION;\r\n            uniform vec3 FUSEE_L2_DIRECTION;\r\n            uniform vec3 FUSEE_L3_DIRECTION;\r\n            uniform vec3 FUSEE_L4_DIRECTION;\r\n            uniform vec3 FUSEE_L5_DIRECTION;\r\n            uniform vec3 FUSEE_L6_DIRECTION;\r\n            uniform vec3 FUSEE_L7_DIRECTION;\r\n            \r\n            uniform vec4 FUSEE_L0_SPECULAR;\r\n            uniform vec4 FUSEE_L1_SPECULAR;\r\n            uniform vec4 FUSEE_L2_SPECULAR;\r\n            uniform vec4 FUSEE_L3_SPECULAR;\r\n            uniform vec4 FUSEE_L4_SPECULAR;\r\n            uniform vec4 FUSEE_L5_SPECULAR;\r\n            uniform vec4 FUSEE_L6_SPECULAR;\r\n            uniform vec4 FUSEE_L7_SPECULAR;\r\n\r\n            uniform float FUSEE_L0_SPOTANGLE;\r\n            uniform float FUSEE_L1_SPOTANGLE;\r\n            uniform float FUSEE_L2_SPOTANGLE;\r\n            uniform float FUSEE_L3_SPOTANGLE;\r\n            uniform float FUSEE_L4_SPOTANGLE;\r\n            uniform float FUSEE_L5_SPOTANGLE;\r\n            uniform float FUSEE_L6_SPOTANGLE;\r\n            uniform float FUSEE_L7_SPOTANGLE;\r\n\r\n            uniform mat4 FUSEE_V;\r\n\r\n            varying vec3 vNormal;\r\n            varying vec2 vUV;\r\n            varying vec3 vViewPos;\r\n\r\n            void CalcDirectLight(vec4 difColor, vec4 ambColor, vec4 specColor, vec3 direction, inout vec4 intensity) {\r\n                intensity += ambColor;\r\n                intensity += max(dot(-normalize(direction),normalize(vNormal)),0.0) * difColor;\r\n\r\n                if(specularLevel != 0.0){\r\n                    vec3 lightVector = normalize(direction);\r\n                    vec3 r = normalize(reflect(lightVector, normalize(vNormal)));\r\n                    float s = pow(max(dot(r, vec3(0,0,1.0)), 0.0), specularLevel) * shininess;\r\n                    intensity += specColor * s;\r\n                }\r\n            }\r\n\r\n            void CalcPointLight(vec4 difColor, vec4 ambColor, vec4 specColor, vec3 position, inout vec4 intensity) {\r\n                intensity += ambColor;\r\n                vec3 pos = position - vViewPos;\r\n                intensity += max(dot(normalize(pos),normalize(vNormal)),0.0) * difColor;\r\n\r\n                if(specularLevel != 0.0){\r\n                    vec3 lightVector = normalize(-pos);\r\n                    vec3 r = normalize(reflect(lightVector, normalize(vNormal)));\r\n                    float s = pow(max(dot(r, vec3(0,0,1.0)), 0.0), specularLevel) * shininess;\r\n                    intensity += specColor * s;\r\n                }\r\n            }\r\n\r\n            void CalcSpotLight(vec4 difColor, vec4 ambColor, vec4 specColor, vec3 position, vec3 direction, float angle, inout vec4 intensity){\r\n                intensity += ambColor;\r\n                vec3 pos = position - vViewPos;\r\n                float alpha = dot(normalize(pos), normalize(-direction));\r\n\r\n                if(alpha > angle){\r\n                    intensity += max(dot(normalize(pos),normalize(vNormal)),0.0) * difColor; \r\n                    if(specularLevel != 0.0){\r\n                        vec3 lightVector = normalize(-pos);  \r\n                        vec3 r = normalize(reflect(lightVector, normalize(vNormal)));\r\n                        float s = pow(max(dot(r, vec3(0,0,1.0)), 0.0), specularLevel) * shininess;\r\n                        intensity += specColor * s; \r\n                    }\r\n                }\r\n            }\r\n\r\n            void main()\r\n            {              \r\n                vec4 endIntensity = vec4(0, 0, 0, 0);\r\n                if(FUSEE_L0_ACTIVE != 0.0){\r\n                    if(FUSEE_L0_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L0_DIFFUSE, FUSEE_L0_AMBIENT, FUSEE_L0_SPECULAR, FUSEE_L0_DIRECTION, endIntensity);\r\n                    if(FUSEE_L0_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L0_DIFFUSE, FUSEE_L0_AMBIENT, FUSEE_L0_SPECULAR, FUSEE_L0_POSITION, endIntensity);\r\n                    if(FUSEE_L0_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L0_DIFFUSE, FUSEE_L0_AMBIENT, FUSEE_L0_SPECULAR, FUSEE_L0_POSITION, FUSEE_L0_DIRECTION, FUSEE_L0_SPOTANGLE, endIntensity);\r\n                }  \r\n  \r\n                if(FUSEE_L1_ACTIVE != 0.0){\r\n                    if(FUSEE_L1_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L1_DIFFUSE, FUSEE_L1_AMBIENT, FUSEE_L1_SPECULAR, FUSEE_L1_DIRECTION, endIntensity);\r\n                    if(FUSEE_L1_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L1_DIFFUSE, FUSEE_L1_AMBIENT, FUSEE_L1_SPECULAR, FUSEE_L1_POSITION, endIntensity);\r\n                    if(FUSEE_L1_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L1_DIFFUSE, FUSEE_L1_AMBIENT, FUSEE_L1_SPECULAR, FUSEE_L1_POSITION, FUSEE_L1_DIRECTION, FUSEE_L1_SPOTANGLE, endIntensity);\r\n                } \r\n\r\n                if(FUSEE_L2_ACTIVE != 0.0){\r\n                    if(FUSEE_L2_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L2_DIFFUSE, FUSEE_L2_AMBIENT, FUSEE_L2_SPECULAR, FUSEE_L2_DIRECTION, endIntensity);\r\n                    if(FUSEE_L2_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L2_DIFFUSE, FUSEE_L2_AMBIENT, FUSEE_L2_SPECULAR, FUSEE_L2_POSITION, endIntensity);\r\n                    if(FUSEE_L2_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L2_DIFFUSE, FUSEE_L2_AMBIENT, FUSEE_L2_SPECULAR, FUSEE_L2_POSITION, FUSEE_L2_DIRECTION, FUSEE_L2_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L3_ACTIVE != 0.0){\r\n                    if(FUSEE_L3_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L3_DIFFUSE, FUSEE_L3_AMBIENT, FUSEE_L3_SPECULAR, FUSEE_L3_DIRECTION, endIntensity);\r\n                    if(FUSEE_L3_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L3_DIFFUSE, FUSEE_L3_AMBIENT, FUSEE_L3_SPECULAR, FUSEE_L3_POSITION, endIntensity);\r\n                    if(FUSEE_L3_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L3_DIFFUSE, FUSEE_L3_AMBIENT, FUSEE_L3_SPECULAR, FUSEE_L3_POSITION, FUSEE_L3_DIRECTION, FUSEE_L3_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L4_ACTIVE != 0.0){\r\n                    if(FUSEE_L4_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L4_DIFFUSE, FUSEE_L4_AMBIENT, FUSEE_L4_SPECULAR, FUSEE_L4_DIRECTION, endIntensity);\r\n                    if(FUSEE_L4_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L4_DIFFUSE, FUSEE_L4_AMBIENT, FUSEE_L4_SPECULAR, FUSEE_L4_POSITION, endIntensity);\r\n                    if(FUSEE_L4_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L4_DIFFUSE, FUSEE_L4_AMBIENT, FUSEE_L4_SPECULAR, FUSEE_L4_POSITION, FUSEE_L4_DIRECTION, FUSEE_L4_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L5_ACTIVE != 0.0){\r\n                    if(FUSEE_L5_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L5_DIFFUSE, FUSEE_L5_AMBIENT, FUSEE_L5_SPECULAR, FUSEE_L5_DIRECTION, endIntensity);\r\n                    if(FUSEE_L5_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L5_DIFFUSE, FUSEE_L5_AMBIENT, FUSEE_L5_SPECULAR, FUSEE_L5_POSITION, endIntensity);\r\n                    if(FUSEE_L5_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L5_DIFFUSE, FUSEE_L5_AMBIENT, FUSEE_L5_SPECULAR, FUSEE_L5_POSITION, FUSEE_L5_DIRECTION, FUSEE_L5_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L6_ACTIVE != 0.0){\r\n                    if(FUSEE_L6_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L6_DIFFUSE, FUSEE_L6_AMBIENT, FUSEE_L6_SPECULAR, FUSEE_L6_DIRECTION, endIntensity);\r\n                    if(FUSEE_L6_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L6_DIFFUSE, FUSEE_L6_AMBIENT, FUSEE_L6_SPECULAR, FUSEE_L6_POSITION, endIntensity);\r\n                    if(FUSEE_L6_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L6_DIFFUSE, FUSEE_L6_AMBIENT, FUSEE_L6_SPECULAR, FUSEE_L6_POSITION, FUSEE_L6_DIRECTION, FUSEE_L6_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L7_ACTIVE != 0.0){\r\n                    if(FUSEE_L7_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L7_DIFFUSE, FUSEE_L7_AMBIENT, FUSEE_L7_SPECULAR, FUSEE_L7_DIRECTION, endIntensity);\r\n                    if(FUSEE_L7_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L7_DIFFUSE, FUSEE_L7_AMBIENT, FUSEE_L7_SPECULAR, FUSEE_L7_POSITION, endIntensity);\r\n                    if(FUSEE_L7_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L7_DIFFUSE, FUSEE_L7_AMBIENT, FUSEE_L7_SPECULAR, FUSEE_L7_POSITION, FUSEE_L7_DIRECTION, FUSEE_L7_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                gl_FragColor = texture2D(texture1, vUV) * endIntensity;\r\n            }"); 
    $.Constant({Static:true , Public:false}, "VsBump", "\r\n            attribute vec3 fuVertex;\r\n            attribute vec3 fuNormal;\r\n            attribute vec2 fuUV;\r\n                  \r\n            varying vec3 vNormal;\r\n            varying vec2 vUV;\r\n            varying vec3 vViewPos;\r\n    \r\n            uniform mat4 FUSEE_MV; \r\n            uniform mat4 FUSEE_MVP;\r\n\r\n            uniform float FUSEE_L0_ACTIVE;\r\n            uniform float FUSEE_L1_ACTIVE;\r\n            uniform float FUSEE_L2_ACTIVE;\r\n            uniform float FUSEE_L3_ACTIVE;\r\n            uniform float FUSEE_L4_ACTIVE;\r\n            uniform float FUSEE_L5_ACTIVE;\r\n            uniform float FUSEE_L6_ACTIVE;\r\n            uniform float FUSEE_L7_ACTIVE;\r\n\r\n            void main()\r\n            {\r\n                gl_Position = FUSEE_MVP * vec4(fuVertex, 1.0);\r\n                vUV = fuUV;\r\n                vNormal = normalize(mat3(FUSEE_MV[0].xyz, FUSEE_MV[1].xyz, FUSEE_MV[2].xyz) * fuNormal);\r\n                vec4 vViewTemp = FUSEE_MV * vec4(fuVertex, 1);\r\n                vViewPos = vec3(vViewTemp)/vViewTemp.w;\r\n            }"); 
    $.Constant({Static:true , Public:false}, "PsBump", "\r\n            /* Copies incoming fragment color without change. */\r\n            #ifdef GL_ES\r\n                precision highp float;\r\n            #endif\r\n\r\n            uniform mat4 FUSEE_V;\r\n            uniform mat4 FUSEE_MV;\r\n         \r\n            uniform sampler2D texture1;\r\n            uniform sampler2D normalTex;\r\n            uniform float shininess;\r\n            uniform float specularLevel;\r\n\r\n            uniform vec3 FUSEE_L0_POSITION;\r\n            uniform vec3 FUSEE_L1_POSITION;\r\n            uniform vec3 FUSEE_L2_POSITION;\r\n            uniform vec3 FUSEE_L3_POSITION;\r\n            uniform vec3 FUSEE_L4_POSITION;\r\n            uniform vec3 FUSEE_L5_POSITION;\r\n            uniform vec3 FUSEE_L6_POSITION;\r\n            uniform vec3 FUSEE_L7_POSITION;\r\n\r\n            uniform vec4 FUSEE_L0_DIFFUSE;\r\n            uniform vec4 FUSEE_L1_DIFFUSE;\r\n            uniform vec4 FUSEE_L2_DIFFUSE;\r\n            uniform vec4 FUSEE_L3_DIFFUSE;\r\n            uniform vec4 FUSEE_L4_DIFFUSE;\r\n            uniform vec4 FUSEE_L5_DIFFUSE;\r\n            uniform vec4 FUSEE_L6_DIFFUSE;\r\n            uniform vec4 FUSEE_L7_DIFFUSE;\r\n\r\n            uniform vec4 FUSEE_L0_AMBIENT;\r\n            uniform vec4 FUSEE_L1_AMBIENT;\r\n            uniform vec4 FUSEE_L2_AMBIENT;\r\n            uniform vec4 FUSEE_L3_AMBIENT;\r\n            uniform vec4 FUSEE_L4_AMBIENT;\r\n            uniform vec4 FUSEE_L5_AMBIENT;\r\n            uniform vec4 FUSEE_L6_AMBIENT;\r\n            uniform vec4 FUSEE_L7_AMBIENT;\r\n\r\n            uniform float FUSEE_L0_ACTIVE;\r\n            uniform float FUSEE_L1_ACTIVE;\r\n            uniform float FUSEE_L2_ACTIVE;\r\n            uniform float FUSEE_L3_ACTIVE;\r\n            uniform float FUSEE_L4_ACTIVE;\r\n            uniform float FUSEE_L5_ACTIVE;\r\n            uniform float FUSEE_L6_ACTIVE;\r\n            uniform float FUSEE_L7_ACTIVE;\r\n\r\n            uniform vec3 FUSEE_L0_DIRECTION;\r\n            uniform vec3 FUSEE_L1_DIRECTION;\r\n            uniform vec3 FUSEE_L2_DIRECTION;\r\n            uniform vec3 FUSEE_L3_DIRECTION;\r\n            uniform vec3 FUSEE_L4_DIRECTION;\r\n            uniform vec3 FUSEE_L5_DIRECTION;\r\n            uniform vec3 FUSEE_L6_DIRECTION;\r\n            uniform vec3 FUSEE_L7_DIRECTION;\r\n            \r\n            uniform vec4 FUSEE_L0_SPECULAR;\r\n            uniform vec4 FUSEE_L1_SPECULAR;\r\n            uniform vec4 FUSEE_L2_SPECULAR;\r\n            uniform vec4 FUSEE_L3_SPECULAR;\r\n            uniform vec4 FUSEE_L4_SPECULAR;\r\n            uniform vec4 FUSEE_L5_SPECULAR;\r\n            uniform vec4 FUSEE_L6_SPECULAR;\r\n            uniform vec4 FUSEE_L7_SPECULAR;\r\n\r\n            uniform float FUSEE_L0_SPOTANGLE;\r\n            uniform float FUSEE_L1_SPOTANGLE;\r\n            uniform float FUSEE_L2_SPOTANGLE;\r\n            uniform float FUSEE_L3_SPOTANGLE;\r\n            uniform float FUSEE_L4_SPOTANGLE;\r\n            uniform float FUSEE_L5_SPOTANGLE;\r\n            uniform float FUSEE_L6_SPOTANGLE;\r\n            uniform float FUSEE_L7_SPOTANGLE;\r\n    \r\n            varying vec3 vNormal;\r\n            varying vec2 vUV;\r\n            varying vec3 vViewPos;\r\n\r\n            void CalcDirectLight(vec4 difColor, vec4 ambColor, vec4 specColor, vec3 direction, inout vec4 intensity) {\r\n                float maxVariance = 100.0; //Parameter for Bump Intensity\r\n                float minVariance = maxVariance / 2.0;\r\n                vec3 bumpNormal = vNormal + normalize(texture2D(normalTex, vUV).rgb * maxVariance - minVariance);\r\n                intensity += ambColor;\r\n                intensity += max(dot(-normalize(direction),normalize(bumpNormal)),0.0) * difColor;\r\n\r\n                if(specularLevel != 0.0){\r\n                    vec3 lightVector = normalize(direction);\r\n                    vec3 r = normalize(reflect(lightVector, normalize(bumpNormal)));\r\n                    float s = pow(max(dot(r, vec3(0,0,1.0)), 0.0), specularLevel) * shininess;\r\n                    intensity += specColor * s;\r\n                }\r\n            }\r\n\r\n            void CalcPointLight(vec4 difColor, vec4 ambColor, vec4 specColor, vec3 position, inout vec4 intensity) {\r\n                float maxVariance = 100.0; //Parameter for Bump Intensity\r\n                float minVariance = maxVariance / 2.0;\r\n                vec3 bumpNormal = vNormal + normalize(texture2D(normalTex, vUV).rgb * maxVariance - minVariance);\r\n                intensity += ambColor;\r\n                vec3 pos = position - vViewPos;\r\n                intensity += max(dot(normalize(pos),normalize(bumpNormal)),0.0) * difColor;\r\n\r\n                if(specularLevel != 0.0){\r\n                    vec3 lightVector = normalize(-pos);  \r\n                    vec3 r = normalize(reflect(lightVector, normalize(bumpNormal)));\r\n                    float s = pow(max(dot(r, vec3(0,0,1.0)), 0.0), specularLevel) * shininess;\r\n                    intensity += specColor * s;\r\n                }\r\n            }\r\n\r\n            void CalcSpotLight(vec4 difColor, vec4 ambColor, vec4 specColor, vec3 position, vec3 direction, float angle, inout vec4 intensity){\r\n                float maxVariance = 100.0; //Parameter for Bump Intensity\r\n                float minVariance = maxVariance / 2.0;\r\n                vec3 bumpNormal = vNormal + normalize(texture2D(normalTex, vUV).rgb * maxVariance - minVariance);\r\n                intensity += ambColor;\r\n                vec3 pos = position - vViewPos;\r\n                float alpha = acos(dot(normalize(pos), normalize(-direction)));\r\n\r\n                if(alpha < angle){\r\n                    intensity += max(dot(normalize(pos),normalize(bumpNormal)),0.0) * difColor; \r\n                    if(specularLevel != 0.0){\r\n                        vec3 lightVector = normalize(-pos);  \r\n                        vec3 r = normalize(reflect(lightVector, normalize(bumpNormal)));\r\n                        float s = pow(max(dot(r, vec3(0,0,1.0)), 0.0), specularLevel) * shininess;\r\n                        intensity += specColor * s;\r\n                    }\r\n                }\r\n            }\r\n\r\n            void main()\r\n            {              \r\n                vec4 endIntensity = vec4(0, 0, 0, 0);\r\n                if(FUSEE_L0_ACTIVE != 0.0){\r\n                    if(FUSEE_L0_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L0_DIFFUSE, FUSEE_L0_AMBIENT, FUSEE_L0_SPECULAR, FUSEE_L0_DIRECTION, endIntensity);\r\n                    if(FUSEE_L0_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L0_DIFFUSE, FUSEE_L0_AMBIENT, FUSEE_L0_SPECULAR, FUSEE_L0_POSITION, endIntensity);\r\n                    if(FUSEE_L0_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L0_DIFFUSE, FUSEE_L0_AMBIENT, FUSEE_L0_SPECULAR, FUSEE_L0_POSITION, FUSEE_L0_DIRECTION, FUSEE_L0_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L1_ACTIVE != 0.0){\r\n                    if(FUSEE_L1_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L1_DIFFUSE, FUSEE_L1_AMBIENT, FUSEE_L1_SPECULAR, FUSEE_L1_DIRECTION, endIntensity);\r\n                    if(FUSEE_L1_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L1_DIFFUSE, FUSEE_L1_AMBIENT, FUSEE_L1_SPECULAR, FUSEE_L1_POSITION, endIntensity);\r\n                    if(FUSEE_L1_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L1_DIFFUSE, FUSEE_L1_AMBIENT, FUSEE_L1_SPECULAR, FUSEE_L1_POSITION, FUSEE_L1_DIRECTION, FUSEE_L1_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L2_ACTIVE != 0.0){\r\n                    if(FUSEE_L2_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L2_DIFFUSE, FUSEE_L2_AMBIENT, FUSEE_L2_SPECULAR, FUSEE_L2_DIRECTION, endIntensity);\r\n                    if(FUSEE_L2_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L2_DIFFUSE, FUSEE_L2_AMBIENT, FUSEE_L2_SPECULAR, FUSEE_L2_POSITION, endIntensity);\r\n                    if(FUSEE_L2_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L2_DIFFUSE, FUSEE_L2_AMBIENT, FUSEE_L2_SPECULAR, FUSEE_L2_POSITION, FUSEE_L2_DIRECTION, FUSEE_L2_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L3_ACTIVE != 0.0){\r\n                    if(FUSEE_L3_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L3_DIFFUSE, FUSEE_L3_AMBIENT, FUSEE_L3_SPECULAR, FUSEE_L3_DIRECTION, endIntensity);\r\n                    if(FUSEE_L3_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L3_DIFFUSE, FUSEE_L3_AMBIENT, FUSEE_L3_SPECULAR, FUSEE_L3_POSITION, endIntensity);\r\n                    if(FUSEE_L3_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L3_DIFFUSE, FUSEE_L3_AMBIENT, FUSEE_L3_SPECULAR, FUSEE_L3_POSITION, FUSEE_L3_DIRECTION, FUSEE_L3_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L4_ACTIVE != 0.0){\r\n                    if(FUSEE_L4_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L4_DIFFUSE, FUSEE_L4_AMBIENT, FUSEE_L4_SPECULAR, FUSEE_L4_DIRECTION, endIntensity);\r\n                    if(FUSEE_L4_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L4_DIFFUSE, FUSEE_L4_AMBIENT, FUSEE_L4_SPECULAR, FUSEE_L4_POSITION, endIntensity);\r\n                    if(FUSEE_L4_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L4_DIFFUSE, FUSEE_L4_AMBIENT, FUSEE_L4_SPECULAR, FUSEE_L4_POSITION, FUSEE_L4_DIRECTION, FUSEE_L4_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L5_ACTIVE != 0.0){\r\n                    if(FUSEE_L5_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L5_DIFFUSE, FUSEE_L5_AMBIENT, FUSEE_L5_SPECULAR, FUSEE_L5_DIRECTION, endIntensity);\r\n                    if(FUSEE_L5_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L5_DIFFUSE, FUSEE_L5_AMBIENT, FUSEE_L5_SPECULAR, FUSEE_L5_POSITION, endIntensity);\r\n                    if(FUSEE_L5_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L5_DIFFUSE, FUSEE_L5_AMBIENT, FUSEE_L5_SPECULAR, FUSEE_L5_POSITION, FUSEE_L5_DIRECTION, FUSEE_L5_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L6_ACTIVE != 0.0){\r\n                    if(FUSEE_L6_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L6_DIFFUSE, FUSEE_L6_AMBIENT, FUSEE_L6_SPECULAR, FUSEE_L6_DIRECTION, endIntensity);\r\n                    if(FUSEE_L6_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L6_DIFFUSE, FUSEE_L6_AMBIENT, FUSEE_L6_SPECULAR, FUSEE_L6_POSITION, endIntensity);\r\n                    if(FUSEE_L6_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L6_DIFFUSE, FUSEE_L6_AMBIENT, FUSEE_L6_SPECULAR, FUSEE_L6_POSITION, FUSEE_L6_DIRECTION, FUSEE_L6_SPOTANGLE, endIntensity);\r\n                }\r\n\r\n                if(FUSEE_L7_ACTIVE != 0.0){\r\n                    if(FUSEE_L7_ACTIVE == 1.0)\r\n                        CalcDirectLight(FUSEE_L7_DIFFUSE, FUSEE_L7_AMBIENT, FUSEE_L7_SPECULAR, FUSEE_L7_DIRECTION, endIntensity);\r\n                    if(FUSEE_L7_ACTIVE == 2.0)\r\n                        CalcPointLight(FUSEE_L7_DIFFUSE, FUSEE_L7_AMBIENT, FUSEE_L7_SPECULAR, FUSEE_L7_POSITION, endIntensity);\r\n                    if(FUSEE_L7_ACTIVE == 3.0)\r\n                        CalcSpotLight(FUSEE_L7_DIFFUSE, FUSEE_L7_AMBIENT, FUSEE_L7_SPECULAR, FUSEE_L7_POSITION, FUSEE_L7_DIRECTION, FUSEE_L7_SPOTANGLE, endIntensity);\r\n                }      \r\n\r\n                gl_FragColor = texture2D(texture1, vUV) * endIntensity; \r\n            }"); 
    $.Constant({Static:true , Public:false}, "VsSimpleColor", "\r\n            attribute vec3 fuVertex;\r\n            attribute vec3 fuNormal;       \r\n        \r\n            varying vec3 vNormal;\r\n        \r\n            uniform mat4 FUSEE_MVP;\r\n            uniform mat4 FUSEE_ITMV;\r\n\r\n            void main()\r\n            {\r\n                gl_Position = FUSEE_MVP * vec4(fuVertex, 1.0);\r\n                vNormal = mat3(FUSEE_ITMV[0].xyz, FUSEE_ITMV[1].xyz, FUSEE_ITMV[2].xyz) * fuNormal;\r\n            }"); 
    $.Constant({Static:true , Public:false}, "PsSimpleColor", "\r\n            #ifdef GL_ES\r\n                precision highp float;\r\n            #endif    \r\n  \r\n            uniform vec4 color;\r\n            varying vec3 vNormal;\r\n\r\n            void main()\r\n            {             \r\n                gl_FragColor = max(dot(vec3(0,0,-1),normalize(vNormal)), 0.1) * color;\r\n            }"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.MultiSphereShape */ 

(function MultiSphereShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Fusee.Engine.CollisionShape)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Fusee.Engine.IMultiSphereShapeImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Fusee.Engine.CapsuleShape)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.IMultiSphereShapeImp.get_SphereCount)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.IMultiSphereShapeImp.GetSpherePosition)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.IMultiSphereShapeImp.GetSphereRadius)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.set_Margin)) ();
  };

  function MultiSphereShape__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function MultiSphereShape_get_Margin () {
    return +$IM00().Call(this.MultiSphereShapeImp, null);
  };

  function MultiSphereShape_get_SphereCount () {
    return $IM01().Call(this.MultiSphereShapeImp, null);
  };

  function MultiSphereShape_GetSpherePosition (index) {
    return $IM02().Call(this.MultiSphereShapeImp, null, index);
  };

  function MultiSphereShape_GetSphereRadius (index) {
    return +$IM03().Call(this.MultiSphereShapeImp, null, index);
  };

  function MultiSphereShape_set_Margin (value) {
    var o = $T05().$Cast($IM04().Call(this.MultiSphereShapeImp, null));
    $IM05().Call(o.CapsuleShapeImp, null, value);
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Fusee.Engine.CollisionShape"), 
      Name: "Fusee.Engine.MultiSphereShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      MultiSphereShape__ctor
    );

    $.Method({Static:false, Public:true }, "get_Margin", 
      new JSIL.MethodSignature($.Single, [], []), 
      MultiSphereShape_get_Margin
    );

    $.Method({Static:false, Public:true }, "get_SphereCount", 
      new JSIL.MethodSignature($.Int32, [], []), 
      MultiSphereShape_get_SphereCount
    );

    $.Method({Static:false, Public:true }, "GetSpherePosition", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [$.Int32], []), 
      MultiSphereShape_GetSpherePosition
    );

    $.Method({Static:false, Public:true }, "GetSphereRadius", 
      new JSIL.MethodSignature($.Single, [$.Int32], []), 
      MultiSphereShape_GetSphereRadius
    );

    $.Method({Static:false, Public:true }, "set_Margin", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      MultiSphereShape_set_Margin
    );

    $.Field({Static:false, Public:false}, "MultiSphereShapeImp", $asm01.TypeRef("Fusee.Engine.IMultiSphereShapeImp")); 
    $.Property({Static:false, Public:true }, "Margin", $.Single);

    $.Property({Static:false, Public:true }, "SphereCount", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Point2PointConstraint */ 

(function Point2PointConstraint$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Fusee.Engine.IPoint2PointConstraintImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.Fusee.Engine.RigidBody)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Fusee.Engine.PointToPointFlags)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Fusee.Math.float3)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.IPoint2PointConstraintImp.get_PivotInA)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.IPoint2PointConstraintImp.get_PivotInB)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_UserObject)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.get_RigidBodyA)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.get_RigidBodyB)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.Fusee.Engine.IPoint2PointConstraintImp.GetParam)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.GetUid)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.get_UserObject)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm01.Fusee.Engine.IPoint2PointConstraintImp.SetParam)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm01.Fusee.Engine.IPoint2PointConstraintImp.UpdateRhs)) ();
  };

  function Point2PointConstraint__ctor () {
  };

  function Point2PointConstraint_get_PivotInA () {
    return $IM00().Call(this._iP2PConstraintImp, null);
  };

  function Point2PointConstraint_get_PivotInB () {
    return $IM01().Call(this._iP2PConstraintImp, null);
  };

  function Point2PointConstraint_get_RigidBodyA () {
    var retval = $IM02().Call($IM03().Call(this._iP2PConstraintImp, null), null);
    return $T04().$Cast(retval);
  };

  function Point2PointConstraint_get_RigidBodyB () {
    var retval = $IM02().Call($IM04().Call(this._iP2PConstraintImp, null), null);
    return $T04().$Cast(retval);
  };

  function Point2PointConstraint_GetParam (param, axis) {
    return +$IM05().Call(this._iP2PConstraintImp, null, param, axis);
  };

  function Point2PointConstraint_GetUid () {
    return $IM06().Call(this._iP2PConstraintImp, null);
  };

  function Point2PointConstraint_set_PivotInA (value) {
    var o = $thisType.$Cast($IM07().Call(this._iP2PConstraintImp, null));
    (o._iP2PConstraintImp.PivotInA = value);
  };

  function Point2PointConstraint_set_PivotInB (value) {
    var o = $thisType.$Cast($IM07().Call(this._iP2PConstraintImp, null));
    (o._iP2PConstraintImp.PivotInB = value);
  };

  function Point2PointConstraint_SetParam (param, value, axis) {
    var o = $thisType.$Cast($IM07().Call(this._iP2PConstraintImp, null));
    $IM08().Call(o._iP2PConstraintImp, null, param, value, axis);
  };

  function Point2PointConstraint_UpdateRhS (timeStep) {
    var o = $thisType.$Cast($IM07().Call(this._iP2PConstraintImp, null));
    $IM09().Call(o._iP2PConstraintImp, null, timeStep);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Point2PointConstraint", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      Point2PointConstraint__ctor
    );

    $.Method({Static:false, Public:true }, "get_PivotInA", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      Point2PointConstraint_get_PivotInA
    );

    $.Method({Static:false, Public:true }, "get_PivotInB", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      Point2PointConstraint_get_PivotInB
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyA", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.RigidBody"), [], []), 
      Point2PointConstraint_get_RigidBodyA
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyB", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.RigidBody"), [], []), 
      Point2PointConstraint_get_RigidBodyB
    );

    $.Method({Static:false, Public:true }, "GetParam", 
      new JSIL.MethodSignature($.Single, [$asm01.TypeRef("Fusee.Engine.PointToPointFlags"), $.Int32], []), 
      Point2PointConstraint_GetParam
    );

    $.Method({Static:false, Public:true }, "GetUid", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Point2PointConstraint_GetUid
    );

    $.Method({Static:false, Public:true }, "set_PivotInA", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      Point2PointConstraint_set_PivotInA
    );

    $.Method({Static:false, Public:true }, "set_PivotInB", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      Point2PointConstraint_set_PivotInB
    );

    $.Method({Static:false, Public:true }, "SetParam", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("Fusee.Engine.PointToPointFlags"), $.Single, 
          $.Int32
        ], []), 
      Point2PointConstraint_SetParam
    );

    $.Method({Static:false, Public:true }, "UpdateRhS", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      Point2PointConstraint_UpdateRhS
    );

    $.Field({Static:false, Public:false}, "_iP2PConstraintImp", $asm01.TypeRef("Fusee.Engine.IPoint2PointConstraintImp")); 
    $.Property({Static:false, Public:true }, "PivotInA", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "PivotInB", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "RigidBodyA", $asm02.TypeRef("Fusee.Engine.RigidBody"));

    $.Property({Static:false, Public:true }, "RigidBodyB", $asm02.TypeRef("Fusee.Engine.RigidBody"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.RigidBody */ 

(function RigidBody$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.EventHandler)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Delegate)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Threading.Interlocked)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Fusee.Math.float3)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm02.Fusee.Engine.BoxShape)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Fusee.Engine.IBoxShapeImp)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm02.Fusee.Engine.CollisionShape)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm02.Fusee.Engine.SphereShape)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Fusee.Engine.ISphereShapeImp)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm02.Fusee.Engine.CapsuleShape)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.Fusee.Engine.ICapsuleShapeImp)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm02.Fusee.Engine.CylinderShape)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.Fusee.Engine.ICylinderShapeImp)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm02.Fusee.Engine.ConeShape)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.Fusee.Engine.IConeShapeImp)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm02.Fusee.Engine.MultiSphereShape)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.Fusee.Engine.IMultiSphereShapeImp)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm02.Fusee.Engine.ConvexHullShape)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm01.Fusee.Engine.IConvexHullShapeImp)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm02.Fusee.Engine.GImpactMeshShape)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm01.Fusee.Engine.IGImpactMeshShapeImp)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm02.Fusee.Engine.StaticPlaneShape)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm01.Fusee.Engine.IStaticPlaneShapeImp)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm02.Fusee.Engine.CompoundShape)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm01.Fusee.Engine.ICompoundShapeImp)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm02.Fusee.Engine.EmptyShape)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm01.Fusee.Engine.IEmptyShapeImp)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm09.System.Diagnostics.Debug)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm04.Fusee.Math.float4x4)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.TypeRef("System.String")], []))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_UserObject)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.ApplyForce)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.ApplyImpulse)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_AngularDrag)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_LinearFactor)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_AngularVelocity)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_ApplyCentralForce)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_ApplyCentralImpulse)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_ApplyTorque)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_ApplyTorqueImpulse)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_CollisionShape)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.set_UserObject)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_Friction)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_Gravity)) ();
  };
  var $IM0E = function () {
    return ($IM0E = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_Inertia)) ();
  };
  var $IM0F = function () {
    return ($IM0F = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_LinearDrag)) ();
  };
  var $IM10 = function () {
    return ($IM10 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_LinearVelocity)) ();
  };
  var $IM11 = function () {
    return ($IM11 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_Mass)) ();
  };
  var $IM12 = function () {
    return ($IM12 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_Position)) ();
  };
  var $IM13 = function () {
    return ($IM13 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_Restitution)) ();
  };
  var $IM14 = function () {
    return ($IM14 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_WorldTransform)) ();
  };
  var $IM15 = function () {
    return ($IM15 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_Rotation)) ();
  };
  var $IM16 = function () {
    return ($IM16 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.set_CollisionShape)) ();
  };
  var $IM17 = function () {
    return ($IM17 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.set_Friction)) ();
  };
  var $IM18 = function () {
    return ($IM18 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.set_Mass)) ();
  };
  var $IM19 = function () {
    return ($IM19 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.set_Restitution)) ();
  };
  var $IM1A = function () {
    return ($IM1A = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.SetDrag)) ();
  };

  function RigidBody__ctor () {
    this.WhileCollidingEvent = function (param0, param1) {
    };
  };

  function RigidBody_add_WhileCollidingEvent (value) {
    var eventHandler = this.WhileCollidingEvent;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T01().Combine(eventHandler2, value);
      eventHandler = $T02().CompareExchange$b1($T00())(/* ref */ new JSIL.MemberReference(this, "WhileCollidingEvent"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function RigidBody_ApplyForce (force, relPos) {
    var o = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    $IM01().Call(o._iRigidBodyImp, null, force, relPos);
  };

  function RigidBody_ApplyImpulse (impulse, relPos) {
    var o = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    $IM02().Call(o._iRigidBodyImp, null, impulse, relPos);
  };

  function RigidBody_get_AngularDrag () {
    return +$IM03().Call(this._iRigidBodyImp, null);
  };

  function RigidBody_get_AngularFactor () {
    return $IM04().Call(this._iRigidBodyImp, null);
  };

  function RigidBody_get_AngularVelocity () {
    return $IM05().Call(this._iRigidBodyImp, null);
  };

  function RigidBody_get_ApplyCentralForce () {
    return $IM06().Call(this._iRigidBodyImp, null);
  };

  function RigidBody_get_ApplyCentralImpulse () {
    return $IM07().Call(this._iRigidBodyImp, null);
  };

  function RigidBody_get_ApplyTorque () {
    return $IM08().Call(this._iRigidBodyImp, null);
  };

  function RigidBody_get_ApplyTorqueImpulse () {
    return $IM09().Call(this._iRigidBodyImp, null);
  };

  function RigidBody_get_CollisionShape () {
    var shape = $IM0A().Call(this._iRigidBodyImp, null);
    var shapeType = JSIL.GetType(shape).toString();
    var text = shapeType;
    if (text !== null) {
      switch (text) {
        case "Fusee.Engine.BoxShapeImp": 
          var box = new ($T08())();
          box.BoxShapeImp = $T09().$Cast(shape);
          $IM0B().Call(shape, null, box);
          var result = box;
          return result;

        case "Fusee.Engine.SphereShapeImp": 
          var sphere = new ($T0B())();
          sphere.SphereShapeImp = $T0C().$Cast(shape);
          $IM0B().Call(shape, null, sphere);
          result = sphere;
          return result;

        case "Fusee.Engine.CapsuleShapeImp": 
          var capsule = new ($T0D())();
          capsule.CapsuleShapeImp = $T0E().$Cast(shape);
          $IM0B().Call(shape, null, capsule);
          result = capsule;
          return result;

        case "Fusee.Engine.CylinderShapeImp": 
          var cylinder = new ($T0F())();
          cylinder.CylinderShapeImp = $T10().$Cast(shape);
          $IM0B().Call(shape, null, cylinder);
          result = cylinder;
          return result;

        case "Fusee.Engine.ConeShapeImp": 
          var cone = new ($T11())();
          cone.ConeShapeImp = $T12().$Cast(shape);
          $IM0B().Call(shape, null, cone);
          result = cone;
          return result;

        case "Fusee.Engine.MultiSphereShapeImp": 
          var multiSphere = new ($T13())();
          multiSphere.MultiSphereShapeImp = $T14().$Cast(shape);
          $IM0B().Call(shape, null, multiSphere);
          result = multiSphere;
          return result;

        case "Fusee.Engine.ConvexHullShapeImp": 
          var convHull = new ($T15())();
          convHull.ConvexHullShapeImp = $T16().$Cast(shape);
          $IM0B().Call(shape, null, convHull);
          result = convHull;
          return result;

        case "Fusee.Engine.GImpactMeshShapeImp": 
          var gimp = new ($T17())();
          gimp.GImpactMeshShapeImp = $T18().$Cast(shape);
          $IM0B().Call(shape, null, gimp);
          result = gimp;
          return result;

        case "Fusee.Engine.StaticPlaneShapeImp": 
          var staticPlane = new ($T19())();
          staticPlane.StaticPlaneShapeImp = $T1A().$Cast(shape);
          $IM0B().Call(shape, null, staticPlane);
          result = staticPlane;
          return result;

        case "Fusee.Engine.CompoundShapeImp": 
          var comp = new ($T1B())();
          comp.CompoundShapeImp = $T1C().$Cast(shape);
          $IM0B().Call(shape, null, comp);
          result = comp;
          return result;

        case "Fusee.Engine.EmptyShape": 
          var empty = new ($T1D())();
          empty.EmtyShapeImp = $T1E().$Cast(shape);
          $IM0B().Call(shape, null, empty);
          result = empty;
          return result;

      }
    }
    result = new ($T1D())();
    return result;
  };

  function RigidBody_get_Friction () {
    return +$IM0C().Call(this._iRigidBodyImp, null);
  };

  function RigidBody_get_Gravity () {
    return $IM0D().Call(this._iRigidBodyImp, null);
  };

  function RigidBody_get_Inertia () {
    return $IM0E().Call(this._iRigidBodyImp, null);
  };

  function RigidBody_get_LinearDrag () {
    return +$IM0F().Call(this._iRigidBodyImp, null);
  };

  function RigidBody_get_LinearFactor () {
    return $IM04().Call(this._iRigidBodyImp, null);
  };

  function RigidBody_get_LinearVelocity () {
    return $IM10().Call(this._iRigidBodyImp, null);
  };

  function RigidBody_get_Mass () {
    return +$IM11().Call(this._iRigidBodyImp, null);
  };

  function RigidBody_get_Position () {
    return $IM12().Call(this._iRigidBodyImp, null);
  };

  function RigidBody_get_Restitution () {
    return +$IM13().Call(this._iRigidBodyImp, null);
  };

  function RigidBody_get_WorldTransform () {
    return $IM14().Call(this._iRigidBodyImp, null);
  };

  function RigidBody_remove_WhileCollidingEvent (value) {
    var eventHandler = this.WhileCollidingEvent;

    do {
      var eventHandler2 = eventHandler;
      var value2 = $T01().Remove(eventHandler2, value);
      eventHandler = $T02().CompareExchange$b1($T00())(/* ref */ new JSIL.MemberReference(this, "WhileCollidingEvent"), value2, eventHandler2);
    } while (eventHandler !== eventHandler2);
  };

  function RigidBody_Rotation () {
    return $IM15().Call(this._iRigidBodyImp, null);
  };

  function RigidBody_set_AngularFactor (value) {
    var o = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    (o._iRigidBodyImp.AngularFactor = value);
  };

  function RigidBody_set_AngularVelocity (value) {
    var o = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    (o._iRigidBodyImp.AngularVelocity = value);
  };

  function RigidBody_set_ApplyCentralForce (value) {
    var o = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    (o._iRigidBodyImp.ApplyCentralForce = value);
  };

  function RigidBody_set_ApplyCentralImpulse (value) {
    var o = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    (o._iRigidBodyImp.ApplyCentralImpulse = value);
  };

  function RigidBody_set_ApplyTorque (value) {
    var o = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    (o._iRigidBodyImp.ApplyTorque = value);
  };

  function RigidBody_set_ApplyTorqueImpulse (value) {
    var o = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    (o._iRigidBodyImp.ApplyTorqueImpulse = value);
  };

  function RigidBody_set_CollisionShape (value) {
    var shapeType = JSIL.GetType(value).toString();
    var o = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    var text = shapeType;
    if (text !== null) {
      switch (text) {
        case "Fusee.Engine.BoxShape": 
          var box = $T08().$Cast(value);
          $IM16().Call(o._iRigidBodyImp, null, box.BoxShapeImp);
          return;

        case "Fusee.Engine.CapsuleShape": 
          var capsule = $T0D().$Cast(value);
          $IM16().Call(o._iRigidBodyImp, null, capsule.CapsuleShapeImp);
          return;

        case "Fusee.Engine.ConeShape": 
          var cone = $T11().$Cast(value);
          $IM16().Call(o._iRigidBodyImp, null, cone.ConeShapeImp);
          return;

        case "Fusee.Engine.CylinderShape": 
          var cylinder = $T0F().$Cast(value);
          $IM16().Call(o._iRigidBodyImp, null, cylinder.CylinderShapeImp);
          return;

        case "Fusee.Engine.MultiSphereShape": 
          var multiSphere = $T13().$Cast(value);
          $IM16().Call(o._iRigidBodyImp, null, multiSphere.MultiSphereShapeImp);
          return;

        case "Fusee.Engine.SphereShape": 
          var sphere = $T0B().$Cast(value);
          $IM16().Call(o._iRigidBodyImp, null, sphere.SphereShapeImp);
          return;

        case "Fusee.Engine.ConvexHullShape": 
          var convHull = $T15().$Cast(value);
          $IM16().Call(o._iRigidBodyImp, null, convHull.ConvexHullShapeImp);
          return;

        case "Fusee.Engine.StaticPlaneShape": 
          var staticPlane = $T19().$Cast(value);
          $IM16().Call(o._iRigidBodyImp, null, staticPlane.StaticPlaneShapeImp);
          return;

        case "Fusee.Engine.CompoundShape": 
          var compShape = $T1B().$Cast(value);
          $IM16().Call(o._iRigidBodyImp, null, compShape.CompoundShapeImp);
          return;

        case "Fusee.Engine.EmptyShape": 
          var empty = $T1D().$Cast(value);
          $IM16().Call(o._iRigidBodyImp, null, empty.EmtyShapeImp);
          return;

      }
    }
    var defaultShape = new ($T1D())();
    $S00().CallStatic($T1F(), "WriteLine", null, "default");
  };

  function RigidBody_set_Friction (value) {
    var o = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    $IM17().Call(o._iRigidBodyImp, null, value);
  };

  function RigidBody_set_Gravity (value) {
    var o = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    (this._iRigidBodyImp.Gravity = value);
  };

  function RigidBody_set_Inertia (value) {
    var o = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    (o._iRigidBodyImp.Inertia = value);
  };

  function RigidBody_set_LinearFactor (value) {
    var o = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    (o._iRigidBodyImp.LinearFactor = value);
  };

  function RigidBody_set_LinearVelocity (value) {
    var o = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    (o._iRigidBodyImp.LinearVelocity = value);
  };

  function RigidBody_set_Mass (value) {
    $IM18().Call(this._iRigidBodyImp, null, value);
  };

  function RigidBody_set_Position (value) {
    var o = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    (o._iRigidBodyImp.Position = value);
  };

  function RigidBody_set_Restitution (value) {
    var o = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    $IM19().Call(o._iRigidBodyImp, null, value);
  };

  function RigidBody_set_WorldTransform (value) {
    var o = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    (o._iRigidBodyImp.WorldTransform = value);
  };

  function RigidBody_SetDrag (linearDrag, anglularDrag) {
    var o = $thisType.$Cast($IM00().Call(this._iRigidBodyImp, null));
    $IM1A().Call(o._iRigidBodyImp, null, linearDrag, anglularDrag);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.RigidBody", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      RigidBody__ctor
    );

    $.Method({Static:false, Public:true }, "add_WhileCollidingEvent", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler")], []), 
      RigidBody_add_WhileCollidingEvent
    );

    $.Method({Static:false, Public:true }, "ApplyForce", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3"), $asm04.TypeRef("Fusee.Math.float3")], []), 
      RigidBody_ApplyForce
    );

    $.Method({Static:false, Public:true }, "ApplyImpulse", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3"), $asm04.TypeRef("Fusee.Math.float3")], []), 
      RigidBody_ApplyImpulse
    );

    $.Method({Static:false, Public:true }, "get_AngularDrag", 
      new JSIL.MethodSignature($.Single, [], []), 
      RigidBody_get_AngularDrag
    );

    $.Method({Static:false, Public:true }, "get_AngularFactor", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      RigidBody_get_AngularFactor
    );

    $.Method({Static:false, Public:true }, "get_AngularVelocity", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      RigidBody_get_AngularVelocity
    );

    $.Method({Static:false, Public:true }, "get_ApplyCentralForce", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      RigidBody_get_ApplyCentralForce
    );

    $.Method({Static:false, Public:true }, "get_ApplyCentralImpulse", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      RigidBody_get_ApplyCentralImpulse
    );

    $.Method({Static:false, Public:true }, "get_ApplyTorque", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      RigidBody_get_ApplyTorque
    );

    $.Method({Static:false, Public:true }, "get_ApplyTorqueImpulse", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      RigidBody_get_ApplyTorqueImpulse
    );

    $.Method({Static:false, Public:true }, "get_CollisionShape", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.CollisionShape"), [], []), 
      RigidBody_get_CollisionShape
    );

    $.Method({Static:false, Public:true }, "get_Friction", 
      new JSIL.MethodSignature($.Single, [], []), 
      RigidBody_get_Friction
    );

    $.Method({Static:false, Public:true }, "get_Gravity", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      RigidBody_get_Gravity
    );

    $.Method({Static:false, Public:true }, "get_Inertia", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      RigidBody_get_Inertia
    );

    $.Method({Static:false, Public:true }, "get_LinearDrag", 
      new JSIL.MethodSignature($.Single, [], []), 
      RigidBody_get_LinearDrag
    );

    $.Method({Static:false, Public:true }, "get_LinearFactor", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      RigidBody_get_LinearFactor
    );

    $.Method({Static:false, Public:true }, "get_LinearVelocity", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      RigidBody_get_LinearVelocity
    );

    $.Method({Static:false, Public:true }, "get_Mass", 
      new JSIL.MethodSignature($.Single, [], []), 
      RigidBody_get_Mass
    );

    $.Method({Static:false, Public:true }, "get_Position", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      RigidBody_get_Position
    );

    $.Method({Static:false, Public:true }, "get_Restitution", 
      new JSIL.MethodSignature($.Single, [], []), 
      RigidBody_get_Restitution
    );

    $.Method({Static:false, Public:true }, "get_WorldTransform", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      RigidBody_get_WorldTransform
    );

    $.Method({Static:false, Public:true }, "remove_WhileCollidingEvent", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.EventHandler")], []), 
      RigidBody_remove_WhileCollidingEvent
    );

    $.Method({Static:false, Public:true }, "Rotation", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.Quaternion"), [], []), 
      RigidBody_Rotation
    );

    $.Method({Static:false, Public:true }, "set_AngularFactor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      RigidBody_set_AngularFactor
    );

    $.Method({Static:false, Public:true }, "set_AngularVelocity", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      RigidBody_set_AngularVelocity
    );

    $.Method({Static:false, Public:true }, "set_ApplyCentralForce", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      RigidBody_set_ApplyCentralForce
    );

    $.Method({Static:false, Public:true }, "set_ApplyCentralImpulse", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      RigidBody_set_ApplyCentralImpulse
    );

    $.Method({Static:false, Public:true }, "set_ApplyTorque", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      RigidBody_set_ApplyTorque
    );

    $.Method({Static:false, Public:true }, "set_ApplyTorqueImpulse", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      RigidBody_set_ApplyTorqueImpulse
    );

    $.Method({Static:false, Public:true }, "set_CollisionShape", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.CollisionShape")], []), 
      RigidBody_set_CollisionShape
    );

    $.Method({Static:false, Public:true }, "set_Friction", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      RigidBody_set_Friction
    );

    $.Method({Static:false, Public:true }, "set_Gravity", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      RigidBody_set_Gravity
    );

    $.Method({Static:false, Public:true }, "set_Inertia", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      RigidBody_set_Inertia
    );

    $.Method({Static:false, Public:true }, "set_LinearFactor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      RigidBody_set_LinearFactor
    );

    $.Method({Static:false, Public:true }, "set_LinearVelocity", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      RigidBody_set_LinearVelocity
    );

    $.Method({Static:false, Public:true }, "set_Mass", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      RigidBody_set_Mass
    );

    $.Method({Static:false, Public:true }, "set_Position", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      RigidBody_set_Position
    );

    $.Method({Static:false, Public:true }, "set_Restitution", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      RigidBody_set_Restitution
    );

    $.Method({Static:false, Public:true }, "set_WorldTransform", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4")], []), 
      RigidBody_set_WorldTransform
    );

    $.Method({Static:false, Public:true }, "SetDrag", 
      new JSIL.MethodSignature(null, [$.Single, $.Single], []), 
      RigidBody_SetDrag
    );

    $.Field({Static:false, Public:false}, "WhileCollidingEvent", $asm07.TypeRef("System.EventHandler")); 
    $.Field({Static:false, Public:false}, "_iRigidBodyImp", $asm01.TypeRef("Fusee.Engine.IRigidBodyImp")); 
    $.Property({Static:false, Public:true }, "Gravity", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "Mass", $.Single);

    $.Property({Static:false, Public:true }, "Inertia", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "WorldTransform", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "Position", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "ApplyTorque", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "ApplyTorqueImpulse", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "ApplyCentralForce", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "ApplyCentralImpulse", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "LinearVelocity", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "AngularVelocity", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "LinearFactor", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "AngularFactor", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "Restitution", $.Single);

    $.Property({Static:false, Public:true }, "Friction", $.Single);

    $.Property({Static:false, Public:true }, "LinearDrag", $.Single);

    $.Property({Static:false, Public:true }, "AngularDrag", $.Single);

    $.Property({Static:false, Public:true }, "CollisionShape", $asm02.TypeRef("Fusee.Engine.CollisionShape"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.ShaderMaterial */ 

(function ShaderMaterial$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Fusee.Engine.ShaderProgram)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm02.Fusee.Engine.RenderContext)) ();
  };

  function ShaderMaterial__ctor (program) {
    this._sp = program;
  };

  function ShaderMaterial_GetShader () {
    return this._sp;
  };

  function ShaderMaterial_UpdateMaterial (rc) {
    rc.SetShader(this._sp);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.ShaderMaterial", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.ShaderProgram")], []), 
      ShaderMaterial__ctor
    );

    $.Method({Static:false, Public:true }, "GetShader", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.ShaderProgram"), [], []), 
      ShaderMaterial_GetShader
    );

    $.Method({Static:false, Public:true }, "UpdateMaterial", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.RenderContext")], []), 
      ShaderMaterial_UpdateMaterial
    );

    $.Field({Static:false, Public:false}, "_sp", $asm02.TypeRef("Fusee.Engine.ShaderProgram")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.ShaderProgram */ 

(function ShaderProgram$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Fusee.Engine.IShaderProgramImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Collections.Generic.Dictionary$b2.Of($asm07.System.String, $asm01.Fusee.Engine.IShaderParam))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerator$b1.Of($asm01.Fusee.Engine.ShaderParamInfo))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerable$b1.Of($asm01.Fusee.Engine.ShaderParamInfo))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Collections.IEnumerator)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Fusee.Engine.ShaderParamInfo)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Fusee.Engine.IShaderParam)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.String"), $asm01.TypeRef("Fusee.Engine.IShaderParam")]), []))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerable$b1.Of($asm01.Fusee.Engine.ShaderParamInfo).GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.GetShaderParamList)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm07.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerator$b1.Of($asm01.Fusee.Engine.ShaderParamInfo).get_Current)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };

  function ShaderProgram__ctor (renderContextImp, shaderProgramImp) {
    this._spi = shaderProgramImp;
    this._rci = renderContextImp;
    this._paramsByName = $S00().Construct();
    var enumerator = $IM00().Call($IM01().Call(this._rci, null, this._spi), null);
    try {

      while ($IM02().Call(enumerator, null)) {
        var info = $IM03().Call(enumerator, null).MemberwiseClone();
        this._paramsByName.Add(info.Name, info.Handle);
      }
    } finally {
      if (enumerator !== null) {
        $IM04().Call(enumerator, null);
      }
    }
  };

  function ShaderProgram_GetShaderParam (paramName) {
    var ret = new JSIL.BoxedVariable(null);
    if (this._paramsByName.TryGetValue(paramName, /* ref */ ret)) {
      var result = ret.get();
    } else {
      result = null;
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.ShaderProgram", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IRenderContextImp"), $asm01.TypeRef("Fusee.Engine.IShaderProgramImp")], []), 
      ShaderProgram__ctor
    );

    $.Method({Static:false, Public:true }, "GetShaderParam", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IShaderParam"), [$.String], []), 
      ShaderProgram_GetShaderParam
    );

    $.Field({Static:false, Public:false}, "_spi", $asm01.TypeRef("Fusee.Engine.IShaderProgramImp")); 
    $.Field({Static:false, Public:false}, "_rci", $asm01.TypeRef("Fusee.Engine.IRenderContextImp")); 
    $.Field({Static:false, Public:false}, "_paramsByName", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm01.TypeRef("Fusee.Engine.IShaderParam")])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.SliderConstraint */ 

(function SliderConstraint$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm04.Fusee.Math.float4x4)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Fusee.Engine.RigidBody)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.CalculateTransforms)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_AnchorInA)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_AnchorInB)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_AngularDepth)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_AngularPos)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_CalculatedTransformA)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_CalculatedTransformB)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_DampingDirAngular)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_DampingDirLin)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_DampingLimAngular)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_DampingLimLin)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_DampingOrthoAngular)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_DampingOrthoLin)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_FrameOffsetA)) ();
  };
  var $IM0E = function () {
    return ($IM0E = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_FrameOffsetB)) ();
  };
  var $IM0F = function () {
    return ($IM0F = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_LinDepth)) ();
  };
  var $IM10 = function () {
    return ($IM10 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_LinPos)) ();
  };
  var $IM11 = function () {
    return ($IM11 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_LowerAngularLimit)) ();
  };
  var $IM12 = function () {
    return ($IM12 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_LowerLinLimit)) ();
  };
  var $IM13 = function () {
    return ($IM13 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_MaxAngularMotorForce)) ();
  };
  var $IM14 = function () {
    return ($IM14 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_MaxLinMotorForce)) ();
  };
  var $IM15 = function () {
    return ($IM15 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_PoweredAngularMotor)) ();
  };
  var $IM16 = function () {
    return ($IM16 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_PoweredLinMotor)) ();
  };
  var $IM17 = function () {
    return ($IM17 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_RestitutionDirAngular)) ();
  };
  var $IM18 = function () {
    return ($IM18 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_RestitutionDirLin)) ();
  };
  var $IM19 = function () {
    return ($IM19 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_RestitutionLimAngular)) ();
  };
  var $IM1A = function () {
    return ($IM1A = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_RestitutionLimLin)) ();
  };
  var $IM1B = function () {
    return ($IM1B = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_RestitutionOrthoAngular)) ();
  };
  var $IM1C = function () {
    return ($IM1C = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_RestitutionOrthoLin)) ();
  };
  var $IM1D = function () {
    return ($IM1D = JSIL.Memoize($asm01.Fusee.Engine.IRigidBodyImp.get_UserObject)) ();
  };
  var $IM1E = function () {
    return ($IM1E = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.get_RigidBodyA)) ();
  };
  var $IM1F = function () {
    return ($IM1F = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.get_RigidBodyB)) ();
  };
  var $IM20 = function () {
    return ($IM20 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_SoftnessDirAngular)) ();
  };
  var $IM21 = function () {
    return ($IM21 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_SoftnessDirLin)) ();
  };
  var $IM22 = function () {
    return ($IM22 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_SoftnessLimAngular)) ();
  };
  var $IM23 = function () {
    return ($IM23 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_SoftnessLimLin)) ();
  };
  var $IM24 = function () {
    return ($IM24 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_SoftnessOrthoAngular)) ();
  };
  var $IM25 = function () {
    return ($IM25 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_SoftnessOrthoLin)) ();
  };
  var $IM26 = function () {
    return ($IM26 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_SolveAngularLimit)) ();
  };
  var $IM27 = function () {
    return ($IM27 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_SolveLinLimit)) ();
  };
  var $IM28 = function () {
    return ($IM28 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_TargetAngularMotorVelocity)) ();
  };
  var $IM29 = function () {
    return ($IM29 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_TargetLinMotorVelocity)) ();
  };
  var $IM2A = function () {
    return ($IM2A = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_UpperAngularLimit)) ();
  };
  var $IM2B = function () {
    return ($IM2B = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_UpperLinLimit)) ();
  };
  var $IM2C = function () {
    return ($IM2C = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_UseFrameOffset)) ();
  };
  var $IM2D = function () {
    return ($IM2D = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.get_UseLinearReferenceFrameA)) ();
  };
  var $IM2E = function () {
    return ($IM2E = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.GetUid)) ();
  };
  var $IM2F = function () {
    return ($IM2F = JSIL.Memoize($asm01.Fusee.Engine.IConstraintImp.get_UserObject)) ();
  };
  var $IM30 = function () {
    return ($IM30 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_DampingDirAngular)) ();
  };
  var $IM31 = function () {
    return ($IM31 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_DampingDirLin)) ();
  };
  var $IM32 = function () {
    return ($IM32 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_DampingLimAngular)) ();
  };
  var $IM33 = function () {
    return ($IM33 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_DampingLimLin)) ();
  };
  var $IM34 = function () {
    return ($IM34 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_DampingOrthoAngular)) ();
  };
  var $IM35 = function () {
    return ($IM35 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_DampingOrthoLin)) ();
  };
  var $IM36 = function () {
    return ($IM36 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_LowerAngularLimit)) ();
  };
  var $IM37 = function () {
    return ($IM37 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_LowerLinLimit)) ();
  };
  var $IM38 = function () {
    return ($IM38 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_MaxAngularMotorForce)) ();
  };
  var $IM39 = function () {
    return ($IM39 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_MaxLinMotorForce)) ();
  };
  var $IM3A = function () {
    return ($IM3A = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_PoweredAngularMotor)) ();
  };
  var $IM3B = function () {
    return ($IM3B = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_PoweredLinMotor)) ();
  };
  var $IM3C = function () {
    return ($IM3C = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_RestitutionDirAngular)) ();
  };
  var $IM3D = function () {
    return ($IM3D = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_RestitutionDirLin)) ();
  };
  var $IM3E = function () {
    return ($IM3E = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_RestitutionLimAngular)) ();
  };
  var $IM3F = function () {
    return ($IM3F = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_RestitutionLimLin)) ();
  };
  var $IM40 = function () {
    return ($IM40 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_RestitutionOrthoAngular)) ();
  };
  var $IM41 = function () {
    return ($IM41 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_RestitutionOrthoLin)) ();
  };
  var $IM42 = function () {
    return ($IM42 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_SoftnessDirAngular)) ();
  };
  var $IM43 = function () {
    return ($IM43 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_SoftnessDirLin)) ();
  };
  var $IM44 = function () {
    return ($IM44 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_SoftnessLimAngular)) ();
  };
  var $IM45 = function () {
    return ($IM45 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_SoftnessLimLin)) ();
  };
  var $IM46 = function () {
    return ($IM46 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_SoftnessOrthoAngular)) ();
  };
  var $IM47 = function () {
    return ($IM47 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_SoftnessOrthoLin)) ();
  };
  var $IM48 = function () {
    return ($IM48 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_TargetAngularMotorVelocity)) ();
  };
  var $IM49 = function () {
    return ($IM49 = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_TargetLinMotorVelocity)) ();
  };
  var $IM4A = function () {
    return ($IM4A = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_UpperAngularLimit)) ();
  };
  var $IM4B = function () {
    return ($IM4B = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_UpperLinLimit)) ();
  };
  var $IM4C = function () {
    return ($IM4C = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.set_UseFrameOffset)) ();
  };
  var $IM4D = function () {
    return ($IM4D = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.SetFrames)) ();
  };
  var $IM4E = function () {
    return ($IM4E = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.TestAngularLimits)) ();
  };
  var $IM4F = function () {
    return ($IM4F = JSIL.Memoize($asm01.Fusee.Engine.ISliderConstraintImp.TestLinLimits)) ();
  };

  function SliderConstraint__ctor () {
  };

  function SliderConstraint_CalculateTransforms (transA, transB) {
    $IM00().Call(this._iSliderConstraintImp, null, transA, transB);
  };

  function SliderConstraint_get_AnchorInA () {
    return $IM01().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_AnchorInB () {
    return $IM02().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_AngularDepth () {
    return +$IM03().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_AngularPos () {
    return +$IM04().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_CalculatedTransformA () {
    return $IM05().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_CalculatedTransformB () {
    return $IM06().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_DampingDirAngular () {
    return +$IM07().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_DampingDirLin () {
    return +$IM08().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_DampingLimAngular () {
    return +$IM09().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_DampingLimLin () {
    return +$IM0A().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_DampingOrthoAngular () {
    return +$IM0B().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_DampingOrthoLin () {
    return +$IM0C().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_FrameOffsetA () {
    return $IM0D().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_FrameOffsetB () {
    return $IM0E().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_LinDepth () {
    return +$IM0F().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_LinPos () {
    return +$IM10().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_LowerAngularLimit () {
    return +$IM11().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_LowerLinLimit () {
    return +$IM12().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_MaxAngularMotorForce () {
    return +$IM13().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_MaxLinMotorForce () {
    return +$IM14().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_PoweredAngularMotor () {
    return $IM15().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_PoweredLinMotor () {
    return $IM16().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_RestitutionDirAngular () {
    return +$IM17().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_RestitutionDirLin () {
    return +$IM18().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_RestitutionLimAngular () {
    return +$IM19().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_RestitutionLimLin () {
    return +$IM1A().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_RestitutionOrthoAngular () {
    return +$IM1B().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_RestitutionOrthoLin () {
    return +$IM1C().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_RigidBodyA () {
    var retval = $IM1D().Call($IM1E().Call(this._iSliderConstraintImp, null), null);
    return $T05().$Cast(retval);
  };

  function SliderConstraint_get_RigidBodyB () {
    var retval = $IM1D().Call($IM1F().Call(this._iSliderConstraintImp, null), null);
    return $T05().$Cast(retval);
  };

  function SliderConstraint_get_SoftnessDirAngular () {
    return +$IM20().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_SoftnessDirLin () {
    return +$IM21().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_SoftnessLimAngular () {
    return +$IM22().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_SoftnessLimLin () {
    return +$IM23().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_SoftnessOrthoAngular () {
    return +$IM24().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_SoftnessOrthoLin () {
    return +$IM25().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_SolveAngularLimit () {
    return $IM26().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_SolveLinLimit () {
    return $IM27().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_TargetAngularMotorVelocity () {
    return +$IM28().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_TargetLinMotorVelocity () {
    return +$IM29().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_UpperAngularLimit () {
    return +$IM2A().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_UpperLinLimit () {
    return +$IM2B().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_UseFrameOffset () {
    return $IM2C().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_get_UseLinearReferenceFrameA () {
    return $IM2D().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_GetUid () {
    return $IM2E().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_set_DampingDirAngular (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM30().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_DampingDirLin (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM31().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_DampingLimAngular (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM32().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_DampingLimLin (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM33().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_DampingOrthoAngular (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM34().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_DampingOrthoLin (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM35().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_LowerAngularLimit (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM36().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_LowerLinLimit (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM37().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_MaxAngularMotorForce (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM38().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_MaxLinMotorForce (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM39().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_PoweredAngularMotor (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM3A().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_PoweredLinMotor (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM3B().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_RestitutionDirAngular (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM3C().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_RestitutionDirLin (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM3D().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_RestitutionLimAngular (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM3E().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_RestitutionLimLin (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM3F().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_RestitutionOrthoAngular (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM40().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_RestitutionOrthoLin (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM41().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_SoftnessDirAngular (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM42().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_SoftnessDirLin (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM43().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_SoftnessLimAngular (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM44().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_SoftnessLimLin (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM45().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_SoftnessOrthoAngular (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM46().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_SoftnessOrthoLin (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM47().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_TargetAngularMotorVelocity (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM48().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_TargetLinMotorVelocity (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM49().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_UpperAngularLimit (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM4A().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_UpperLinLimit (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM4B().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_set_UseFrameOffset (value) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM4C().Call(o._iSliderConstraintImp, null, value);
  };

  function SliderConstraint_SetFrames (frameA, frameB) {
    var o = $thisType.$Cast($IM2F().Call(this._iSliderConstraintImp, null));
    $IM4D().Call(o._iSliderConstraintImp, null, frameA, frameB);
  };

  function SliderConstraint_TestAngularLimits () {
    $IM4E().Call(this._iSliderConstraintImp, null);
  };

  function SliderConstraint_TestLinLimits () {
    $IM4F().Call(this._iSliderConstraintImp, null);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.SliderConstraint", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      SliderConstraint__ctor
    );

    $.Method({Static:false, Public:true }, "CalculateTransforms", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4")], []), 
      SliderConstraint_CalculateTransforms
    );

    $.Method({Static:false, Public:true }, "get_AnchorInA", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      SliderConstraint_get_AnchorInA
    );

    $.Method({Static:false, Public:true }, "get_AnchorInB", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      SliderConstraint_get_AnchorInB
    );

    $.Method({Static:false, Public:true }, "get_AngularDepth", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_AngularDepth
    );

    $.Method({Static:false, Public:true }, "get_AngularPos", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_AngularPos
    );

    $.Method({Static:false, Public:true }, "get_CalculatedTransformA", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      SliderConstraint_get_CalculatedTransformA
    );

    $.Method({Static:false, Public:true }, "get_CalculatedTransformB", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      SliderConstraint_get_CalculatedTransformB
    );

    $.Method({Static:false, Public:true }, "get_DampingDirAngular", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_DampingDirAngular
    );

    $.Method({Static:false, Public:true }, "get_DampingDirLin", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_DampingDirLin
    );

    $.Method({Static:false, Public:true }, "get_DampingLimAngular", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_DampingLimAngular
    );

    $.Method({Static:false, Public:true }, "get_DampingLimLin", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_DampingLimLin
    );

    $.Method({Static:false, Public:true }, "get_DampingOrthoAngular", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_DampingOrthoAngular
    );

    $.Method({Static:false, Public:true }, "get_DampingOrthoLin", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_DampingOrthoLin
    );

    $.Method({Static:false, Public:true }, "get_FrameOffsetA", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      SliderConstraint_get_FrameOffsetA
    );

    $.Method({Static:false, Public:true }, "get_FrameOffsetB", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      SliderConstraint_get_FrameOffsetB
    );

    $.Method({Static:false, Public:true }, "get_LinDepth", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_LinDepth
    );

    $.Method({Static:false, Public:true }, "get_LinPos", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_LinPos
    );

    $.Method({Static:false, Public:true }, "get_LowerAngularLimit", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_LowerAngularLimit
    );

    $.Method({Static:false, Public:true }, "get_LowerLinLimit", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_LowerLinLimit
    );

    $.Method({Static:false, Public:true }, "get_MaxAngularMotorForce", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_MaxAngularMotorForce
    );

    $.Method({Static:false, Public:true }, "get_MaxLinMotorForce", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_MaxLinMotorForce
    );

    $.Method({Static:false, Public:true }, "get_PoweredAngularMotor", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      SliderConstraint_get_PoweredAngularMotor
    );

    $.Method({Static:false, Public:true }, "get_PoweredLinMotor", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      SliderConstraint_get_PoweredLinMotor
    );

    $.Method({Static:false, Public:true }, "get_RestitutionDirAngular", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_RestitutionDirAngular
    );

    $.Method({Static:false, Public:true }, "get_RestitutionDirLin", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_RestitutionDirLin
    );

    $.Method({Static:false, Public:true }, "get_RestitutionLimAngular", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_RestitutionLimAngular
    );

    $.Method({Static:false, Public:true }, "get_RestitutionLimLin", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_RestitutionLimLin
    );

    $.Method({Static:false, Public:true }, "get_RestitutionOrthoAngular", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_RestitutionOrthoAngular
    );

    $.Method({Static:false, Public:true }, "get_RestitutionOrthoLin", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_RestitutionOrthoLin
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyA", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.RigidBody"), [], []), 
      SliderConstraint_get_RigidBodyA
    );

    $.Method({Static:false, Public:true }, "get_RigidBodyB", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.RigidBody"), [], []), 
      SliderConstraint_get_RigidBodyB
    );

    $.Method({Static:false, Public:true }, "get_SoftnessDirAngular", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_SoftnessDirAngular
    );

    $.Method({Static:false, Public:true }, "get_SoftnessDirLin", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_SoftnessDirLin
    );

    $.Method({Static:false, Public:true }, "get_SoftnessLimAngular", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_SoftnessLimAngular
    );

    $.Method({Static:false, Public:true }, "get_SoftnessLimLin", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_SoftnessLimLin
    );

    $.Method({Static:false, Public:true }, "get_SoftnessOrthoAngular", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_SoftnessOrthoAngular
    );

    $.Method({Static:false, Public:true }, "get_SoftnessOrthoLin", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_SoftnessOrthoLin
    );

    $.Method({Static:false, Public:true }, "get_SolveAngularLimit", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      SliderConstraint_get_SolveAngularLimit
    );

    $.Method({Static:false, Public:true }, "get_SolveLinLimit", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      SliderConstraint_get_SolveLinLimit
    );

    $.Method({Static:false, Public:true }, "get_TargetAngularMotorVelocity", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_TargetAngularMotorVelocity
    );

    $.Method({Static:false, Public:true }, "get_TargetLinMotorVelocity", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_TargetLinMotorVelocity
    );

    $.Method({Static:false, Public:true }, "get_UpperAngularLimit", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_UpperAngularLimit
    );

    $.Method({Static:false, Public:true }, "get_UpperLinLimit", 
      new JSIL.MethodSignature($.Single, [], []), 
      SliderConstraint_get_UpperLinLimit
    );

    $.Method({Static:false, Public:true }, "get_UseFrameOffset", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      SliderConstraint_get_UseFrameOffset
    );

    $.Method({Static:false, Public:true }, "get_UseLinearReferenceFrameA", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      SliderConstraint_get_UseLinearReferenceFrameA
    );

    $.Method({Static:false, Public:true }, "GetUid", 
      new JSIL.MethodSignature($.Int32, [], []), 
      SliderConstraint_GetUid
    );

    $.Method({Static:false, Public:true }, "set_DampingDirAngular", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_DampingDirAngular
    );

    $.Method({Static:false, Public:true }, "set_DampingDirLin", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_DampingDirLin
    );

    $.Method({Static:false, Public:true }, "set_DampingLimAngular", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_DampingLimAngular
    );

    $.Method({Static:false, Public:true }, "set_DampingLimLin", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_DampingLimLin
    );

    $.Method({Static:false, Public:true }, "set_DampingOrthoAngular", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_DampingOrthoAngular
    );

    $.Method({Static:false, Public:true }, "set_DampingOrthoLin", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_DampingOrthoLin
    );

    $.Method({Static:false, Public:true }, "set_LowerAngularLimit", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_LowerAngularLimit
    );

    $.Method({Static:false, Public:true }, "set_LowerLinLimit", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_LowerLinLimit
    );

    $.Method({Static:false, Public:true }, "set_MaxAngularMotorForce", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_MaxAngularMotorForce
    );

    $.Method({Static:false, Public:true }, "set_MaxLinMotorForce", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_MaxLinMotorForce
    );

    $.Method({Static:false, Public:true }, "set_PoweredAngularMotor", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      SliderConstraint_set_PoweredAngularMotor
    );

    $.Method({Static:false, Public:true }, "set_PoweredLinMotor", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      SliderConstraint_set_PoweredLinMotor
    );

    $.Method({Static:false, Public:true }, "set_RestitutionDirAngular", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_RestitutionDirAngular
    );

    $.Method({Static:false, Public:true }, "set_RestitutionDirLin", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_RestitutionDirLin
    );

    $.Method({Static:false, Public:true }, "set_RestitutionLimAngular", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_RestitutionLimAngular
    );

    $.Method({Static:false, Public:true }, "set_RestitutionLimLin", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_RestitutionLimLin
    );

    $.Method({Static:false, Public:true }, "set_RestitutionOrthoAngular", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_RestitutionOrthoAngular
    );

    $.Method({Static:false, Public:true }, "set_RestitutionOrthoLin", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_RestitutionOrthoLin
    );

    $.Method({Static:false, Public:true }, "set_SoftnessDirAngular", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_SoftnessDirAngular
    );

    $.Method({Static:false, Public:true }, "set_SoftnessDirLin", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_SoftnessDirLin
    );

    $.Method({Static:false, Public:true }, "set_SoftnessLimAngular", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_SoftnessLimAngular
    );

    $.Method({Static:false, Public:true }, "set_SoftnessLimLin", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_SoftnessLimLin
    );

    $.Method({Static:false, Public:true }, "set_SoftnessOrthoAngular", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_SoftnessOrthoAngular
    );

    $.Method({Static:false, Public:true }, "set_SoftnessOrthoLin", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_SoftnessOrthoLin
    );

    $.Method({Static:false, Public:true }, "set_TargetAngularMotorVelocity", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_TargetAngularMotorVelocity
    );

    $.Method({Static:false, Public:true }, "set_TargetLinMotorVelocity", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_TargetLinMotorVelocity
    );

    $.Method({Static:false, Public:true }, "set_UpperAngularLimit", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_UpperAngularLimit
    );

    $.Method({Static:false, Public:true }, "set_UpperLinLimit", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SliderConstraint_set_UpperLinLimit
    );

    $.Method({Static:false, Public:true }, "set_UseFrameOffset", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      SliderConstraint_set_UseFrameOffset
    );

    $.Method({Static:false, Public:true }, "SetFrames", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4")], []), 
      SliderConstraint_SetFrames
    );

    $.Method({Static:false, Public:true }, "TestAngularLimits", 
      new JSIL.MethodSignature(null, [], []), 
      SliderConstraint_TestAngularLimits
    );

    $.Method({Static:false, Public:true }, "TestLinLimits", 
      new JSIL.MethodSignature(null, [], []), 
      SliderConstraint_TestLinLimits
    );

    $.Field({Static:false, Public:false}, "_iSliderConstraintImp", $asm01.TypeRef("Fusee.Engine.ISliderConstraintImp")); 
    $.Property({Static:false, Public:true }, "AnchorInA", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "AnchorInB", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "AngularDepth", $.Single);

    $.Property({Static:false, Public:true }, "AngularPos", $.Single);

    $.Property({Static:false, Public:true }, "CalculatedTransformA", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "CalculatedTransformB", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "DampingDirAngular", $.Single);

    $.Property({Static:false, Public:true }, "DampingDirLin", $.Single);

    $.Property({Static:false, Public:true }, "DampingLimAngular", $.Single);

    $.Property({Static:false, Public:true }, "DampingLimLin", $.Single);

    $.Property({Static:false, Public:true }, "DampingOrthoAngular", $.Single);

    $.Property({Static:false, Public:true }, "DampingOrthoLin", $.Single);

    $.Property({Static:false, Public:true }, "FrameOffsetA", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "FrameOffsetB", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "LinDepth", $.Single);

    $.Property({Static:false, Public:true }, "LinPos", $.Single);

    $.Property({Static:false, Public:true }, "LowerAngularLimit", $.Single);

    $.Property({Static:false, Public:true }, "LowerLinLimit", $.Single);

    $.Property({Static:false, Public:true }, "MaxAngularMotorForce", $.Single);

    $.Property({Static:false, Public:true }, "MaxLinMotorForce", $.Single);

    $.Property({Static:false, Public:true }, "PoweredAngularMotor", $.Boolean);

    $.Property({Static:false, Public:true }, "PoweredLinMotor", $.Boolean);

    $.Property({Static:false, Public:true }, "RestitutionDirAngular", $.Single);

    $.Property({Static:false, Public:true }, "RestitutionDirLin", $.Single);

    $.Property({Static:false, Public:true }, "RestitutionLimAngular", $.Single);

    $.Property({Static:false, Public:true }, "RestitutionLimLin", $.Single);

    $.Property({Static:false, Public:true }, "RestitutionOrthoAngular", $.Single);

    $.Property({Static:false, Public:true }, "RestitutionOrthoLin", $.Single);

    $.Property({Static:false, Public:true }, "SoftnessDirAngular", $.Single);

    $.Property({Static:false, Public:true }, "SoftnessDirLin", $.Single);

    $.Property({Static:false, Public:true }, "SoftnessLimAngular", $.Single);

    $.Property({Static:false, Public:true }, "SoftnessLimLin", $.Single);

    $.Property({Static:false, Public:true }, "SoftnessOrthoAngular", $.Single);

    $.Property({Static:false, Public:true }, "SoftnessOrthoLin", $.Single);

    $.Property({Static:false, Public:true }, "SolveAngularLimit", $.Boolean);

    $.Property({Static:false, Public:true }, "SolveLinLimit", $.Boolean);

    $.Property({Static:false, Public:true }, "TargetAngularMotorVelocity", $.Single);

    $.Property({Static:false, Public:true }, "TargetLinMotorVelocity", $.Single);

    $.Property({Static:false, Public:true }, "UpperAngularLimit", $.Single);

    $.Property({Static:false, Public:true }, "UpperLinLimit", $.Single);

    $.Property({Static:false, Public:true }, "UseFrameOffset", $.Boolean);

    $.Property({Static:false, Public:true }, "UseLinearReferenceFrameA", $.Boolean);

    $.Property({Static:false, Public:true }, "RigidBodyA", $asm02.TypeRef("Fusee.Engine.RigidBody"));

    $.Property({Static:false, Public:true }, "RigidBodyB", $asm02.TypeRef("Fusee.Engine.RigidBody"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.SphereShape */ 

(function SphereShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Fusee.Engine.CollisionShape)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Fusee.Engine.ISphereShapeImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm04.Fusee.Math.float3)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_LocalScaling)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.ISphereShapeImp.get_Radius)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.set_Margin)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.Fusee.Engine.ISphereShapeImp.set_Radius)) ();
  };

  function SphereShape__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function SphereShape_get_LocalScaling () {
    return $IM00().Call(this.SphereShapeImp, null);
  };

  function SphereShape_get_Margin () {
    return +$IM01().Call(this.SphereShapeImp, null);
  };

  function SphereShape_get_Radius () {
    return +$IM02().Call(this.SphereShapeImp, null);
  };

  function SphereShape_set_LocalScaling (value) {
    var o = $thisType.$Cast($IM03().Call(this.SphereShapeImp, null));
    (o.SphereShapeImp.LocalScaling = value);
  };

  function SphereShape_set_Margin (value) {
    var o = $thisType.$Cast($IM03().Call(this.SphereShapeImp, null));
    $IM04().Call(o.SphereShapeImp, null, value);
  };

  function SphereShape_set_Radius (value) {
    var o = $thisType.$Cast($IM03().Call(this.SphereShapeImp, null));
    $IM05().Call(o.SphereShapeImp, null, value);
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Fusee.Engine.CollisionShape"), 
      Name: "Fusee.Engine.SphereShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      SphereShape__ctor
    );

    $.Method({Static:false, Public:true }, "get_LocalScaling", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      SphereShape_get_LocalScaling
    );

    $.Method({Static:false, Public:true }, "get_Margin", 
      new JSIL.MethodSignature($.Single, [], []), 
      SphereShape_get_Margin
    );

    $.Method({Static:false, Public:true }, "get_Radius", 
      new JSIL.MethodSignature($.Single, [], []), 
      SphereShape_get_Radius
    );

    $.Method({Static:false, Public:true }, "set_LocalScaling", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float3")], []), 
      SphereShape_set_LocalScaling
    );

    $.Method({Static:false, Public:true }, "set_Margin", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SphereShape_set_Margin
    );

    $.Method({Static:false, Public:true }, "set_Radius", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      SphereShape_set_Radius
    );

    $.Field({Static:false, Public:false}, "SphereShapeImp", $asm01.TypeRef("Fusee.Engine.ISphereShapeImp")); 
    $.Property({Static:false, Public:true }, "Margin", $.Single);

    $.Property({Static:false, Public:true }, "LocalScaling", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true }, "Radius", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.StaticPlaneShape */ 

(function StaticPlaneShape$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Fusee.Engine.CollisionShape)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Fusee.Engine.IStaticPlaneShapeImp)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_Margin)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.IStaticPlaneShapeImp.get_PlaneConstant)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.IStaticPlaneShapeImp.get_PlaneNormal)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.get_UserObject)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.ICollisionShapeImp.set_Margin)) ();
  };

  function StaticPlaneShape__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function StaticPlaneShape_get_Margin () {
    return +$IM00().Call(this.StaticPlaneShapeImp, null);
  };

  function StaticPlaneShape_get_PlaneConstant () {
    return +$IM01().Call(this.StaticPlaneShapeImp, null);
  };

  function StaticPlaneShape_get_PlaneNormal () {
    return $IM02().Call(this.StaticPlaneShapeImp, null);
  };

  function StaticPlaneShape_set_Margin (value) {
    var o = $thisType.$Cast($IM03().Call(this.StaticPlaneShapeImp, null));
    $IM04().Call(o.StaticPlaneShapeImp, null, value);
  };

  JSIL.MakeType({
      BaseType: $asm02.TypeRef("Fusee.Engine.CollisionShape"), 
      Name: "Fusee.Engine.StaticPlaneShape", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      StaticPlaneShape__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Margin", 
      new JSIL.MethodSignature($.Single, [], []), 
      StaticPlaneShape_get_Margin
    );

    $.Method({Static:false, Public:true }, "get_PlaneConstant", 
      new JSIL.MethodSignature($.Single, [], []), 
      StaticPlaneShape_get_PlaneConstant
    );

    $.Method({Static:false, Public:true }, "get_PlaneNormal", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [], []), 
      StaticPlaneShape_get_PlaneNormal
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Margin", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      StaticPlaneShape_set_Margin
    );

    $.Field({Static:false, Public:false}, "StaticPlaneShapeImp", $asm01.TypeRef("Fusee.Engine.IStaticPlaneShapeImp")); 
    $.Property({Static:false, Public:true }, "PlaneConstant", $.Single);

    $.Property({Static:false, Public:true }, "PlaneNormal", $asm04.TypeRef("Fusee.Math.float3"));

    $.Property({Static:false, Public:true , Virtual:true }, "Margin", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Network */ 

(function Network$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Fusee.Engine.ConnectionUpdateEvent)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Fusee.Engine.INetworkImp)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Collections.ObjectModel.Collection$b1.Of($asm01.Fusee.Engine.INetworkConnection))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Fusee.Engine.INetworkMsg)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Collections.Generic.List$b1.Of($asm01.Fusee.Engine.INetworkMsg))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm07.System.Byte))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Fusee.Engine.MessageDelivery)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm01.Fusee.Engine.NetConfigValues)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.Fusee.Engine.NetStatusValues)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm01.TypeRef("Fusee.Engine.INetworkConnection")]), [$asm07.TypeRef("System.Collections.Generic.IList`1", [$asm01.TypeRef("Fusee.Engine.INetworkConnection")])]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.INetworkImp.add_ConnectionUpdate)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.INetworkImp.CloseConnection)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.INetworkImp.CloseDevices)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.INetworkImp.get_Config)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.INetworkImp.get_Connections)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.Fusee.Engine.INetworkImp.get_IncomingMsg)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm01.Fusee.Engine.INetworkImp.GetLocalIp)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm01.Fusee.Engine.INetworkImp.get_Status)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm01.Fusee.Engine.INetworkImp.OnUpdateFrame)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm01.Fusee.Engine.INetworkImp.OpenConnection)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm01.Fusee.Engine.INetworkImp.remove_ConnectionUpdate)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm01.Fusee.Engine.INetworkImp.SendDiscoveryMessage)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm01.Fusee.Engine.INetworkImp.SendMessage)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm01.Fusee.Engine.INetworkImp.set_Config)) ();
  };
  var $IM0E = function () {
    return ($IM0E = JSIL.Memoize($asm01.Fusee.Engine.INetworkImp.set_Status)) ();
  };
  var $IM0F = function () {
    return ($IM0F = JSIL.Memoize($asm01.Fusee.Engine.INetworkImp.StartPeer)) ();
  };

  function Network__ctor () {
  };

  function Network_add_OnConnectionUpdate (value) {
    $IM00().Call(this._networkImp, null, value);
  };

  function Network_CloseConnection () {
    $IM01().Call(this._networkImp, null);
  };

  function Network_CloseDevice () {
    $IM02().Call(this._networkImp, null);
  };

  function Network_get_Config () {
    return $IM03().Call(this._networkImp, null);
  };

  function Network_get_Connections () {
    return $S00().Construct($IM04().Call(this._networkImp, null));
  };

  function Network_get_IncomingMsg () {
    var msg = this.FirstMessage();
    if (msg !== null) {
      $IM05().Call(this._networkImp, null).Remove(msg);
    }
    return msg;
  };

  function Network_get_IncomingMsgCount () {
    return $IM05().Call(this._networkImp, null).get_Count();
  };

  function Network_get_Instance () {
    var arg_15_0 = null;
    if ((arg_15_0 = $thisType._instance) === null) {
      arg_15_0 = ($thisType._instance = new $thisType());
    }
    return arg_15_0;
  };

  function Network_get_LocalIP () {
    return $IM06().Call(this._networkImp, null);
  };

  function Network_get_Status () {
    return $IM07().Call(this._networkImp, null);
  };

  function Network_OnUpdateFrame () {
    $IM08().Call(this._networkImp, null);
  };

  function Network_OpenConnection$00 (host) {
    this.OpenConnection(host, this.get_Config().DefaultPort);
  };

  function Network_OpenConnection$01 (port) {
    this.OpenConnection($T05().Empty, port);
  };

  function Network_OpenConnection$02 (host, port) {
    $IM09().Call(this._networkImp, null, this.get_Config().SysType, host, port);
  };

  function Network_remove_OnConnectionUpdate (value) {
    $IM0A().Call(this._networkImp, null, value);
  };

  function Network_SendDiscoveryMessage$03 () {
    $IM0B().Call(this._networkImp, null, this.get_Config().DefaultPort);
  };

  function Network_SendDiscoveryMessage$04 (port) {
    $IM0B().Call(this._networkImp, null, port);
  };

  function Network_SendMessage$05 (msg) {
    return this.SendMessage(msg, $T08().ReliableOrdered, 0);
  };

  function Network_SendMessage$06 (msg, msgDelivery, channelID) {
    return $IM0C().Call(this._networkImp, null, msg, msgDelivery, channelID);
  };

  function Network_set_Config (value) {
    $IM0D().Call(this._networkImp, null, value);
  };

  function Network_set_NetworkImp (value) {
    this._networkImp = value;
  };

  function Network_set_Status (value) {
    $IM0E().Call(this._networkImp, null, value);
  };

  function Network_StartPeer$07 () {
    this.StartPeer(this.get_Config().DefaultPort);
  };

  function Network_StartPeer$08 (port) {
    $IM0F().Call(this._networkImp, null, port);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Network", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      Network__ctor
    );

    $.Method({Static:false, Public:true }, "add_OnConnectionUpdate", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.ConnectionUpdateEvent")], []), 
      Network_add_OnConnectionUpdate
    );

    $.Method({Static:false, Public:true }, "CloseConnection", 
      new JSIL.MethodSignature(null, [], []), 
      Network_CloseConnection
    );

    $.Method({Static:false, Public:true }, "CloseDevice", 
      new JSIL.MethodSignature(null, [], []), 
      Network_CloseDevice
    );

    $.ExternalMethod({Static:false, Public:false}, "FirstMessage", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.INetworkMsg"), [], [])
    )
      .Attribute($asm0F.TypeRef("JSIL.Meta.JSExternal"));

    $.Method({Static:false, Public:true }, "get_Config", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.NetConfigValues"), [], []), 
      Network_get_Config
    );

    $.Method({Static:false, Public:true }, "get_Connections", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm01.TypeRef("Fusee.Engine.INetworkConnection")]), [], []), 
      Network_get_Connections
    );

    $.Method({Static:false, Public:true }, "get_IncomingMsg", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.INetworkMsg"), [], []), 
      Network_get_IncomingMsg
    );

    $.Method({Static:false, Public:true }, "get_IncomingMsgCount", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Network_get_IncomingMsgCount
    );

    $.Method({Static:true , Public:true }, "get_Instance", 
      new JSIL.MethodSignature($.Type, [], []), 
      Network_get_Instance
    );

    $.Method({Static:false, Public:true }, "get_LocalIP", 
      new JSIL.MethodSignature($.String, [], []), 
      Network_get_LocalIP
    );

    $.Method({Static:false, Public:true }, "get_Status", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.NetStatusValues"), [], []), 
      Network_get_Status
    );

    $.Method({Static:false, Public:false}, "OnUpdateFrame", 
      new JSIL.MethodSignature(null, [], []), 
      Network_OnUpdateFrame
    );

    $.Method({Static:false, Public:true }, "OpenConnection", 
      new JSIL.MethodSignature(null, [$.String], []), 
      Network_OpenConnection$00
    );

    $.Method({Static:false, Public:true }, "OpenConnection", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      Network_OpenConnection$01
    );

    $.Method({Static:false, Public:true }, "OpenConnection", 
      new JSIL.MethodSignature(null, [$.String, $.Int32], []), 
      Network_OpenConnection$02
    );

    $.Method({Static:false, Public:true }, "remove_OnConnectionUpdate", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.ConnectionUpdateEvent")], []), 
      Network_remove_OnConnectionUpdate
    );

    $.Method({Static:false, Public:true }, "SendDiscoveryMessage", 
      new JSIL.MethodSignature(null, [], []), 
      Network_SendDiscoveryMessage$03
    );

    $.Method({Static:false, Public:true }, "SendDiscoveryMessage", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      Network_SendDiscoveryMessage$04
    );

    $.Method({Static:false, Public:true }, "SendMessage", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte])], []), 
      Network_SendMessage$05
    );

    $.Method({Static:false, Public:true }, "SendMessage", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm01.TypeRef("Fusee.Engine.MessageDelivery"), 
          $.Int32
        ], []), 
      Network_SendMessage$06
    );

    $.Method({Static:false, Public:true }, "set_Config", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.NetConfigValues")], []), 
      Network_set_Config
    );

    $.Method({Static:false, Public:false}, "set_NetworkImp", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.INetworkImp")], []), 
      Network_set_NetworkImp
    );

    $.Method({Static:false, Public:true }, "set_Status", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.NetStatusValues")], []), 
      Network_set_Status
    );

    $.Method({Static:false, Public:true }, "StartPeer", 
      new JSIL.MethodSignature(null, [], []), 
      Network_StartPeer$07
    );

    $.Method({Static:false, Public:true }, "StartPeer", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      Network_StartPeer$08
    );

    $.Field({Static:true , Public:false}, "_instance", $.Type); 
    $.Field({Static:false, Public:false}, "_networkImp", $asm01.TypeRef("Fusee.Engine.INetworkImp")); 
    $.Property({Static:false, Public:false}, "NetworkImp", $asm01.TypeRef("Fusee.Engine.INetworkImp"));

    $.Property({Static:false, Public:true }, "Status", $asm01.TypeRef("Fusee.Engine.NetStatusValues"));

    $.Property({Static:false, Public:true }, "Config", $asm01.TypeRef("Fusee.Engine.NetConfigValues"));

    $.Property({Static:false, Public:true }, "Connections", $asm07.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm01.TypeRef("Fusee.Engine.INetworkConnection")]));

    $.Property({Static:false, Public:true }, "LocalIP", $.String);

    $.Property({Static:false, Public:true }, "IncomingMsgCount", $.Int32);

    $.Property({Static:false, Public:true }, "IncomingMsg", $asm01.TypeRef("Fusee.Engine.INetworkMsg"));

    $.Property({Static:true , Public:true }, "Instance", $.Type);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.ParticleData */ 

(function ParticleData$Members () {
  var $, $thisType;
  function ParticleData__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.ParticleData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ParticleData__ctor
    );

    $.Field({Static:false, Public:true }, "Position", $asm04.TypeRef("Fusee.Math.float3")); 
    $.Field({Static:false, Public:true }, "Velocity", $asm04.TypeRef("Fusee.Math.float3")); 
    $.Field({Static:false, Public:true }, "Gravity", $asm04.TypeRef("Fusee.Math.float3")); 
    $.Field({Static:false, Public:true }, "Life", $.Int32); 
    $.Field({Static:false, Public:true }, "MaxSize", $.Single); 
    $.Field({Static:false, Public:true }, "MinSize", $.Single); 
    $.Field({Static:false, Public:true }, "Rotation", $.Single); 
    $.Field({Static:false, Public:true }, "Transparency", $.Single); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.ParticleEmitter */ 

(function ParticleEmitter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Double)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.Fusee.Engine.Mesh)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Collections.Generic.List$b1.Of($asm02.Fusee.Engine.ParticleData))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Random)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm04.Fusee.Math.float3))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Fusee.Math.float3)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm07.System.UInt16))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.UInt16)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm04.Fusee.Math.float2))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm04.Fusee.Math.float2)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm02.Fusee.Engine.ParticleData)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("Fusee.Engine.ParticleData")]), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Random"), []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Math.float3"), [
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single"), 
        $asm07.TypeRef("System.Single")
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.ParticleData")], []))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Math.float2"), [$asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float3"), [$asm07.TypeRef("System.Single"), $asm04.TypeRef("Fusee.Math.float3")], []))) ();
  };

  function ParticleEmitter__ctor (myCount, myLifeMin, myLifeMax, myMinSize, myMaxSize, myRotation, myTransparency, myRandPosX, myRandPosY, myRandPosZ, myRandVelX, myRandVelY, myRandVelZ, myGravityX, myGravityY, myGravityZ) {
    this.VsSimpleTexture = "\r\n            /* Copies incoming vertex color without change.\r\n             * Applies the transformation matrix to vertex position.\r\n             */\r\n\r\n            attribute vec4 fuColor;\r\n            attribute vec3 fuVertex;\r\n            attribute vec3 fuNormal;\r\n            attribute vec2 fuUV;\r\n\r\n            varying vec4 vColor;\r\n            varying vec3 vNormal;\r\n            varying vec2 vUV;\r\n            varying float vTransparency;\r\n        \r\n            uniform mat4 FUSEE_MVP;\r\n            uniform mat4 FUSEE_MV;\r\n            uniform mat4 FUSEE_P;\r\n            uniform mat4 FUSEE_ITMV;\r\n            \r\n            uniform float timer;\r\n            attribute vec4 position;\r\n            varying vec2 texcoord;\r\n            varying float fade_factor;\r\n\r\n            void main()\r\n            {\r\n     \r\n                vec4 vPos = FUSEE_MV * vec4(fuVertex, 1.0);//umwandlung in Kamerakoordinaten\r\n               \r\n                //Offset rotieren um fuNormal.x\r\n                vec2 offset = fuUV;\r\n                offset.x  = fuUV.x*cos(fuNormal.x) - fuUV.y*sin(fuNormal.x);\r\n                offset.y =  fuUV.y*cos(fuNormal.x) + fuUV.x*sin(fuNormal.x);\r\n                vPos = vPos + vec4(100.0*offset, 0, 1.0);   //Offset  aus Partikelzentrum in Partikel-Eckpunkt          \r\n                gl_Position = FUSEE_P * vPos; //Perspektive-Projektion\r\n                vNormal = mat3(FUSEE_ITMV[0].xyz, FUSEE_ITMV[1].xyz, FUSEE_ITMV[2].xyz) * fuNormal;\r\n                vNormal = vec3(0, 0, 1);\r\n                vUV.x = (fuUV.x <= 0.0) ? 0.0 : 1.0;\r\n                vUV.y = (fuUV.y <= 0.0) ? 0.0 : 1.0;\r\n\r\n                vTransparency = fuNormal.y;\r\n            }";
    this.PsSimpleTexture = "\r\n            /* Copies incoming fragment color without change. */\r\n            #ifdef GL_ES\r\n                precision highp float;\r\n            #endif\r\n\r\n            // The parameter required for the texturing process\r\n            uniform sampler2D texture1;\r\n            uniform vec4 vColor;\r\n            varying vec3 vNormal;\r\n            varying float vTransparency;\r\n\r\n            // The parameter holding the UV-Coordinates of the texture\r\n            varying vec2 vUV;\r\n\r\n            void main()\r\n            {    \r\n              // The most basic texturing function, expecting the above mentioned parameters  \r\n             vec4 AlphaColor = vec4(1.0, 1.0, 1.0, vTransparency);\r\n             gl_FragColor = texture2D(texture1, vUV)*AlphaColor;        \r\n            }";
    this.ParticleMesh = new ($T03())();
    this._particleList = $S00().Construct();
    this._customCount = myCount;
    this._customLifeMin = myLifeMin;
    this._customLifeMax = myLifeMax;
    this._customMinSize = +myMinSize;
    this._customMaxSize = +myMaxSize;
    this._customRotation = +myRotation;
    this._customTransparency = +myTransparency;
    this._customRandPosX = +myRandPosX;
    this._customRandPosY = +myRandPosY;
    this._customRandPosZ = +myRandPosZ;
    this._customRandVelX = +myRandVelX;
    this._customRandVelY = +myRandVelY;
    this._customRandVelZ = +myRandVelZ;
    this._customGravityX = +myGravityX;
    this._customGravityY = +myGravityY;
    this._customGravityZ = +myGravityZ;
  };

  function ParticleEmitter_GenIntRand (one, two) {
    var rand = this._rnd;
    if (one < two) {
      var result = rand.Next(one, two);
    } else {
      result = rand.Next(two, one);
    }
    return result;
  };

  function ParticleEmitter_GenRand (one, two) {
    return +(one + (this._rnd.NextDouble() * (two - one)));
  };

  function ParticleEmitter_get_GravityX () {
    return +this._customGravityX;
  };

  function ParticleEmitter_get_GravityY () {
    return +this._customGravityY;
  };

  function ParticleEmitter_get_GravityZ () {
    return +this._customGravityZ;
  };

  function ParticleEmitter_get_LifeMax () {
    return this._customLifeMax;
  };

  function ParticleEmitter_get_LifeMin () {
    return this._customLifeMin;
  };

  function ParticleEmitter_get_MaxSize () {
    return +this._customMaxSize;
  };

  function ParticleEmitter_get_MinSize () {
    return +this._customMinSize;
  };

  function ParticleEmitter_get_PMesh () {
    return this.ParticleMesh;
  };

  function ParticleEmitter_get_RandPosX () {
    return +this._customRandPosX;
  };

  function ParticleEmitter_get_RandPosY () {
    return +this._customRandPosY;
  };

  function ParticleEmitter_get_RandPosZ () {
    return +this._customRandPosZ;
  };

  function ParticleEmitter_get_RandVelX () {
    return +this._customRandVelX;
  };

  function ParticleEmitter_get_RandVelY () {
    return +this._customRandVelY;
  };

  function ParticleEmitter_get_RandVelZ () {
    return +this._customRandVelZ;
  };

  function ParticleEmitter_get_Transparency () {
    return +this._customTransparency;
  };

  function ParticleEmitter_set_GravityX (value) {
    this._customGravityX = +value;
  };

  function ParticleEmitter_set_GravityY (value) {
    this._customGravityY = +value;
  };

  function ParticleEmitter_set_GravityZ (value) {
    this._customGravityZ = +value;
  };

  function ParticleEmitter_set_LifeMax (value) {
    this._customLifeMax = value;
  };

  function ParticleEmitter_set_LifeMin (value) {
    this._customLifeMin = value;
  };

  function ParticleEmitter_set_MaxSize (value) {
    this._customMaxSize = +value;
  };

  function ParticleEmitter_set_MinSize (value) {
    this._customMinSize = +value;
  };

  function ParticleEmitter_set_RandPosX (value) {
    this._customRandPosX = +value;
  };

  function ParticleEmitter_set_RandPosY (value) {
    this._customRandPosY = +value;
  };

  function ParticleEmitter_set_RandPosZ (value) {
    this._customRandPosZ = +value;
  };

  function ParticleEmitter_set_RandVelX (value) {
    this._customRandVelX = +value;
  };

  function ParticleEmitter_set_RandVelY (value) {
    this._customRandVelY = +value;
  };

  function ParticleEmitter_set_RandVelZ (value) {
    this._customRandVelZ = +value;
  };

  function ParticleEmitter_set_Transparency (value) {
    this._customTransparency = +value;
  };

  function ParticleEmitter_Tick (deltaTime) {
    var vertices = JSIL.Array.New($T07(), ((this._customCount * 4) | 0));
    var triangles = JSIL.Array.New($T09(), ((this._customCount * 6) | 0));
    var normals = JSIL.Array.New($T07(), ((this._customCount * 4) | 0));
    var uVs = JSIL.Array.New($T0B(), ((this._customCount * 4) | 0));
    this._rnd = $S01().Construct();

    while (this._particleList.get_Count() < this._customCount) {
      this._randVelX = +this.GenRand(-this._customRandVelX, this._customRandVelX);
      this._randVelY = +this.GenRand(-this._customRandVelY, this._customRandVelY);
      this._randVelZ = +this.GenRand(-this._customRandVelZ, this._customRandVelZ);
      this._randPosX = +this.GenRand(-this._customRandPosX, this._customRandPosX);
      this._randPosY = +this.GenRand(-this._customRandPosY, this._customRandPosY);
      this._randPosZ = +this.GenRand(-this._customRandPosZ, this._customRandPosZ);
      this._randRot = +this.GenRand(0, 1.3);
      this._randLife = this.GenIntRand(this._customLifeMin, this._customLifeMax);
      this._particle = new ($T0C())();
      this._particle.Position = $S02().Construct($T01().$Cast(this._randPosX), $T01().$Cast(this._randPosY), $T01().$Cast(this._randPosZ));
      this._particle.Velocity = $S02().Construct($T01().$Cast(this._randVelX), $T01().$Cast(this._randVelY), $T01().$Cast(this._randVelZ));
      this._particle.Gravity = $S02().Construct(this._customGravityX, this._customGravityY, this._customGravityZ);
      this._particle.Life = this._randLife;
      this._particle.MaxSize = +this._customMaxSize;
      this._particle.MinSize = +this._customMinSize;
      this._particle.Rotation = +$T01().$Cast(this._randRot);
      this._particle.Transparency = +this._customTransparency;
      $S03().CallVirtual("Add", null, this._particleList, this._particle);
    }

    for (var i = 0; i < this._particleList.get_Count(); i = ((i + 1) | 0)) {
      var t = this._particleList.get_Item(i);
      var currentPos = t.Position;
      var currentSize = +t.MinSize;
      if (t.Life > 0) {
        vertices[((i * 4) | 0)] = currentPos.MemberwiseClone();
        vertices[((((i * 4) | 0) + 1) | 0)] = currentPos.MemberwiseClone();
        vertices[((((i * 4) | 0) + 2) | 0)] = currentPos.MemberwiseClone();
        vertices[((((i * 4) | 0) + 3) | 0)] = currentPos.MemberwiseClone();
        uVs[((i * 4) | 0)] = $S04().Construct((currentSize / 2), (-currentSize / 2));
        uVs[((((i * 4) | 0) + 1) | 0)] = $S04().Construct((currentSize / 2), (currentSize / 2));
        uVs[((((i * 4) | 0) + 2) | 0)] = $S04().Construct((-currentSize / 2), (currentSize / 2));
        uVs[((((i * 4) | 0) + 3) | 0)] = $S04().Construct((-currentSize / 2), (-currentSize / 2));
        normals[((i * 4) | 0)] = $S02().Construct(t.Rotation, t.Transparency, 1);
        normals[((((i * 4) | 0) + 1) | 0)] = $S02().Construct(t.Rotation, t.Transparency, 1);
        normals[((((i * 4) | 0) + 2) | 0)] = $S02().Construct(t.Rotation, t.Transparency, 1);
        normals[((((i * 4) | 0) + 3) | 0)] = $S02().Construct(t.Rotation, t.Transparency, 1);
        triangles[((i * 6) | 0)] = $T09().$Cast(((i * 4) | 0));
        triangles[((((i * 6) | 0) + 1) | 0)] = $T09().$Cast(((((i * 4) | 0) + 1) | 0));
        triangles[((((i * 6) | 0) + 2) | 0)] = $T09().$Cast(((((i * 4) | 0) + 2) | 0));
        triangles[((((i * 6) | 0) + 3) | 0)] = $T09().$Cast(((i * 4) | 0));
        triangles[((((i * 6) | 0) + 4) | 0)] = $T09().$Cast(((((i * 4) | 0) + 2) | 0));
        triangles[((((i * 6) | 0) + 5) | 0)] = $T09().$Cast(((((i * 4) | 0) + 3) | 0));
      }
    }
    this.ParticleMesh.set_Vertices(vertices);
    this.ParticleMesh.set_Triangles(triangles);
    this.ParticleMesh.set_Normals(normals);
    this.ParticleMesh.set_UVs(uVs);

    for (var j = 0; j < this._particleList.get_Count(); j = ((j + 1) | 0)) {
      var changeParticle = this._particleList.get_Item(j);
      changeParticle.Position = $T07().op_Addition(changeParticle.Position.MemberwiseClone(), $S05().CallStatic($T07(), "op_Multiply", null, $T01().$Cast(deltaTime), changeParticle.Velocity.MemberwiseClone()).MemberwiseClone()).MemberwiseClone();
      changeParticle.Velocity = $T07().op_Subtraction(changeParticle.Velocity.MemberwiseClone(), changeParticle.Gravity.MemberwiseClone()).MemberwiseClone();
      changeParticle.Rotation += +this._customRotation;
      changeParticle.Transparency -= +(changeParticle.Transparency / $T01().$Cast(changeParticle.Life));
      if (changeParticle.MinSize <= changeParticle.MaxSize) {
        changeParticle.MinSize += +(changeParticle.MaxSize / $T01().$Cast(changeParticle.Life));
      }
      if (changeParticle.Life !== 0) {
        changeParticle.Life = ((changeParticle.Life - 1) | 0);
      }
      this._particleList.set_Item(j, changeParticle);
      if (!((changeParticle.Life !== 0) && (changeParticle.Life > 0))) {
        this._particleList.Remove(changeParticle);
      }
    }
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.ParticleEmitter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 16, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Single, $.Single, 
          $.Double, $.Double, 
          $.Double, $.Single, 
          $.Single, $.Single
        ], []), 
      ParticleEmitter__ctor
    );

    $.Method({Static:false, Public:false}, "GenIntRand", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32], []), 
      ParticleEmitter_GenIntRand
    );

    $.Method({Static:false, Public:false}, "GenRand", 
      new JSIL.MethodSignature($.Double, [$.Double, $.Double], []), 
      ParticleEmitter_GenRand
    );

    $.Method({Static:false, Public:true }, "get_GravityX", 
      new JSIL.MethodSignature($.Single, [], []), 
      ParticleEmitter_get_GravityX
    );

    $.Method({Static:false, Public:true }, "get_GravityY", 
      new JSIL.MethodSignature($.Single, [], []), 
      ParticleEmitter_get_GravityY
    );

    $.Method({Static:false, Public:true }, "get_GravityZ", 
      new JSIL.MethodSignature($.Single, [], []), 
      ParticleEmitter_get_GravityZ
    );

    $.Method({Static:false, Public:true }, "get_LifeMax", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ParticleEmitter_get_LifeMax
    );

    $.Method({Static:false, Public:true }, "get_LifeMin", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ParticleEmitter_get_LifeMin
    );

    $.Method({Static:false, Public:true }, "get_MaxSize", 
      new JSIL.MethodSignature($.Single, [], []), 
      ParticleEmitter_get_MaxSize
    );

    $.Method({Static:false, Public:true }, "get_MinSize", 
      new JSIL.MethodSignature($.Single, [], []), 
      ParticleEmitter_get_MinSize
    );

    $.Method({Static:false, Public:true }, "get_PMesh", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.Mesh"), [], []), 
      ParticleEmitter_get_PMesh
    );

    $.Method({Static:false, Public:true }, "get_RandPosX", 
      new JSIL.MethodSignature($.Double, [], []), 
      ParticleEmitter_get_RandPosX
    );

    $.Method({Static:false, Public:true }, "get_RandPosY", 
      new JSIL.MethodSignature($.Double, [], []), 
      ParticleEmitter_get_RandPosY
    );

    $.Method({Static:false, Public:true }, "get_RandPosZ", 
      new JSIL.MethodSignature($.Double, [], []), 
      ParticleEmitter_get_RandPosZ
    );

    $.Method({Static:false, Public:true }, "get_RandVelX", 
      new JSIL.MethodSignature($.Double, [], []), 
      ParticleEmitter_get_RandVelX
    );

    $.Method({Static:false, Public:true }, "get_RandVelY", 
      new JSIL.MethodSignature($.Double, [], []), 
      ParticleEmitter_get_RandVelY
    );

    $.Method({Static:false, Public:true }, "get_RandVelZ", 
      new JSIL.MethodSignature($.Double, [], []), 
      ParticleEmitter_get_RandVelZ
    );

    $.Method({Static:false, Public:true }, "get_Transparency", 
      new JSIL.MethodSignature($.Single, [], []), 
      ParticleEmitter_get_Transparency
    );

    $.Method({Static:false, Public:true }, "set_GravityX", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      ParticleEmitter_set_GravityX
    );

    $.Method({Static:false, Public:true }, "set_GravityY", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      ParticleEmitter_set_GravityY
    );

    $.Method({Static:false, Public:true }, "set_GravityZ", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      ParticleEmitter_set_GravityZ
    );

    $.Method({Static:false, Public:true }, "set_LifeMax", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      ParticleEmitter_set_LifeMax
    );

    $.Method({Static:false, Public:true }, "set_LifeMin", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      ParticleEmitter_set_LifeMin
    );

    $.Method({Static:false, Public:true }, "set_MaxSize", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      ParticleEmitter_set_MaxSize
    );

    $.Method({Static:false, Public:true }, "set_MinSize", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      ParticleEmitter_set_MinSize
    );

    $.Method({Static:false, Public:true }, "set_RandPosX", 
      new JSIL.MethodSignature(null, [$.Double], []), 
      ParticleEmitter_set_RandPosX
    );

    $.Method({Static:false, Public:true }, "set_RandPosY", 
      new JSIL.MethodSignature(null, [$.Double], []), 
      ParticleEmitter_set_RandPosY
    );

    $.Method({Static:false, Public:true }, "set_RandPosZ", 
      new JSIL.MethodSignature(null, [$.Double], []), 
      ParticleEmitter_set_RandPosZ
    );

    $.Method({Static:false, Public:true }, "set_RandVelX", 
      new JSIL.MethodSignature(null, [$.Double], []), 
      ParticleEmitter_set_RandVelX
    );

    $.Method({Static:false, Public:true }, "set_RandVelY", 
      new JSIL.MethodSignature(null, [$.Double], []), 
      ParticleEmitter_set_RandVelY
    );

    $.Method({Static:false, Public:true }, "set_RandVelZ", 
      new JSIL.MethodSignature(null, [$.Double], []), 
      ParticleEmitter_set_RandVelZ
    );

    $.Method({Static:false, Public:true }, "set_Transparency", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      ParticleEmitter_set_Transparency
    );

    $.Method({Static:false, Public:true }, "Tick", 
      new JSIL.MethodSignature(null, [$.Double], []), 
      ParticleEmitter_Tick
    );

    $.Field({Static:false, Public:true }, "VsSimpleTexture", $.String); 
    $.Field({Static:false, Public:true }, "PsSimpleTexture", $.String); 
    $.Field({Static:false, Public:true }, "ParticleMesh", $asm02.TypeRef("Fusee.Engine.Mesh")); 
    $.Field({Static:false, Public:false}, "_particleList", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("Fusee.Engine.ParticleData")])); 
    $.Field({Static:false, Public:false}, "_particle", $asm02.TypeRef("Fusee.Engine.ParticleData")); 
    $.Field({Static:false, Public:false}, "_rnd", $asm07.TypeRef("System.Random")); 
    $.Field({Static:false, Public:false}, "_randVelX", $.Double); 
    $.Field({Static:false, Public:false}, "_randVelY", $.Double); 
    $.Field({Static:false, Public:false}, "_randVelZ", $.Double); 
    $.Field({Static:false, Public:false}, "_randPosX", $.Double); 
    $.Field({Static:false, Public:false}, "_randPosY", $.Double); 
    $.Field({Static:false, Public:false}, "_randPosZ", $.Double); 
    $.Field({Static:false, Public:false}, "_randRot", $.Double); 
    $.Field({Static:false, Public:false}, "_randLife", $.Int32); 
    $.Field({Static:false, Public:false}, "_customCount", $.Int32); 
    $.Field({Static:false, Public:false}, "_customLifeMin", $.Int32); 
    $.Field({Static:false, Public:false}, "_customLifeMax", $.Int32); 
    $.Field({Static:false, Public:false}, "_customMinSize", $.Single); 
    $.Field({Static:false, Public:false}, "_customMaxSize", $.Single); 
    $.Field({Static:false, Public:false}, "_customRandPosX", $.Double); 
    $.Field({Static:false, Public:false}, "_customRandPosY", $.Double); 
    $.Field({Static:false, Public:false}, "_customRandPosZ", $.Double); 
    $.Field({Static:false, Public:false}, "_customRandVelX", $.Double); 
    $.Field({Static:false, Public:false}, "_customRandVelY", $.Double); 
    $.Field({Static:false, Public:false}, "_customRandVelZ", $.Double); 
    $.Field({Static:false, Public:false}, "_customGravityX", $.Single); 
    $.Field({Static:false, Public:false}, "_customGravityY", $.Single); 
    $.Field({Static:false, Public:false}, "_customGravityZ", $.Single); 
    $.Field({Static:false, Public:false}, "_customTransparency", $.Single); 
    $.Field({Static:false, Public:false}, "_customRotation", $.Single); 
    $.Property({Static:false, Public:true }, "PMesh", $asm02.TypeRef("Fusee.Engine.Mesh"));

    $.Property({Static:false, Public:true }, "LifeMin", $.Int32);

    $.Property({Static:false, Public:true }, "LifeMax", $.Int32);

    $.Property({Static:false, Public:true }, "MinSize", $.Single);

    $.Property({Static:false, Public:true }, "MaxSize", $.Single);

    $.Property({Static:false, Public:true }, "Transparency", $.Single);

    $.Property({Static:false, Public:true }, "RandPosX", $.Double);

    $.Property({Static:false, Public:true }, "RandPosY", $.Double);

    $.Property({Static:false, Public:true }, "RandPosZ", $.Double);

    $.Property({Static:false, Public:true }, "RandVelX", $.Double);

    $.Property({Static:false, Public:true }, "RandVelY", $.Double);

    $.Property({Static:false, Public:true }, "RandVelZ", $.Double);

    $.Property({Static:false, Public:true }, "GravityX", $.Single);

    $.Property({Static:false, Public:true }, "GravityY", $.Single);

    $.Property({Static:false, Public:true }, "GravityZ", $.Single);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.RenderCanvas */ 

(function RenderCanvas$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Fusee.Engine.IRenderCanvasImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Reflection.MemberInfo)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Fusee.Engine.FuseeApplicationAttribute)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Fusee.Engine.RenderContext)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.Fusee.Engine.Input)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm02.Fusee.Engine.Audio)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm02.Fusee.Engine.Network)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm02.Fusee.Engine.ImpFactory)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm01.Fusee.Engine.IAudioImp)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.Fusee.Engine.IInputDriverImp)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm01.Fusee.Engine.IInputImp)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.Fusee.Engine.CursorType)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.IRenderCanvasImp.get_EnableBlending)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.IRenderCanvasImp.get_Fullscreen)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.IRenderCanvasImp.get_Height)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.IRenderCanvasImp.get_VerticalSync)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.IRenderCanvasImp.get_Width)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.Fusee.Engine.IRenderCanvasImp.set_Caption)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm01.Fusee.Engine.IRenderCanvasImp.add_Init)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm01.Fusee.Engine.IRenderCanvasImp.add_UnLoad)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm01.Fusee.Engine.IRenderCanvasImp.add_Render)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm01.Fusee.Engine.IRenderCanvasImp.get_DeltaTime)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm01.Fusee.Engine.IRenderCanvasImp.add_Resize)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm01.Fusee.Engine.IRenderCanvasImp.OpenLink)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm01.Fusee.Engine.IRenderCanvasImp.Present)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm01.Fusee.Engine.IRenderCanvasImp.Run)) ();
  };
  var $IM0E = function () {
    return ($IM0E = JSIL.Memoize($asm01.Fusee.Engine.IRenderCanvasImp.set_EnableBlending)) ();
  };
  var $IM0F = function () {
    return ($IM0F = JSIL.Memoize($asm01.Fusee.Engine.IRenderCanvasImp.set_Fullscreen)) ();
  };
  var $IM10 = function () {
    return ($IM10 = JSIL.Memoize($asm01.Fusee.Engine.IRenderCanvasImp.set_Height)) ();
  };
  var $IM11 = function () {
    return ($IM11 = JSIL.Memoize($asm01.Fusee.Engine.IRenderCanvasImp.set_VerticalSync)) ();
  };
  var $IM12 = function () {
    return ($IM12 = JSIL.Memoize($asm01.Fusee.Engine.IRenderCanvasImp.set_Width)) ();
  };
  var $IM13 = function () {
    return ($IM13 = JSIL.Memoize($asm01.Fusee.Engine.IRenderCanvasImp.SetCursor)) ();
  };

  function RenderCanvas__ctor () {
  };

  function RenderCanvas_get_AudioImplementor () {
    return this._audioImp;
  };

  function RenderCanvas_get_Blending () {
    return $IM00().Call(this._canvasImp, null);
  };

  function RenderCanvas_get_CanvasImplementor () {
    return this._canvasImp;
  };

  function RenderCanvas_get_ContextImplementor () {
    return this._renderContextImp;
  };

  function RenderCanvas_get_Fullscreen () {
    return $IM01().Call(this._canvasImp, null);
  };

  function RenderCanvas_get_Height () {
    return $IM02().Call(this._canvasImp, null);
  };

  function RenderCanvas_get_InputDriverImplementor () {
    return this._inputDriverImp;
  };

  function RenderCanvas_get_InputImplementor () {
    return this._inputImp;
  };

  function RenderCanvas_get_RC () {
    return this._rc;
  };

  function RenderCanvas_get_VSync () {
    return $IM03().Call(this._canvasImp, null);
  };

  function RenderCanvas_get_Width () {
    return $IM04().Call(this._canvasImp, null);
  };

  function RenderCanvas_GetAppName () {
    var attributes = JSIL.GetType(this).GetCustomAttributes($T03().__Type__, true);
    if (attributes.length > 0) {
      var fae = $T03().$Cast(attributes[0]);
      var name = fae.Name;
    } else {
      name = JSIL.GetType(this).get_Name();
    }
    return name;
  };

  function RenderCanvas_Init () {
  };

  function RenderCanvas_InitCanvas () {
    this.InitImplementors();
    $IM05().Call(this._canvasImp, null, this.GetAppName());
    this._rc = new ($T05())(this._renderContextImp);
    this._rc.Viewport(
      0, 
      0, 
      this.get_Width(), 
      this.get_Height()
    );
    $T06().get_Instance().set_InputImp(this._inputImp);
    $T07().get_Instance().set_AudioImp(this._audioImp);
    $T06().get_Instance().set_InputDriverImp(this._inputDriverImp);
    $T08().get_Instance().set_NetworkImp(this._networkImp);
    $IM06().Call(this._canvasImp, null, function (param0, param1) {
        this.Init();
      }.bind(this));
    $IM07().Call(this._canvasImp, null, function (param0, param1) {
        this.UnLoad();
      }.bind(this));
    $IM08().Call(this._canvasImp, null, function (param0, param1) {
        $asm02.Fusee.Engine.Network.get_Instance().OnUpdateFrame();
        $asm02.Fusee.Engine.Input.get_Instance().OnUpdateFrame();
        $asm02.Fusee.Engine.Time.get_Instance().set_DeltaTimeIncrement($IM09().Call(this._canvasImp, null));
        this.RenderAFrame();
        $asm02.Fusee.Engine.Input.get_Instance().OnLateUpdate();
      }.bind(this));
    $IM0A().Call(this._canvasImp, null, function (param0, param1) {
        this.Resize();
      }.bind(this));
  };

  function RenderCanvas_InitImplementors () {
    if (this._canvasImp === null) {
      this._canvasImp = $T09().CreateIRenderCanvasImp();
    }
    if (this._renderContextImp === null) {
      this._renderContextImp = $T09().CreateIRenderContextImp(this._canvasImp);
    }
    if (this._inputImp === null) {
      this._inputImp = $T09().CreateIInputImp(this._canvasImp);
    }
    if (this._audioImp === null) {
      this._audioImp = $T09().CreateIAudioImp();
    }
    if (this._inputDriverImp === null) {
      this._inputDriverImp = $T09().CreateIInputDriverImp();
    }
    if (this._networkImp === null) {
      this._networkImp = $T09().CreateINetworkImp();
    }
  };

  function RenderCanvas_OpenLink (link) {
    $IM0B().Call(this._canvasImp, null, link);
  };

  function RenderCanvas_Present () {
    $IM0C().Call(this._canvasImp, null);
  };

  function RenderCanvas_RenderAFrame () {
  };

  function RenderCanvas_Resize () {
  };

  function RenderCanvas_Run () {
    this.InitCanvas();
    $IM0D().Call(this._canvasImp, null);
  };

  function RenderCanvas_set_AudioImplementor (value) {
    this._audioImp = value;
  };

  function RenderCanvas_set_Blending (value) {
    $IM0E().Call(this._canvasImp, null, value);
  };

  function RenderCanvas_set_CanvasImplementor (value) {
    this._canvasImp = value;
  };

  function RenderCanvas_set_ContextImplementor (value) {
    this._renderContextImp = value;
  };

  function RenderCanvas_set_Fullscreen (value) {
    $IM0F().Call(this._canvasImp, null, value);
  };

  function RenderCanvas_set_Height (value) {
    $IM10().Call(this._canvasImp, null, value);
  };

  function RenderCanvas_set_InputDriverImplementor (value) {
    this._inputDriverImp = value;
  };

  function RenderCanvas_set_InputImplementor (value) {
    this._inputImp = value;
  };

  function RenderCanvas_set_VSync (value) {
    $IM11().Call(this._canvasImp, null, value);
  };

  function RenderCanvas_set_Width (value) {
    $IM12().Call(this._canvasImp, null, value);
  };

  function RenderCanvas_SetCursor (cursorType) {
    $IM13().Call(this._canvasImp, null, cursorType);
  };

  function RenderCanvas_UnLoad () {
    $T07().get_Instance().CloseDevice();
    $T08().get_Instance().CloseDevice();
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.RenderCanvas", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      RenderCanvas__ctor
    );

    $.Method({Static:false, Public:true }, "get_AudioImplementor", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IAudioImp"), [], []), 
      RenderCanvas_get_AudioImplementor
    );

    $.Method({Static:false, Public:true }, "get_Blending", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      RenderCanvas_get_Blending
    );

    $.Method({Static:false, Public:true }, "get_CanvasImplementor", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IRenderCanvasImp"), [], []), 
      RenderCanvas_get_CanvasImplementor
    );

    $.Method({Static:false, Public:true }, "get_ContextImplementor", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IRenderContextImp"), [], []), 
      RenderCanvas_get_ContextImplementor
    );

    $.Method({Static:false, Public:true }, "get_Fullscreen", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      RenderCanvas_get_Fullscreen
    );

    $.Method({Static:false, Public:true }, "get_Height", 
      new JSIL.MethodSignature($.Int32, [], []), 
      RenderCanvas_get_Height
    );

    $.Method({Static:false, Public:true }, "get_InputDriverImplementor", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IInputDriverImp"), [], []), 
      RenderCanvas_get_InputDriverImplementor
    );

    $.Method({Static:false, Public:true }, "get_InputImplementor", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IInputImp"), [], []), 
      RenderCanvas_get_InputImplementor
    );

    $.Method({Static:false, Public:false}, "get_RC", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.RenderContext"), [], []), 
      RenderCanvas_get_RC
    );

    $.Method({Static:false, Public:true }, "get_VSync", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      RenderCanvas_get_VSync
    );

    $.Method({Static:false, Public:true }, "get_Width", 
      new JSIL.MethodSignature($.Int32, [], []), 
      RenderCanvas_get_Width
    );

    $.Method({Static:false, Public:false}, "GetAppName", 
      new JSIL.MethodSignature($.String, [], []), 
      RenderCanvas_GetAppName
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Init", 
      new JSIL.MethodSignature(null, [], []), 
      RenderCanvas_Init
    );

    $.Method({Static:false, Public:false}, "InitCanvas", 
      new JSIL.MethodSignature(null, [], []), 
      RenderCanvas_InitCanvas
    );

    $.Method({Static:false, Public:true }, "InitImplementors", 
      new JSIL.MethodSignature(null, [], []), 
      RenderCanvas_InitImplementors
    );

    $.Method({Static:false, Public:true }, "OpenLink", 
      new JSIL.MethodSignature(null, [$.String], []), 
      RenderCanvas_OpenLink
    );

    $.Method({Static:false, Public:true }, "Present", 
      new JSIL.MethodSignature(null, [], []), 
      RenderCanvas_Present
    );

    $.Method({Static:false, Public:true , Virtual:true }, "RenderAFrame", 
      new JSIL.MethodSignature(null, [], []), 
      RenderCanvas_RenderAFrame
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Resize", 
      new JSIL.MethodSignature(null, [], []), 
      RenderCanvas_Resize
    );

    $.Method({Static:false, Public:true }, "Run", 
      new JSIL.MethodSignature(null, [], []), 
      RenderCanvas_Run
    );

    $.Method({Static:false, Public:true }, "set_AudioImplementor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IAudioImp")], []), 
      RenderCanvas_set_AudioImplementor
    );

    $.Method({Static:false, Public:true }, "set_Blending", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      RenderCanvas_set_Blending
    );

    $.Method({Static:false, Public:true }, "set_CanvasImplementor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IRenderCanvasImp")], []), 
      RenderCanvas_set_CanvasImplementor
    );

    $.Method({Static:false, Public:true }, "set_ContextImplementor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IRenderContextImp")], []), 
      RenderCanvas_set_ContextImplementor
    );

    $.Method({Static:false, Public:true }, "set_Fullscreen", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      RenderCanvas_set_Fullscreen
    );

    $.Method({Static:false, Public:true }, "set_Height", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      RenderCanvas_set_Height
    );

    $.Method({Static:false, Public:true }, "set_InputDriverImplementor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IInputDriverImp")], []), 
      RenderCanvas_set_InputDriverImplementor
    );

    $.Method({Static:false, Public:true }, "set_InputImplementor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IInputImp")], []), 
      RenderCanvas_set_InputImplementor
    );

    $.Method({Static:false, Public:true }, "set_VSync", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      RenderCanvas_set_VSync
    );

    $.Method({Static:false, Public:true }, "set_Width", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      RenderCanvas_set_Width
    );

    $.Method({Static:false, Public:true }, "SetCursor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.CursorType")], []), 
      RenderCanvas_SetCursor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "UnLoad", 
      new JSIL.MethodSignature(null, [], []), 
      RenderCanvas_UnLoad
    );

    $.Field({Static:false, Public:false}, "_rc", $asm02.TypeRef("Fusee.Engine.RenderContext")); 
    $.Field({Static:false, Public:false}, "_renderContextImp", $asm01.TypeRef("Fusee.Engine.IRenderContextImp")); 
    $.Field({Static:false, Public:false}, "_inputImp", $asm01.TypeRef("Fusee.Engine.IInputImp")); 
    $.Field({Static:false, Public:false}, "_audioImp", $asm01.TypeRef("Fusee.Engine.IAudioImp")); 
    $.Field({Static:false, Public:false}, "_networkImp", $asm01.TypeRef("Fusee.Engine.INetworkImp")); 
    $.Field({Static:false, Public:false}, "_canvasImp", $asm01.TypeRef("Fusee.Engine.IRenderCanvasImp")); 
    $.Field({Static:false, Public:false}, "_inputDriverImp", $asm01.TypeRef("Fusee.Engine.IInputDriverImp")); 
    $.Property({Static:false, Public:true }, "CanvasImplementor", $asm01.TypeRef("Fusee.Engine.IRenderCanvasImp"))
      .Attribute($asm01.TypeRef("Fusee.Engine.InjectMeAttribute"));

    $.Property({Static:false, Public:true }, "ContextImplementor", $asm01.TypeRef("Fusee.Engine.IRenderContextImp"))
      .Attribute($asm01.TypeRef("Fusee.Engine.InjectMeAttribute"));

    $.Property({Static:false, Public:true }, "InputImplementor", $asm01.TypeRef("Fusee.Engine.IInputImp"))
      .Attribute($asm01.TypeRef("Fusee.Engine.InjectMeAttribute"));

    $.Property({Static:false, Public:true }, "AudioImplementor", $asm01.TypeRef("Fusee.Engine.IAudioImp"))
      .Attribute($asm01.TypeRef("Fusee.Engine.InjectMeAttribute"));

    $.Property({Static:false, Public:true }, "InputDriverImplementor", $asm01.TypeRef("Fusee.Engine.IInputDriverImp"))
      .Attribute($asm01.TypeRef("Fusee.Engine.InjectMeAttribute"));

    $.Property({Static:false, Public:false}, "RC", $asm02.TypeRef("Fusee.Engine.RenderContext"));

    $.Property({Static:false, Public:true }, "Width", $.Int32);

    $.Property({Static:false, Public:true }, "Height", $.Int32);

    $.Property({Static:false, Public:true }, "VSync", $.Boolean);

    $.Property({Static:false, Public:true }, "Blending", $.Boolean);

    $.Property({Static:false, Public:true }, "Fullscreen", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.RenderContext */ 

(function RenderContext$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm04.Fusee.Math.float4x4)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Fusee.Engine.Light)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm02.Fusee.Engine.RenderContext_LightParamNames)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.Fusee.Engine.RenderContext_MatrixParamNames)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Fusee.Engine.MoreShaders)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.Fusee.Engine.ShaderProgram)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Fusee.Engine.ClearFlags)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm01.Fusee.Engine.ImageData)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm04.Fusee.Math.float3)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Fusee.Math.float4)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.Fusee.Engine.IFont)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize(System.Array.Of($asm04.Fusee.Math.float3))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.Double)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm01.Fusee.Engine.Rectangle)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm01.Fusee.Engine.ITexture)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm01.Fusee.Engine.IShaderParam)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm01.Fusee.Engine.RenderState)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm07.System.IO.File)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm07.System.IO.FileNotFoundException)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm07.System.Void)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm02.Fusee.Engine.Mesh)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize(System.Array.Of($asm07.System.UInt32))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize(System.Array.Of($asm04.Fusee.Math.float2))) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize(System.Array.Of($asm07.System.UInt16))) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm02.Fusee.Engine.RenderStateSet)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerator$b1.Of($asm07.System.Collections.Generic.KeyValuePair$b2.Of($asm01.Fusee.Engine.RenderState, $asm07.System.UInt32)))) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerable$b1.Of($asm07.System.Collections.Generic.KeyValuePair$b2.Of($asm01.Fusee.Engine.RenderState, $asm07.System.UInt32)))) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm07.System.Collections.IEnumerator)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm07.System.Collections.Generic.KeyValuePair$b2.Of($asm01.Fusee.Engine.RenderState, $asm07.System.UInt32))) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm04.Fusee.Math.float2)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.IO.FileNotFoundException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.IO.FileNotFoundException"), []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [$asm04.TypeRef("Fusee.Math.float4x4"), $asm04.TypeRef("Fusee.Math.float4x4")], []))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.Clear)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.ColorMask)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.CreateImage)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.CreateShader)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.CreateTexture)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.DebugLine)) ();
  };
  var $IM06 = function () {
    return ($IM06 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.FixTextKerning)) ();
  };
  var $IM07 = function () {
    return ($IM07 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.Frustum)) ();
  };
  var $IM08 = function () {
    return ($IM08 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.get_ClearColor)) ();
  };
  var $IM09 = function () {
    return ($IM09 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.get_ClearDepth)) ();
  };
  var $IM0A = function () {
    return ($IM0A = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.GetBufferContent)) ();
  };
  var $IM0B = function () {
    return ($IM0B = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.GetParamValue)) ();
  };
  var $IM0C = function () {
    return ($IM0C = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.GetRenderState)) ();
  };
  var $IM0D = function () {
    return ($IM0D = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.GetShaderParam)) ();
  };
  var $IM0E = function () {
    return ($IM0E = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.GetShaderParamList)) ();
  };
  var $IM0F = function () {
    return ($IM0F = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.LoadFont)) ();
  };
  var $IM10 = function () {
    return ($IM10 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.LoadImage)) ();
  };
  var $IM11 = function () {
    return ($IM11 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.CreateMeshImp)) ();
  };
  var $IM12 = function () {
    return ($IM12 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.SetColors)) ();
  };
  var $IM13 = function () {
    return ($IM13 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.SetVertices)) ();
  };
  var $IM14 = function () {
    return ($IM14 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.SetUVs)) ();
  };
  var $IM15 = function () {
    return ($IM15 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.SetNormals)) ();
  };
  var $IM16 = function () {
    return ($IM16 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.SetTriangles)) ();
  };
  var $IM17 = function () {
    return ($IM17 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.Render)) ();
  };
  var $IM18 = function () {
    return ($IM18 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.set_ClearDepth)) ();
  };
  var $IM19 = function () {
    return ($IM19 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.SetRenderState)) ();
  };
  var $IM1A = function () {
    return ($IM1A = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerable$b1.Of($asm07.System.Collections.Generic.KeyValuePair$b2.Of($asm01.Fusee.Engine.RenderState, $asm07.System.UInt32)).GetEnumerator)) ();
  };
  var $IM1B = function () {
    return ($IM1B = JSIL.Memoize($asm07.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM1C = function () {
    return ($IM1C = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerator$b1.Of($asm07.System.Collections.Generic.KeyValuePair$b2.Of($asm01.Fusee.Engine.RenderState, $asm07.System.UInt32)).get_Current)) ();
  };
  var $IM1D = function () {
    return ($IM1D = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM1E = function () {
    return ($IM1E = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.SetShader)) ();
  };
  var $IM1F = function () {
    return ($IM1F = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.SetShaderParam1f)) ();
  };
  var $IM20 = function () {
    return ($IM20 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.SetShaderParam2f)) ();
  };
  var $IM21 = function () {
    return ($IM21 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.SetShaderParam3f)) ();
  };
  var $IM22 = function () {
    return ($IM22 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.SetShaderParam4f)) ();
  };
  var $IM23 = function () {
    return ($IM23 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.SetShaderParamMtx4f)) ();
  };
  var $IM24 = function () {
    return ($IM24 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.SetShaderParamInt)) ();
  };
  var $IM25 = function () {
    return ($IM25 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.SetShaderParamTexture)) ();
  };
  var $IM26 = function () {
    return ($IM26 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.TextOnImage)) ();
  };
  var $IM27 = function () {
    return ($IM27 = JSIL.Memoize($asm01.Fusee.Engine.IRenderContextImp.Viewport)) ();
  };

  function RenderContext__ctor (rci) {
    this._debugLinesEnabled = true;
    this._rci = rci;
    (this.View = $T01().Identity.MemberwiseClone());
    (this.ModelView = $T01().Identity.MemberwiseClone());
    (this.Projection = $T01().Identity.MemberwiseClone());
    this._lightParams = JSIL.Array.New($T02(), 8);
    this._lightShaderParams = JSIL.Array.New($T03(), 8);
    this._currentShaderParams = new ($T04())();
    this._updatedShaderParams = false;
    this._debugShader = $T05().GetDiffuseColorShader(this);
    this._debugColor = this._debugShader.GetShaderParam("color");
  };

  function RenderContext_Clear (flags) {
    $IM00().Call(this._rci, null, flags);
  };

  function RenderContext_ColorMask (red, green, blue, alpha) {
    $IM01().Call(this._rci, null, red, green, blue, alpha);
  };

  function RenderContext_CreateImage (width, height, bgColor) {
    return $IM02().Call(this._rci, null, width, height, bgColor);
  };

  function RenderContext_CreateShader (vs, ps) {
    return new ($T06())(this._rci, $IM03().Call(this._rci, null, vs, ps));
  };

  function RenderContext_CreateTexture (imgData) {
    return $IM04().Call(this._rci, null, imgData);
  };

  function RenderContext_DebugLine (start, end, color) {
    if (this._debugLinesEnabled) {
      start = $T0C().op_Division(start.MemberwiseClone(), 2).MemberwiseClone();
      end = $T0C().op_Division(end.MemberwiseClone(), 2).MemberwiseClone();
      var oldShader = this._currentShader;
      this.SetShader(this._debugShader);
      this.SetShaderParamMtx4f(this._currentShaderParams.FUSEE_MVP, this.get_ModelViewProjection().MemberwiseClone());
      this.SetShaderParam4f(this._debugColor, color.MemberwiseClone());
      $IM05().Call(this._rci, null, start.MemberwiseClone(), end.MemberwiseClone(), color.MemberwiseClone());
      if (oldShader !== null) {
        this.SetShader(oldShader);
      }
    }
  };

  function RenderContext_DisableTexture () {
    return $IM04().Call(this._rci, null, this.CreateImage(1, 1, "white").MemberwiseClone());
  };

  function RenderContext_FixTextKerning (font, vertices, text, scaleX) {
    return $IM06().Call(this._rci, null, font, vertices, text, scaleX);
  };

  function RenderContext_Frustum (left, right, bottom, top, zNear, zFar) {
    $IM07().Call(this._rci, null, 
      left, 
      right, 
      bottom, 
      top, 
      zNear, 
      zFar
    );
  };

  function RenderContext_get_ClearColor () {
    return $IM08().Call(this._rci, null);
  };

  function RenderContext_get_ClearDepth () {
    return +$IM09().Call(this._rci, null);
  };

  function RenderContext_get_CurrentShader () {
    return this._currentShader;
  };

  function RenderContext_get_DebugLinesEnabled () {
    return this._debugLinesEnabled;
  };

  function RenderContext_get_InvModel () {
    if (!this._invModelOk) {
      this._invModel = $T01().Invert(this.get_Model().MemberwiseClone()).MemberwiseClone();
      this._invModelOk = true;
    }
    return this._invModel;
  };

  function RenderContext_get_InvModelView () {
    if (!this._invModelViewOk) {
      this._invModelView = $T01().Invert(this.get_ModelView().MemberwiseClone()).MemberwiseClone();
      this._invModelViewOk = true;
    }
    return this._invModelView;
  };

  function RenderContext_get_InvModelViewProjection () {
    if (!this._invModelViewProjectionOk) {
      this._invModelViewProjection = $T01().Invert(this.get_ModelViewProjection().MemberwiseClone()).MemberwiseClone();
      this._invModelViewProjectionOk = true;
    }
    return this._invModelViewProjection;
  };

  function RenderContext_get_InvProjection () {
    if (!this._invProjectionOk) {
      this._invProjection = $T01().Invert(this.get_Projection().MemberwiseClone()).MemberwiseClone();
      this._invProjectionOk = true;
    }
    return this._invProjection;
  };

  function RenderContext_get_InvTransModel () {
    if (!this._invTransModelOk) {
      this._invTransModel = $T01().Invert(this.get_TransModel().MemberwiseClone()).MemberwiseClone();
      this._invTransModelOk = true;
    }
    return this._invTransModel;
  };

  function RenderContext_get_InvTransModelView () {
    if (!this._invTransModelViewOk) {
      this._invTransModelView = $T01().Invert(this.get_TransModelView().MemberwiseClone()).MemberwiseClone();
      this._invTransModelViewOk = true;
    }
    return this._invTransModelView;
  };

  function RenderContext_get_InvTransModelViewProjection () {
    if (!this._invTransModelViewProjectionOk) {
      this._invTransModelViewProjection = $T01().Invert(this.get_TransModelViewProjection().MemberwiseClone()).MemberwiseClone();
      this._invTransModelViewProjectionOk = true;
    }
    return this._invTransModelViewProjection;
  };

  function RenderContext_get_InvTransProjection () {
    if (!this._invTransProjectionOk) {
      this._invTransProjection = $T01().Invert(this.get_TransProjection().MemberwiseClone()).MemberwiseClone();
      this._invTransProjectionOk = true;
    }
    return this._invTransProjection;
  };

  function RenderContext_get_InvTransView () {
    if (!this._invTransViewOk) {
      this._invTransView = $T01().Invert(this.get_TransView().MemberwiseClone()).MemberwiseClone();
      this._invTransViewOk = true;
    }
    return this._invTransView;
  };

  function RenderContext_get_InvView () {
    if (!this._invViewOk) {
      this._invView = $T01().Invert(this.get_View().MemberwiseClone()).MemberwiseClone();
      this._invViewOk = true;
    }
    return this._invView;
  };

  function RenderContext_get_Model () {
    return this._model;
  };

  function RenderContext_get_ModelView () {
    return this._modelView;
  };

  function RenderContext_get_ModelViewProjection () {
    if (!this._modelViewProjectionOk) {
      this._modelViewProjection = $T01().Mult(
        this.get_Projection().MemberwiseClone(), 
        this.get_ModelView().MemberwiseClone()
      ).MemberwiseClone();
      this._modelViewProjectionOk = true;
    }
    return this._modelViewProjection;
  };

  function RenderContext_get_NeedTangents () {
    return true;
  };

  function RenderContext_get_Projection () {
    return this._projection;
  };

  function RenderContext_get_TransModel () {
    if (!this._transModelOk) {
      this._transModel = $T01().Transpose(this.get_Model().MemberwiseClone());
      this._transModelOk = true;
    }
    return this._transModel;
  };

  function RenderContext_get_TransModelView () {
    if (!this._transModelViewOk) {
      this._transModelView = $T01().Transpose(this.get_ModelView().MemberwiseClone());
      this._transModelViewOk = true;
    }
    return this._transModelView;
  };

  function RenderContext_get_TransModelViewProjection () {
    if (!this._transModelViewProjectionOk) {
      this._transModelViewProjection = $T01().Transpose(this.get_ModelViewProjection().MemberwiseClone());
      this._transModelViewProjectionOk = true;
    }
    return this._transModelViewProjection;
  };

  function RenderContext_get_TransProjection () {
    if (!this._transProjectionOk) {
      this._transProjection = $T01().Transpose(this.get_Projection().MemberwiseClone());
      this._transProjectionOk = true;
    }
    return this._transProjection;
  };

  function RenderContext_get_TransView () {
    if (!this._transViewOk) {
      this._transView = $T01().Transpose(this.get_View().MemberwiseClone());
      this._transViewOk = true;
    }
    return this._transView;
  };

  function RenderContext_get_View () {
    return this._view;
  };

  function RenderContext_get_ViewportHeight () {
    return this.RenderContext$ViewportHeight$value;
  };

  function RenderContext_get_ViewportWidth () {
    return this.RenderContext$ViewportWidth$value;
  };

  function RenderContext_GetBufferContent (quad, texId) {
    $IM0A().Call(this._rci, null, quad, texId);
  };

  function RenderContext_GetParamValue (program, handle) {
    return +$IM0B().Call(this._rci, null, program._spi, handle);
  };

  function RenderContext_GetRenderState (renderState) {
    return $IM0C().Call(this._rci, null, renderState);
  };

  function RenderContext_GetShaderParam (program, paramName) {
    return $IM0D().Call(this._rci, null, program._spi, paramName);
  };

  function RenderContext_GetShaderParamList (program) {
    return $IM0E().Call(this._rci, null, program._spi);
  };

  function RenderContext_LoadFont (filename, size) {
    if (!$T17().Exists(filename)) {
      throw $S00().Construct(JSIL.ConcatString("Font not found: ", filename));
    }
    return $IM0F().Call(this._rci, null, filename, size);
  };

  function RenderContext_LoadImage (filename) {
    if (!$T17().Exists(filename)) {
      throw $S01().Construct();
    }
    return $IM10().Call(this._rci, null, filename);
  };

  function RenderContext_Render (m) {
    if (m._meshImp === null) {
      m._meshImp = $IM11().Call(this._rci, null);
    }
    if (!((m.get_Colors() === null) || 
        (m.get_Colors().length === 0) || m.get_ColorsSet())) {
      $IM12().Call(this._rci, null, m._meshImp, m.get_Colors());
    }
    if (!((m.get_Vertices() === null) || 
        (m.get_Vertices().length === 0) || m.get_VerticesSet())) {
      $IM13().Call(this._rci, null, m._meshImp, m.get_Vertices());
    }
    if (!((m.get_UVs() === null) || 
        (m.get_UVs().length === 0) || m.get_UVsSet())) {
      $IM14().Call(this._rci, null, m._meshImp, m.get_UVs());
    }
    if (!((m.get_Normals() === null) || 
        (m.get_Normals().length === 0) || m.get_NormalsSet())) {
      $IM15().Call(this._rci, null, m._meshImp, m.get_Normals());
    }
    if (!((m.get_Triangles() === null) || 
        (m.get_Triangles().length === 0) || m.get_TrianglesSet())) {
      $IM16().Call(this._rci, null, m._meshImp, m.get_Triangles());
    }
    $IM17().Call(this._rci, null, m._meshImp);
  };

  function RenderContext_set_ClearColor (value) {
    (this._rci.ClearColor = value);
  };

  function RenderContext_set_ClearDepth (value) {
    $IM18().Call(this._rci, null, value);
  };

  function RenderContext_set_DebugLinesEnabled (value) {
    this._debugLinesEnabled = value;
  };

  function RenderContext_set_Model (value) {
    this._model = value;
    this._modelViewProjectionOk = false;
    this._invModelOk = false;
    this._invModelViewOk = false;
    this._invModelViewProjectionOk = false;
    this._invTransModelOk = false;
    this._invTransModelViewOk = false;
    this._invTransModelViewProjectionOk = false;
    this._transModelOk = false;
    this._transModelViewOk = false;
    this._transModelViewProjectionOk = false;
    this._modelView = $S02().CallStatic($T01(), "op_Multiply", null, this._view, this._model).MemberwiseClone();
    this.UpdateCurrentShader();
    (this._rci.ModelView = this._modelView.MemberwiseClone());
  };

  function RenderContext_set_ModelView (value) {
    this._modelView = value.MemberwiseClone();
    this._view = $T01().Identity.MemberwiseClone();
    this._model = value.MemberwiseClone();
    this._modelViewProjectionOk = false;
    this._invModelOk = false;
    this._invViewOk = false;
    this._invModelViewOk = false;
    this._invModelViewProjectionOk = false;
    this._invTransModelOk = false;
    this._invTransViewOk = false;
    this._invTransModelViewOk = false;
    this._invTransModelViewProjectionOk = false;
    this._transModelOk = false;
    this._transViewOk = false;
    this._transModelViewOk = false;
    this._transModelViewProjectionOk = false;
    this.UpdateCurrentShader();
    (this._rci.ModelView = value.MemberwiseClone());
  };

  function RenderContext_set_Projection (value) {
    this._projection = value.MemberwiseClone();
    this._modelViewProjectionOk = false;
    this._invProjectionOk = false;
    this._invProjectionOk = false;
    this._invTransProjectionOk = false;
    this._invTransProjectionOk = false;
    this._transProjectionOk = false;
    this._transProjectionOk = false;
    this.UpdateCurrentShader();
    (this._rci.Projection = value.MemberwiseClone());
  };

  function RenderContext_set_View (value) {
    this._view = value;
    this._modelViewProjectionOk = false;
    this._invViewOk = false;
    this._invModelViewOk = false;
    this._invModelViewProjectionOk = false;
    this._invTransViewOk = false;
    this._invTransModelViewOk = false;
    this._invTransModelViewProjectionOk = false;
    this._transViewOk = false;
    this._transModelViewOk = false;
    this._transModelViewProjectionOk = false;
    this._modelView = $S02().CallStatic($T01(), "op_Multiply", null, this._view, this._model).MemberwiseClone();
    this.UpdateCurrentShader();
    (this._rci.ModelView = this._modelView.MemberwiseClone());
  };

  function RenderContext_set_ViewportHeight (value) {
    this.RenderContext$ViewportHeight$value = value;
  };

  function RenderContext_set_ViewportWidth (value) {
    this.RenderContext$ViewportWidth$value = value;
  };

  function RenderContext_SetLight$00 (v3, diffuse, ambient, specular, type, id) {
    switch (type) {
      case 1: 
        this.SetLightActive(id, $T10().$Cast(type));
        this.SetLightAmbient(id, ambient.MemberwiseClone());
        this.SetLightDiffuse(id, diffuse.MemberwiseClone());
        this.SetLightSpecular(id, specular.MemberwiseClone());
        this.SetLightDirection(id, v3.MemberwiseClone());
        break;

      case 2: 
        this.SetLightActive(id, $T10().$Cast(type));
        this.SetLightAmbient(id, ambient.MemberwiseClone());
        this.SetLightDiffuse(id, diffuse.MemberwiseClone());
        this.SetLightSpecular(id, specular.MemberwiseClone());
        this.SetLightPosition(id, v3.MemberwiseClone());
        break;

    }
  };

  function RenderContext_SetLight$01 (position, direction, diffuse, ambient, specular, type, id) {
    this.SetLightActive(id, $T10().$Cast(type));
    this.SetLightAmbient(id, ambient);
    this.SetLightDiffuse(id, diffuse);
    this.SetLightSpecular(id, specular);
    this.SetLightPosition(id, position);
    this.SetLightDirection(id, direction);
  };

  function RenderContext_SetLightActive (lightInx, active) {
    var sp = null;
    this._lightParams[lightInx].Active = +active;
    var paramName = (JSIL.ConcatString("FUSEE_L", lightInx, "_ACTIVE"));
    if ((sp = this._currentShader.GetShaderParam(paramName)) !== null) {
      this.SetShaderParam1f(sp, this._lightParams[lightInx].Active);
    }
  };

  function RenderContext_SetLightAmbient (lightInx, ambientColor) {
    var sp = null;
    this._lightParams[lightInx].AmbientColor = ambientColor;
    var paramName = (JSIL.ConcatString("FUSEE_L", lightInx, "_AMBIENT"));
    if ((sp = this._currentShader.GetShaderParam(paramName)) !== null) {
      this.SetShaderParam4f(sp, this._lightParams[lightInx].AmbientColor.MemberwiseClone());
    }
  };

  function RenderContext_SetLightDiffuse (lightInx, diffuseColor) {
    var sp = null;
    this._lightParams[lightInx].DiffuseColor = diffuseColor;
    var paramName = (JSIL.ConcatString("FUSEE_L", lightInx, "_DIFFUSE"));
    if ((sp = this._currentShader.GetShaderParam(paramName)) !== null) {
      this.SetShaderParam4f(sp, this._lightParams[lightInx].DiffuseColor.MemberwiseClone());
    }
  };

  function RenderContext_SetLightDirection (lightInx, direction) {
    var sp = null;
    this._lightParams[lightInx].Direction = direction;
    var paramName = (JSIL.ConcatString("FUSEE_L", lightInx, "_DIRECTION"));
    if ((sp = this._currentShader.GetShaderParam(paramName)) !== null) {
      this.SetShaderParam3f(sp, this._lightParams[lightInx].Direction.MemberwiseClone());
    }
  };

  function RenderContext_SetLightPosition (lightInx, position) {
    var sp = null;
    this._lightParams[lightInx].Position = position;
    var paramName = (JSIL.ConcatString("FUSEE_L", lightInx, "_POSITION"));
    if ((sp = this._currentShader.GetShaderParam(paramName)) !== null) {
      this.SetShaderParam3f(sp, this._lightParams[lightInx].Position.MemberwiseClone());
    }
  };

  function RenderContext_SetLightSpecular (lightInx, specularColor) {
    var sp = null;
    this._lightParams[lightInx].SpecularColor = specularColor;
    var paramName = (JSIL.ConcatString("FUSEE_L", lightInx, "_SPECULAR"));
    if ((sp = this._currentShader.GetShaderParam(paramName)) !== null) {
      this.SetShaderParam4f(sp, this._lightParams[lightInx].SpecularColor.MemberwiseClone());
    }
  };

  function RenderContext_SetLightSpotAngle (lightInx, angle) {
    var sp = null;
    this._lightParams[lightInx].Angle = +-$T10().$Cast(Math.cos(angle));
    var paramName = (JSIL.ConcatString("FUSEE_L", lightInx, "_SPOTANGLE"));
    if ((sp = this._currentShader.GetShaderParam(paramName)) !== null) {
      this.SetShaderParam1f(sp, this._lightParams[lightInx].Angle);
    }
  };

  function RenderContext_SetRenderState$02 (renderState, value) {
    $IM19().Call(this._rci, null, renderState, value);
  };

  function RenderContext_SetRenderState$03 (renderStateSet) {
    var enumerator = $IM1A().Call(renderStateSet.get_States(), null);
    try {

      while ($IM1B().Call(enumerator, null)) {
        var state = $IM1C().Call(enumerator, null).MemberwiseClone();
        var theKey = state.get_Key();
        var theValue = state.get_Value();
        $IM19().Call(this._rci, null, theKey, theValue);
      }
    } finally {
      if (enumerator !== null) {
        $IM1D().Call(enumerator, null);
      }
    }
  };

  function RenderContext_SetShader (program) {
    this._updatedShaderParams = false;
    if (this._currentShader !== program) {
      this._currentShader = program;
      $IM1E().Call(this._rci, null, program._spi);
    }
    this.UpdateShaderParams();
  };

  function RenderContext_SetShaderParam1f (param, val) {
    $IM1F().Call(this._rci, null, param, val);
  };

  function RenderContext_SetShaderParam2f (param, val) {
    $IM20().Call(this._rci, null, param, val);
  };

  function RenderContext_SetShaderParam3f (param, val) {
    $IM21().Call(this._rci, null, param, val);
  };

  function RenderContext_SetShaderParam4f (param, val) {
    $IM22().Call(this._rci, null, param, val);
  };

  function RenderContext_SetShaderParamMtx4f (param, val) {
    $IM23().Call(this._rci, null, param, val);
  };

  function RenderContext_SetShaderParamI (param, val) {
    $IM24().Call(this._rci, null, param, val);
  };

  function RenderContext_SetShaderParamTexture (param, texId) {
    $IM25().Call(this._rci, null, param, texId);
  };

  function RenderContext_TextOnImage (imgData, fontName, fontSize, text, textColor, startPosX, startPosY) {
    return $IM26().Call(this._rci, null, 
      imgData, 
      fontName, 
      fontSize, 
      text, 
      textColor, 
      startPosX, 
      startPosY
    );
  };

  function RenderContext_UpdateCurrentShader () {
    if (this._currentShader !== null) {
      if (!this._updatedShaderParams) {
        this.UpdateShaderParams();
      }
      if (this._currentShaderParams.FUSEE_M !== null) {
        this.SetShaderParamMtx4f(this._currentShaderParams.FUSEE_M, this.get_Model().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_V !== null) {
        this.SetShaderParamMtx4f(this._currentShaderParams.FUSEE_V, this.get_View().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_MV !== null) {
        this.SetShaderParamMtx4f(this._currentShaderParams.FUSEE_MV, this.get_ModelView().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_P !== null) {
        this.SetShaderParamMtx4f(this._currentShaderParams.FUSEE_P, this.get_Projection().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_MVP !== null) {
        this.SetShaderParamMtx4f(this._currentShaderParams.FUSEE_MVP, this.get_ModelViewProjection().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_IMV !== null) {
        this.SetShaderParamMtx4f(this._currentShaderParams.FUSEE_IMV, this.get_InvModelView().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_IP !== null) {
        this.SetShaderParamMtx4f(this._currentShaderParams.FUSEE_IP, this.get_InvProjection().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_IMVP !== null) {
        this.SetShaderParamMtx4f(this._currentShaderParams.FUSEE_IMVP, this.get_InvModelViewProjection().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_TMV !== null) {
        this.SetShaderParamMtx4f(this._currentShaderParams.FUSEE_TMV, this.get_TransModelView().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_TP !== null) {
        this.SetShaderParamMtx4f(this._currentShaderParams.FUSEE_TP, this.get_TransProjection().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_TMVP !== null) {
        this.SetShaderParamMtx4f(this._currentShaderParams.FUSEE_TMVP, this.get_TransModelViewProjection().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_ITMV !== null) {
        this.SetShaderParamMtx4f(this._currentShaderParams.FUSEE_ITMV, this.get_InvTransModelView().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_ITP !== null) {
        this.SetShaderParamMtx4f(this._currentShaderParams.FUSEE_ITP, this.get_InvTransProjection().MemberwiseClone());
      }
      if (this._currentShaderParams.FUSEE_ITMVP !== null) {
        this.SetShaderParamMtx4f(this._currentShaderParams.FUSEE_ITMVP, this.get_InvTransModelViewProjection().MemberwiseClone());
      }

      for (var i = 0; i < 8; i = ((i + 1) | 0)) {
        if (this._lightShaderParams[i].FUSEE_L_AMBIENT !== null) {
          this.SetShaderParam4f(this._lightShaderParams[i].FUSEE_L_AMBIENT, this._lightParams[i].AmbientColor.MemberwiseClone());
        }
        if (this._lightShaderParams[i].FUSEE_L_DIFFUSE !== null) {
          this.SetShaderParam4f(this._lightShaderParams[i].FUSEE_L_DIFFUSE, this._lightParams[i].DiffuseColor.MemberwiseClone());
        }
        if (this._lightShaderParams[i].FUSEE_L_SPECULAR !== null) {
          this.SetShaderParam4f(this._lightShaderParams[i].FUSEE_L_SPECULAR, this._lightParams[i].SpecularColor.MemberwiseClone());
        }
        if (this._lightShaderParams[i].FUSEE_L_POSITION !== null) {
          this.SetShaderParam3f(this._lightShaderParams[i].FUSEE_L_POSITION, this._lightParams[i].Position.MemberwiseClone());
        }
        if (this._lightShaderParams[i].FUSEE_L_DIRECTION !== null) {
          this.SetShaderParam3f(this._lightShaderParams[i].FUSEE_L_DIRECTION, this._lightParams[i].Direction.MemberwiseClone());
        }
        if (this._lightShaderParams[i].FUSEE_L_ACTIVE !== null) {
          this.SetShaderParam1f(this._lightShaderParams[i].FUSEE_L_ACTIVE, this._lightParams[i].Active);
        }
        if (this._lightShaderParams[i].FUSEE_L_SPOTANGLE !== null) {
          this.SetShaderParam1f(this._lightShaderParams[i].FUSEE_L_SPOTANGLE, this._lightParams[i].Angle);
        }
      }
    }
  };

  function RenderContext_UpdateShaderParams () {
    if (this._currentShader !== null) {
      this._currentShaderParams.FUSEE_M = this._currentShader.GetShaderParam("FUSEE_M");
      this._currentShaderParams.FUSEE_V = this._currentShader.GetShaderParam("FUSEE_V");
      this._currentShaderParams.FUSEE_MV = this._currentShader.GetShaderParam("FUSEE_MV");
      this._currentShaderParams.FUSEE_P = this._currentShader.GetShaderParam("FUSEE_P");
      this._currentShaderParams.FUSEE_MVP = this._currentShader.GetShaderParam("FUSEE_MVP");
      this._currentShaderParams.FUSEE_IMV = this._currentShader.GetShaderParam("FUSEE_IMV");
      this._currentShaderParams.FUSEE_IP = this._currentShader.GetShaderParam("FUSEE_IP");
      this._currentShaderParams.FUSEE_IMVP = this._currentShader.GetShaderParam("FUSEE_IMVP");
      this._currentShaderParams.FUSEE_TMV = this._currentShader.GetShaderParam("FUSEE_TMV");
      this._currentShaderParams.FUSEE_TP = this._currentShader.GetShaderParam("FUSEE_TP");
      this._currentShaderParams.FUSEE_TMVP = this._currentShader.GetShaderParam("FUSEE_TMVP");
      this._currentShaderParams.FUSEE_ITMV = this._currentShader.GetShaderParam("FUSEE_ITMV");
      this._currentShaderParams.FUSEE_ITP = this._currentShader.GetShaderParam("FUSEE_ITP");
      this._currentShaderParams.FUSEE_ITMVP = this._currentShader.GetShaderParam("FUSEE_ITMVP");

      for (var i = 0; i < 8; i = ((i + 1) | 0)) {
        this._lightShaderParams[i].FUSEE_L_AMBIENT = this._currentShader.GetShaderParam(JSIL.ConcatString("FUSEE_L", i, "_AMBIENT"));
        this._lightShaderParams[i].FUSEE_L_DIFFUSE = this._currentShader.GetShaderParam(JSIL.ConcatString("FUSEE_L", i, "_DIFFUSE"));
        this._lightShaderParams[i].FUSEE_L_SPECULAR = this._currentShader.GetShaderParam(JSIL.ConcatString("FUSEE_L", i, "_SPECULAR"));
        this._lightShaderParams[i].FUSEE_L_POSITION = this._currentShader.GetShaderParam(JSIL.ConcatString("FUSEE_L", i, "_POSITION"));
        this._lightShaderParams[i].FUSEE_L_DIRECTION = this._currentShader.GetShaderParam(JSIL.ConcatString("FUSEE_L", i, "_DIRECTION"));
        this._lightShaderParams[i].FUSEE_L_SPOTANGLE = this._currentShader.GetShaderParam(JSIL.ConcatString("FUSEE_L", i, "_SPOTANGLE"));
        this._lightShaderParams[i].FUSEE_L_ACTIVE = this._currentShader.GetShaderParam(JSIL.ConcatString("FUSEE_L", i, "_ACTIVE"));
      }
      this._updatedShaderParams = true;
      this.UpdateCurrentShader();
    }
  };

  function RenderContext_Viewport (x, y, width, height) {
    this.RenderContext$ViewportWidth$value = width;
    this.RenderContext$ViewportHeight$value = height;
    $IM27().Call(this._rci, null, x, y, width, height);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.RenderContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IRenderContextImp")], []), 
      RenderContext__ctor
    );

    $.Method({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.ClearFlags")], []), 
      RenderContext_Clear
    );

    $.Method({Static:false, Public:true }, "ColorMask", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean
        ], []), 
      RenderContext_ColorMask
    );

    $.Method({Static:false, Public:true }, "CreateImage", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ImageData"), [
          $.Int32, $.Int32, 
          $.String
        ], []), 
      RenderContext_CreateImage
    );

    $.Method({Static:false, Public:true }, "CreateShader", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.ShaderProgram"), [$.String, $.String], []), 
      RenderContext_CreateShader
    );

    $.Method({Static:false, Public:true }, "CreateTexture", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ITexture"), [$asm01.TypeRef("Fusee.Engine.ImageData")], []), 
      RenderContext_CreateTexture
    );

    $.Method({Static:false, Public:true }, "DebugLine", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Fusee.Math.float3"), $asm04.TypeRef("Fusee.Math.float3"), 
          $asm04.TypeRef("Fusee.Math.float4")
        ], []), 
      RenderContext_DebugLine
    );

    $.Method({Static:false, Public:true }, "DisableTexture", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ITexture"), [], []), 
      RenderContext_DisableTexture
    );

    $.Method({Static:false, Public:false}, "FixTextKerning", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")]), [
          $asm01.TypeRef("Fusee.Engine.IFont"), $jsilcore.TypeRef("System.Array", [$asm04.TypeRef("Fusee.Math.float3")]), 
          $.String, $.Single
        ], []), 
      RenderContext_FixTextKerning
    );

    $.Method({Static:false, Public:true }, "Frustum", 
      new JSIL.MethodSignature(null, [
          $.Double, $.Double, 
          $.Double, $.Double, 
          $.Double, $.Double
        ], []), 
      RenderContext_Frustum
    );

    $.Method({Static:false, Public:true }, "get_ClearColor", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4"), [], []), 
      RenderContext_get_ClearColor
    );

    $.Method({Static:false, Public:true }, "get_ClearDepth", 
      new JSIL.MethodSignature($.Single, [], []), 
      RenderContext_get_ClearDepth
    );

    $.Method({Static:false, Public:true }, "get_CurrentShader", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.ShaderProgram"), [], []), 
      RenderContext_get_CurrentShader
    );

    $.Method({Static:false, Public:true }, "get_DebugLinesEnabled", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      RenderContext_get_DebugLinesEnabled
    );

    $.Method({Static:false, Public:true }, "get_InvModel", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      RenderContext_get_InvModel
    );

    $.Method({Static:false, Public:true }, "get_InvModelView", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      RenderContext_get_InvModelView
    );

    $.Method({Static:false, Public:true }, "get_InvModelViewProjection", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      RenderContext_get_InvModelViewProjection
    );

    $.Method({Static:false, Public:true }, "get_InvProjection", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      RenderContext_get_InvProjection
    );

    $.Method({Static:false, Public:true }, "get_InvTransModel", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      RenderContext_get_InvTransModel
    );

    $.Method({Static:false, Public:true }, "get_InvTransModelView", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      RenderContext_get_InvTransModelView
    );

    $.Method({Static:false, Public:true }, "get_InvTransModelViewProjection", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      RenderContext_get_InvTransModelViewProjection
    );

    $.Method({Static:false, Public:true }, "get_InvTransProjection", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      RenderContext_get_InvTransProjection
    );

    $.Method({Static:false, Public:true }, "get_InvTransView", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      RenderContext_get_InvTransView
    );

    $.Method({Static:false, Public:true }, "get_InvView", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      RenderContext_get_InvView
    );

    $.Method({Static:false, Public:true }, "get_Model", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      RenderContext_get_Model
    );

    $.Method({Static:false, Public:true }, "get_ModelView", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      RenderContext_get_ModelView
    );

    $.Method({Static:false, Public:true }, "get_ModelViewProjection", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      RenderContext_get_ModelViewProjection
    );

    $.Method({Static:false, Public:false}, "get_NeedTangents", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      RenderContext_get_NeedTangents
    );

    $.Method({Static:false, Public:true }, "get_Projection", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      RenderContext_get_Projection
    );

    $.Method({Static:false, Public:true }, "get_TransModel", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      RenderContext_get_TransModel
    );

    $.Method({Static:false, Public:true }, "get_TransModelView", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      RenderContext_get_TransModelView
    );

    $.Method({Static:false, Public:true }, "get_TransModelViewProjection", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      RenderContext_get_TransModelViewProjection
    );

    $.Method({Static:false, Public:true }, "get_TransProjection", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      RenderContext_get_TransProjection
    );

    $.Method({Static:false, Public:true }, "get_TransView", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      RenderContext_get_TransView
    );

    $.Method({Static:false, Public:true }, "get_View", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [], []), 
      RenderContext_get_View
    );

    $.Method({Static:false, Public:false}, "get_ViewportHeight", 
      new JSIL.MethodSignature($.Int32, [], []), 
      RenderContext_get_ViewportHeight
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "get_ViewportWidth", 
      new JSIL.MethodSignature($.Int32, [], []), 
      RenderContext_get_ViewportWidth
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "GetBufferContent", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.Rectangle"), $asm01.TypeRef("Fusee.Engine.ITexture")], []), 
      RenderContext_GetBufferContent
    );

    $.Method({Static:false, Public:true }, "GetParamValue", 
      new JSIL.MethodSignature($.Single, [$asm02.TypeRef("Fusee.Engine.ShaderProgram"), $asm01.TypeRef("Fusee.Engine.IShaderParam")], []), 
      RenderContext_GetParamValue
    );

    $.Method({Static:false, Public:true }, "GetRenderState", 
      new JSIL.MethodSignature($.UInt32, [$asm01.TypeRef("Fusee.Engine.RenderState")], []), 
      RenderContext_GetRenderState
    );

    $.Method({Static:false, Public:true }, "GetShaderParam", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IShaderParam"), [$asm02.TypeRef("Fusee.Engine.ShaderProgram"), $.String], []), 
      RenderContext_GetShaderParam
    );

    $.Method({Static:false, Public:true }, "GetShaderParamList", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm01.TypeRef("Fusee.Engine.ShaderParamInfo")]), [$asm02.TypeRef("Fusee.Engine.ShaderProgram")], []), 
      RenderContext_GetShaderParamList
    );

    $.Method({Static:false, Public:true }, "LoadFont", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IFont"), [$.String, $.UInt32], []), 
      RenderContext_LoadFont
    );

    $.Method({Static:false, Public:true }, "LoadImage", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ImageData"), [$.String], []), 
      RenderContext_LoadImage
    );

    $.ExternalMethod({Static:false, Public:true }, "LoadSystemFont", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.IFont"), [$.String, $.UInt32], [])
    )
      .Attribute($asm0F.TypeRef("JSIL.Meta.JSExternal"));

    $.Method({Static:false, Public:true }, "Render", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.Mesh")], []), 
      RenderContext_Render
    );

    $.Method({Static:false, Public:true }, "set_ClearColor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4")], []), 
      RenderContext_set_ClearColor
    );

    $.Method({Static:false, Public:true }, "set_ClearDepth", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      RenderContext_set_ClearDepth
    );

    $.Method({Static:false, Public:true }, "set_DebugLinesEnabled", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      RenderContext_set_DebugLinesEnabled
    );

    $.Method({Static:false, Public:true }, "set_Model", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4")], []), 
      RenderContext_set_Model
    );

    $.Method({Static:false, Public:true }, "set_ModelView", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4")], []), 
      RenderContext_set_ModelView
    );

    $.Method({Static:false, Public:true }, "set_Projection", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4")], []), 
      RenderContext_set_Projection
    );

    $.Method({Static:false, Public:true }, "set_View", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4x4")], []), 
      RenderContext_set_View
    );

    $.Method({Static:false, Public:false}, "set_ViewportHeight", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      RenderContext_set_ViewportHeight
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:false}, "set_ViewportWidth", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      RenderContext_set_ViewportWidth
    )
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.Method({Static:false, Public:true }, "SetLight", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Fusee.Math.float3"), $asm04.TypeRef("Fusee.Math.float4"), 
          $asm04.TypeRef("Fusee.Math.float4"), $asm04.TypeRef("Fusee.Math.float4"), 
          $.Int32, $.Int32
        ], []), 
      RenderContext_SetLight$00
    );

    $.Method({Static:false, Public:true }, "SetLight", 
      new JSIL.MethodSignature(null, [
          $asm04.TypeRef("Fusee.Math.float3"), $asm04.TypeRef("Fusee.Math.float3"), 
          $asm04.TypeRef("Fusee.Math.float4"), $asm04.TypeRef("Fusee.Math.float4"), 
          $asm04.TypeRef("Fusee.Math.float4"), $.Int32, 
          $.Int32
        ], []), 
      RenderContext_SetLight$01
    );

    $.Method({Static:false, Public:true }, "SetLightActive", 
      new JSIL.MethodSignature(null, [$.Int32, $.Single], []), 
      RenderContext_SetLightActive
    );

    $.Method({Static:false, Public:true }, "SetLightAmbient", 
      new JSIL.MethodSignature(null, [$.Int32, $asm04.TypeRef("Fusee.Math.float4")], []), 
      RenderContext_SetLightAmbient
    );

    $.Method({Static:false, Public:true }, "SetLightDiffuse", 
      new JSIL.MethodSignature(null, [$.Int32, $asm04.TypeRef("Fusee.Math.float4")], []), 
      RenderContext_SetLightDiffuse
    );

    $.Method({Static:false, Public:true }, "SetLightDirection", 
      new JSIL.MethodSignature(null, [$.Int32, $asm04.TypeRef("Fusee.Math.float3")], []), 
      RenderContext_SetLightDirection
    );

    $.Method({Static:false, Public:true }, "SetLightPosition", 
      new JSIL.MethodSignature(null, [$.Int32, $asm04.TypeRef("Fusee.Math.float3")], []), 
      RenderContext_SetLightPosition
    );

    $.Method({Static:false, Public:true }, "SetLightSpecular", 
      new JSIL.MethodSignature(null, [$.Int32, $asm04.TypeRef("Fusee.Math.float4")], []), 
      RenderContext_SetLightSpecular
    );

    $.Method({Static:false, Public:true }, "SetLightSpotAngle", 
      new JSIL.MethodSignature(null, [$.Int32, $.Single], []), 
      RenderContext_SetLightSpotAngle
    );

    $.Method({Static:false, Public:true }, "SetRenderState", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.RenderState"), $.UInt32], []), 
      RenderContext_SetRenderState$02
    );

    $.Method({Static:false, Public:true }, "SetRenderState", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.RenderStateSet")], []), 
      RenderContext_SetRenderState$03
    );

    $.Method({Static:false, Public:true }, "SetShader", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.ShaderProgram")], []), 
      RenderContext_SetShader
    );

    $.Method({Static:false, Public:true }, "SetShaderParam1f", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IShaderParam"), $.Single], []), 
      RenderContext_SetShaderParam1f
    )
      .Attribute($asm0F.TypeRef("JSIL.Meta.JSChangeName"), function () { return ["SetShaderParam1f"]; });

    $.Method({Static:false, Public:true }, "SetShaderParam2f", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IShaderParam"), $asm04.TypeRef("Fusee.Math.float2")], []), 
      RenderContext_SetShaderParam2f
    )
      .Attribute($asm0F.TypeRef("JSIL.Meta.JSChangeName"), function () { return ["SetShaderParam2f"]; });

    $.Method({Static:false, Public:true }, "SetShaderParam3f", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IShaderParam"), $asm04.TypeRef("Fusee.Math.float3")], []), 
      RenderContext_SetShaderParam3f
    )
      .Attribute($asm0F.TypeRef("JSIL.Meta.JSChangeName"), function () { return ["SetShaderParam3f"]; });

    $.Method({Static:false, Public:true }, "SetShaderParam4f", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IShaderParam"), $asm04.TypeRef("Fusee.Math.float4")], []), 
      RenderContext_SetShaderParam4f
    )
      .Attribute($asm0F.TypeRef("JSIL.Meta.JSChangeName"), function () { return ["SetShaderParam4f"]; });

    $.Method({Static:false, Public:true }, "SetShaderParamMtx4f", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IShaderParam"), $asm04.TypeRef("Fusee.Math.float4x4")], []), 
      RenderContext_SetShaderParamMtx4f
    )
      .Attribute($asm0F.TypeRef("JSIL.Meta.JSChangeName"), function () { return ["SetShaderParamMtx4f"]; });

    $.Method({Static:false, Public:true }, "SetShaderParamI", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IShaderParam"), $.Int32], []), 
      RenderContext_SetShaderParamI
    )
      .Attribute($asm0F.TypeRef("JSIL.Meta.JSChangeName"), function () { return ["SetShaderParamI"]; });

    $.Method({Static:false, Public:true }, "SetShaderParamTexture", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.IShaderParam"), $asm01.TypeRef("Fusee.Engine.ITexture")], []), 
      RenderContext_SetShaderParamTexture
    );

    $.Method({Static:false, Public:true }, "TextOnImage", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ImageData"), [
          $asm01.TypeRef("Fusee.Engine.ImageData"), $.String, 
          $.Single, $.String, 
          $.String, $.Single, 
          $.Single
        ], []), 
      RenderContext_TextOnImage
    );

    $.Method({Static:false, Public:false}, "UpdateCurrentShader", 
      new JSIL.MethodSignature(null, [], []), 
      RenderContext_UpdateCurrentShader
    );

    $.Method({Static:false, Public:false}, "UpdateShaderParams", 
      new JSIL.MethodSignature(null, [], []), 
      RenderContext_UpdateShaderParams
    );

    $.Method({Static:false, Public:true }, "Viewport", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ], []), 
      RenderContext_Viewport
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_rci", $asm01.TypeRef("Fusee.Engine.IRenderContextImp")); 
    $.Field({Static:false, Public:false}, "_currentShader", $asm02.TypeRef("Fusee.Engine.ShaderProgram")); 
    $.Field({Static:false, Public:false}, "_currentShaderParams", $asm02.TypeRef("Fusee.Engine.RenderContext/MatrixParamNames")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_lightParams", $jsilcore.TypeRef("System.Array", [$asm01.TypeRef("Fusee.Engine.Light")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_lightShaderParams", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("Fusee.Engine.RenderContext/LightParamNames")])); 
    $.Field({Static:false, Public:false}, "_updatedShaderParams", $.Boolean); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_debugShader", $asm02.TypeRef("Fusee.Engine.ShaderProgram")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_debugColor", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:false}, "_debugLinesEnabled", $.Boolean); 
    $.Field({Static:false, Public:false}, "_modelView", $asm04.TypeRef("Fusee.Math.float4x4")); 
    $.Field({Static:false, Public:false}, "_projection", $asm04.TypeRef("Fusee.Math.float4x4")); 
    $.Field({Static:false, Public:false}, "_view", $asm04.TypeRef("Fusee.Math.float4x4")); 
    $.Field({Static:false, Public:false}, "_model", $asm04.TypeRef("Fusee.Math.float4x4")); 
    $.Field({Static:false, Public:false}, "_modelViewProjection", $asm04.TypeRef("Fusee.Math.float4x4")); 
    $.Field({Static:false, Public:false}, "_invView", $asm04.TypeRef("Fusee.Math.float4x4")); 
    $.Field({Static:false, Public:false}, "_invModel", $asm04.TypeRef("Fusee.Math.float4x4")); 
    $.Field({Static:false, Public:false}, "_invModelView", $asm04.TypeRef("Fusee.Math.float4x4")); 
    $.Field({Static:false, Public:false}, "_invProjection", $asm04.TypeRef("Fusee.Math.float4x4")); 
    $.Field({Static:false, Public:false}, "_invModelViewProjection", $asm04.TypeRef("Fusee.Math.float4x4")); 
    $.Field({Static:false, Public:false}, "_invTransView", $asm04.TypeRef("Fusee.Math.float4x4")); 
    $.Field({Static:false, Public:false}, "_invTransModel", $asm04.TypeRef("Fusee.Math.float4x4")); 
    $.Field({Static:false, Public:false}, "_invTransModelView", $asm04.TypeRef("Fusee.Math.float4x4")); 
    $.Field({Static:false, Public:false}, "_invTransProjection", $asm04.TypeRef("Fusee.Math.float4x4")); 
    $.Field({Static:false, Public:false}, "_invTransModelViewProjection", $asm04.TypeRef("Fusee.Math.float4x4")); 
    $.Field({Static:false, Public:false}, "_transView", $asm04.TypeRef("Fusee.Math.float4x4")); 
    $.Field({Static:false, Public:false}, "_transModel", $asm04.TypeRef("Fusee.Math.float4x4")); 
    $.Field({Static:false, Public:false}, "_transModelView", $asm04.TypeRef("Fusee.Math.float4x4")); 
    $.Field({Static:false, Public:false}, "_transProjection", $asm04.TypeRef("Fusee.Math.float4x4")); 
    $.Field({Static:false, Public:false}, "_transModelViewProjection", $asm04.TypeRef("Fusee.Math.float4x4")); 
    $.Field({Static:false, Public:false}, "_modelViewProjectionOk", $.Boolean); 
    $.Field({Static:false, Public:false}, "_invViewOk", $.Boolean); 
    $.Field({Static:false, Public:false}, "_invModelOk", $.Boolean); 
    $.Field({Static:false, Public:false}, "_invModelViewOk", $.Boolean); 
    $.Field({Static:false, Public:false}, "_invProjectionOk", $.Boolean); 
    $.Field({Static:false, Public:false}, "_invModelViewProjectionOk", $.Boolean); 
    $.Field({Static:false, Public:false}, "_invTransViewOk", $.Boolean); 
    $.Field({Static:false, Public:false}, "_invTransModelOk", $.Boolean); 
    $.Field({Static:false, Public:false}, "_invTransModelViewOk", $.Boolean); 
    $.Field({Static:false, Public:false}, "_invTransProjectionOk", $.Boolean); 
    $.Field({Static:false, Public:false}, "_invTransModelViewProjectionOk", $.Boolean); 
    $.Field({Static:false, Public:false}, "_transViewOk", $.Boolean); 
    $.Field({Static:false, Public:false}, "_transModelOk", $.Boolean); 
    $.Field({Static:false, Public:false}, "_transModelViewOk", $.Boolean); 
    $.Field({Static:false, Public:false}, "_transProjectionOk", $.Boolean); 
    $.Field({Static:false, Public:false}, "_transModelViewProjectionOk", $.Boolean); 
    $.Field({Static:false, Public:false}, "RenderContext$ViewportWidth$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Field({Static:false, Public:false}, "RenderContext$ViewportHeight$value", $.Int32)
      .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute")); 
    $.Property({Static:false, Public:false}, "ViewportWidth", $.Int32);

    $.Property({Static:false, Public:false}, "ViewportHeight", $.Int32);

    $.Property({Static:false, Public:true }, "View", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "Model", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "ModelView", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "Projection", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "ModelViewProjection", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "InvView", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "InvModel", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "InvModelView", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "InvProjection", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "InvModelViewProjection", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "TransView", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "TransModel", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "TransModelView", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "TransProjection", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "TransModelViewProjection", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "InvTransView", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "InvTransModel", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "InvTransModelView", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "InvTransProjection", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "InvTransModelViewProjection", $asm04.TypeRef("Fusee.Math.float4x4"));

    $.Property({Static:false, Public:true }, "ClearColor", $asm04.TypeRef("Fusee.Math.float4"));

    $.Property({Static:false, Public:true }, "ClearDepth", $.Single);

    $.Property({Static:false, Public:true }, "CurrentShader", $asm02.TypeRef("Fusee.Engine.ShaderProgram"));

    $.Property({Static:false, Public:false}, "NeedTangents", $.Boolean);

    $.Property({Static:false, Public:true }, "DebugLinesEnabled", $.Boolean);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.RenderContext/MatrixParamNames */ 

(function MatrixParamNames$Members () {
  var $, $thisType;
  function MatrixParamNames__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.RenderContext/MatrixParamNames", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      MatrixParamNames__ctor
    );

    $.Field({Static:false, Public:true }, "FUSEE_M", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:true }, "FUSEE_V", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:true }, "FUSEE_MV", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:true }, "FUSEE_P", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:true }, "FUSEE_MVP", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:true }, "FUSEE_IMV", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:true }, "FUSEE_IP", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:true }, "FUSEE_IMVP", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:true }, "FUSEE_TMV", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:true }, "FUSEE_TP", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:true }, "FUSEE_TMVP", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:true }, "FUSEE_ITMV", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:true }, "FUSEE_ITP", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:true }, "FUSEE_ITMVP", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Engine.RenderContext/LightParamNames */ 

(function LightParamNames$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.RenderContext/LightParamNames", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "FUSEE_L_AMBIENT", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:true }, "FUSEE_L_DIFFUSE", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:true }, "FUSEE_L_SPECULAR", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:true }, "FUSEE_L_POSITION", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:true }, "FUSEE_L_DIRECTION", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:true }, "FUSEE_L_SPOTANGLE", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:true }, "FUSEE_L_ACTIVE", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.RenderStateSet */ 

(function RenderStateSet$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Collections.Generic.Dictionary$b2.Of($asm01.Fusee.Engine.RenderState, $asm07.System.UInt32))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.Fusee.Engine.RenderState)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm01.Fusee.Engine.ColorUint)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Fusee.Engine.BlendOperation)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm01.Fusee.Engine.Cull)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm01.Fusee.Engine.Blend)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm01.Fusee.Engine.FillMode)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm01.Fusee.Engine.Compare)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm04.Fusee.Math.float4)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("Fusee.Engine.RenderState"), $asm07.TypeRef("System.UInt32")]), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4"), [$asm01.TypeRef("Fusee.Engine.ColorUint")], []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ColorUint"), [$asm07.TypeRef("System.UInt32")], []))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.UInt32"), [$asm01.TypeRef("Fusee.Engine.ColorUint")], []))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.ColorUint"), [$asm04.TypeRef("Fusee.Math.float4")], []))) ();
  };

  function RenderStateSet__ctor () {
    this._states = $S00().Construct();
  };

  function RenderStateSet_get_AlphaBlendEnable () {
    return (this._states.get_Item($T01().AlphaBlendEnable) !== 0);
  };

  function RenderStateSet_get_BlendFactor () {
    return $S01().CallStatic($T02(), "op_Explicit", null, $S02().CallStatic($T02(), "op_Explicit", null, this._states.get_Item($T01().BlendFactor)));
  };

  function RenderStateSet_get_BlendOperation () {
    return $T03().$Cast(this._states.get_Item($T01().BlendOperation));
  };

  function RenderStateSet_get_BlendOperationAlpha () {
    return $T03().$Cast(this._states.get_Item($T01().BlendOperationAlpha));
  };

  function RenderStateSet_get_Clipping () {
    return (this._states.get_Item($T01().Clipping) !== 0);
  };

  function RenderStateSet_get_CullMode () {
    return $T04().$Cast(this._states.get_Item($T01().CullMode));
  };

  function RenderStateSet_get_DestinationBlend () {
    return $T05().$Cast(this._states.get_Item($T01().DestinationBlend));
  };

  function RenderStateSet_get_DestinationBlendAlpha () {
    return $T05().$Cast(this._states.get_Item($T01().DestinationBlendAlpha));
  };

  function RenderStateSet_get_FillMode () {
    return $T06().$Cast(this._states.get_Item($T01().FillMode));
  };

  function RenderStateSet_get_SourceBlend () {
    return $T05().$Cast(this._states.get_Item($T01().SourceBlend));
  };

  function RenderStateSet_get_SourceBlendAlpha () {
    return $T05().$Cast(this._states.get_Item($T01().SourceBlendAlpha));
  };

  function RenderStateSet_get_States () {
    return this._states;
  };

  function RenderStateSet_get_ZEnable () {
    return (this._states.get_Item($T01().ZEnable) !== 0);
  };

  function RenderStateSet_get_ZFunc () {
    return $T07().$Cast(this._states.get_Item($T01().ZFunc));
  };

  function RenderStateSet_set_AlphaBlendEnable (value) {
    this._states.set_Item($T01().AlphaBlendEnable, (value ? 1 : 0));
  };

  function RenderStateSet_set_BlendFactor (value) {
    this._states.set_Item($T01().BlendFactor, $S03().CallStatic($T02(), "op_Explicit", null, $S04().CallStatic($T02(), "op_Explicit", null, value)));
  };

  function RenderStateSet_set_BlendOperation (value) {
    this._states.set_Item($T01().BlendOperation, value.valueOf());
  };

  function RenderStateSet_set_BlendOperationAlpha (value) {
    this._states.set_Item($T01().BlendOperationAlpha, value.valueOf());
  };

  function RenderStateSet_set_Clipping (value) {
    this._states.set_Item($T01().Clipping, (value ? 1 : 0));
  };

  function RenderStateSet_set_CullMode (value) {
    this._states.set_Item($T01().CullMode, value.valueOf());
  };

  function RenderStateSet_set_DestinationBlend (value) {
    this._states.set_Item($T01().DestinationBlend, value.valueOf());
  };

  function RenderStateSet_set_DestinationBlendAlpha (value) {
    this._states.set_Item($T01().DestinationBlendAlpha, value.valueOf());
  };

  function RenderStateSet_set_FillMode (value) {
    this._states.set_Item($T01().FillMode, value.valueOf());
  };

  function RenderStateSet_set_SourceBlend (value) {
    this._states.set_Item($T01().SourceBlend, value.valueOf());
  };

  function RenderStateSet_set_SourceBlendAlpha (value) {
    this._states.set_Item($T01().SourceBlendAlpha, value.valueOf());
  };

  function RenderStateSet_set_ZEnable (value) {
    this._states.set_Item($T01().ZEnable, (value ? 1 : 0));
  };

  function RenderStateSet_set_ZFunc (value) {
    this._states.set_Item($T01().ZFunc, value.valueOf());
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.RenderStateSet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      RenderStateSet__ctor
    );

    $.Method({Static:false, Public:true }, "get_AlphaBlendEnable", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      RenderStateSet_get_AlphaBlendEnable
    );

    $.Method({Static:false, Public:true }, "get_BlendFactor", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4"), [], []), 
      RenderStateSet_get_BlendFactor
    );

    $.Method({Static:false, Public:true }, "get_BlendOperation", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.BlendOperation"), [], []), 
      RenderStateSet_get_BlendOperation
    );

    $.Method({Static:false, Public:true }, "get_BlendOperationAlpha", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.BlendOperation"), [], []), 
      RenderStateSet_get_BlendOperationAlpha
    );

    $.Method({Static:false, Public:true }, "get_Clipping", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      RenderStateSet_get_Clipping
    );

    $.Method({Static:false, Public:true }, "get_CullMode", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.Cull"), [], []), 
      RenderStateSet_get_CullMode
    );

    $.Method({Static:false, Public:true }, "get_DestinationBlend", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.Blend"), [], []), 
      RenderStateSet_get_DestinationBlend
    );

    $.Method({Static:false, Public:true }, "get_DestinationBlendAlpha", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.Blend"), [], []), 
      RenderStateSet_get_DestinationBlendAlpha
    );

    $.Method({Static:false, Public:true }, "get_FillMode", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.FillMode"), [], []), 
      RenderStateSet_get_FillMode
    );

    $.Method({Static:false, Public:true }, "get_SourceBlend", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.Blend"), [], []), 
      RenderStateSet_get_SourceBlend
    );

    $.Method({Static:false, Public:true }, "get_SourceBlendAlpha", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.Blend"), [], []), 
      RenderStateSet_get_SourceBlendAlpha
    );

    $.Method({Static:false, Public:true }, "get_States", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm01.TypeRef("Fusee.Engine.RenderState"), $.UInt32])]), [], []), 
      RenderStateSet_get_States
    );

    $.Method({Static:false, Public:true }, "get_ZEnable", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      RenderStateSet_get_ZEnable
    );

    $.Method({Static:false, Public:true }, "get_ZFunc", 
      new JSIL.MethodSignature($asm01.TypeRef("Fusee.Engine.Compare"), [], []), 
      RenderStateSet_get_ZFunc
    );

    $.Method({Static:false, Public:true }, "set_AlphaBlendEnable", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      RenderStateSet_set_AlphaBlendEnable
    );

    $.Method({Static:false, Public:true }, "set_BlendFactor", 
      new JSIL.MethodSignature(null, [$asm04.TypeRef("Fusee.Math.float4")], []), 
      RenderStateSet_set_BlendFactor
    );

    $.Method({Static:false, Public:true }, "set_BlendOperation", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.BlendOperation")], []), 
      RenderStateSet_set_BlendOperation
    );

    $.Method({Static:false, Public:true }, "set_BlendOperationAlpha", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.BlendOperation")], []), 
      RenderStateSet_set_BlendOperationAlpha
    );

    $.Method({Static:false, Public:true }, "set_Clipping", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      RenderStateSet_set_Clipping
    );

    $.Method({Static:false, Public:true }, "set_CullMode", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.Cull")], []), 
      RenderStateSet_set_CullMode
    );

    $.Method({Static:false, Public:true }, "set_DestinationBlend", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.Blend")], []), 
      RenderStateSet_set_DestinationBlend
    );

    $.Method({Static:false, Public:true }, "set_DestinationBlendAlpha", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.Blend")], []), 
      RenderStateSet_set_DestinationBlendAlpha
    );

    $.Method({Static:false, Public:true }, "set_FillMode", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.FillMode")], []), 
      RenderStateSet_set_FillMode
    );

    $.Method({Static:false, Public:true }, "set_SourceBlend", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.Blend")], []), 
      RenderStateSet_set_SourceBlend
    );

    $.Method({Static:false, Public:true }, "set_SourceBlendAlpha", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.Blend")], []), 
      RenderStateSet_set_SourceBlendAlpha
    );

    $.Method({Static:false, Public:true }, "set_ZEnable", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      RenderStateSet_set_ZEnable
    );

    $.Method({Static:false, Public:true }, "set_ZFunc", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("Fusee.Engine.Compare")], []), 
      RenderStateSet_set_ZFunc
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_states", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm01.TypeRef("Fusee.Engine.RenderState"), $.UInt32])); 
    $.Property({Static:false, Public:true }, "FillMode", $asm01.TypeRef("Fusee.Engine.FillMode"));

    $.Property({Static:false, Public:true }, "CullMode", $asm01.TypeRef("Fusee.Engine.Cull"));

    $.Property({Static:false, Public:true }, "Clipping", $.Boolean);

    $.Property({Static:false, Public:true }, "AlphaBlendEnable", $.Boolean);

    $.Property({Static:false, Public:true }, "BlendOperation", $asm01.TypeRef("Fusee.Engine.BlendOperation"));

    $.Property({Static:false, Public:true }, "BlendOperationAlpha", $asm01.TypeRef("Fusee.Engine.BlendOperation"));

    $.Property({Static:false, Public:true }, "SourceBlend", $asm01.TypeRef("Fusee.Engine.Blend"));

    $.Property({Static:false, Public:true }, "DestinationBlend", $asm01.TypeRef("Fusee.Engine.Blend"));

    $.Property({Static:false, Public:true }, "SourceBlendAlpha", $asm01.TypeRef("Fusee.Engine.Blend"));

    $.Property({Static:false, Public:true }, "DestinationBlendAlpha", $asm01.TypeRef("Fusee.Engine.Blend"));

    $.Property({Static:false, Public:true }, "BlendFactor", $asm04.TypeRef("Fusee.Math.float4"));

    $.Property({Static:false, Public:true }, "ZEnable", $.Boolean);

    $.Property({Static:false, Public:true }, "ZFunc", $asm01.TypeRef("Fusee.Engine.Compare"));

    $.Property({Static:false, Public:true }, "States", $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Collections.Generic.KeyValuePair`2", [$asm01.TypeRef("Fusee.Engine.RenderState"), $.UInt32])]));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Engine.EffectPassDeclaration */ 

(function EffectPassDeclaration$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.EffectPassDeclaration", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "StateSet", $asm02.TypeRef("Fusee.Engine.RenderStateSet")); 
    $.Field({Static:false, Public:true }, "VS", $.String); 
    $.Field({Static:false, Public:true }, "PS", $.String); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Fusee.Engine.EffectParameterDeclaration */ 

(function EffectParameterDeclaration$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "Fusee.Engine.EffectParameterDeclaration", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "Name", $.String); 
    $.Field({Static:false, Public:true }, "Value", $.Object); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.EffectParam */ 

(function EffectParam$Members () {
  var $, $thisType;
  function EffectParam__ctor () {
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.EffectParam", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      EffectParam__ctor
    );

    $.Field({Static:false, Public:true }, "Info", $asm01.TypeRef("Fusee.Engine.ShaderParamInfo")); 
    $.Field({Static:false, Public:true }, "Value", $.Object); 
    $.Field({Static:false, Public:true }, "ShaderInxs", $asm07.TypeRef("System.Collections.Generic.List`1", [$.Int32])); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.ShaderEffect */ 

(function ShaderEffect$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm02.Fusee.Engine.EffectPassDeclaration))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerable$b1.Of($asm02.Fusee.Engine.EffectParameterDeclaration))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.Fusee.Engine.RenderStateSet)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Fusee.Engine.ShaderProgram)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Collections.Generic.Dictionary$b2.Of($asm07.System.String, $asm07.System.Object))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerator$b1.Of($asm02.Fusee.Engine.EffectParameterDeclaration))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Collections.IEnumerator)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm02.Fusee.Engine.EffectParameterDeclaration)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm02.Fusee.Engine.RenderContext)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.Exception)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm02.Fusee.Engine.EffectParam)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm07.System.String))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.Void)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm07.System.Collections.Generic.Dictionary$b2.Of($asm07.System.String, $asm02.Fusee.Engine.EffectParam))) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm07.System.Collections.Generic.List$b1.Of($asm07.System.Collections.Generic.List$b1.Of($asm02.Fusee.Engine.EffectParam)))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerable$b1.Of($asm01.Fusee.Engine.ShaderParamInfo))) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm07.System.Collections.Generic.List$b1.Of($asm02.Fusee.Engine.EffectParam))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerator$b1.Of($asm01.Fusee.Engine.ShaderParamInfo))) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm01.Fusee.Engine.ShaderParamInfo)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm07.System.Double)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm07.System.Collections.Generic.List$b1.Of($asm07.System.Int32))) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerable$b1.Of($asm07.System.Int32))) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm02.Fusee.Engine.Mesh)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm04.Fusee.Math.float2)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm04.Fusee.Math.float3)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm04.Fusee.Math.float4)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm04.Fusee.Math.float4x4)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm01.Fusee.Engine.ITexture)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentNullException"), [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Object")]), []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Exception")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.String"), $asm02.TypeRef("Fusee.Engine.EffectParam")]), []))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("Fusee.Engine.EffectParam")])]), []))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("Fusee.Engine.EffectParam")])], []))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("Fusee.Engine.EffectParam")]), []))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")], []))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Type")], []))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")], []))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Int32")], []))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Int32")]), [$asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Int32")])]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.EffectParam")], []))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerable$b1.Of($asm02.Fusee.Engine.EffectParameterDeclaration).GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm07.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerator$b1.Of($asm02.Fusee.Engine.EffectParameterDeclaration).get_Current)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerable$b1.Of($asm01.Fusee.Engine.ShaderParamInfo).GetEnumerator)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerator$b1.Of($asm01.Fusee.Engine.ShaderParamInfo).get_Current)) ();
  };

  function ShaderEffect__ctor (effectPasses, effectParameters) {
    if (!((effectPasses !== null) && (effectPasses.length !== 0))) {
      throw $S00().Construct("effectPasses", "must not be null and must contain at least one pass");
    }
    var nPasses = effectPasses.length;
    this._states = JSIL.Array.New($T04(), nPasses);
    this._compiledShaders = JSIL.Array.New($T05(), nPasses);
    this._vertexShaderSrc = JSIL.Array.New($T06(), nPasses);
    this._pixelShaderSrc = JSIL.Array.New($T06(), nPasses);

    for (var i = 0; i < nPasses; i = ((i + 1) | 0)) {
      this._states[i] = effectPasses[i].StateSet;
      this._vertexShaderSrc[i] = effectPasses[i].VS;
      this._pixelShaderSrc[i] = effectPasses[i].PS;
    }
    this._paramDecl = $S01().Construct();
    if (effectParameters !== null) {
      var enumerator = $IM00().Call(effectParameters, null);
      try {

        while ($IM01().Call(enumerator, null)) {
          var param = $IM02().Call(enumerator, null).MemberwiseClone();
          this._paramDecl.Add(param.Name, param.Value);
        }
      } finally {
        if (enumerator !== null) {
          $IM03().Call(enumerator, null);
        }
      }
    }
  };

  function ShaderEffect_AttachToContext (rc, $exception) {
    var initValue = new JSIL.BoxedVariable(null);
    var paramExisting = new JSIL.BoxedVariable(null);
    if (rc === null) {
      throw $S00().Construct("rc", "must pass a valid render context.");
    }
    this._rc = rc;
    var i = 0;
    var nPasses = this._vertexShaderSrc.length;
    try {

      for (i = 0; i < nPasses; i = ((i + 1) | 0)) {
        this._compiledShaders[i] = this._rc.CreateShader(this._vertexShaderSrc[i], this._pixelShaderSrc[i]);
      }
    } catch ($exception) {
      throw $S02().Construct(JSIL.ConcatString("Error while compiling shader for pass ", i), $exception);
    }
    this._parameters = $S03().Construct();
    this._paramsPerPass = $S04().Construct();

    for (i = 0; i < nPasses; i = ((i + 1) | 0)) {
      var paramList = this._rc.GetShaderParamList(this._compiledShaders[i]);
      $S05().CallVirtual("Add", null, this._paramsPerPass, $S06().Construct());
      var enumerator = $IM04().Call(paramList, null);
      try {

        while ($IM01().Call(enumerator, null)) {
          var paramNew = $IM05().Call(enumerator, null).MemberwiseClone();
          if (this._paramDecl.TryGetValue(paramNew.Name, /* ref */ initValue)) {
            var initValType = JSIL.GetType(initValue.get());
            if (!((!(!$S07().CallStatic($T18(), "op_Equality", null, paramNew.Type, $T03().__Type__) && 
                    !$S07().CallStatic($T18(), "op_Equality", null, paramNew.Type, $T19().__Type__)) && 
                  ($S07().CallStatic($T18(), "op_Equality", null, initValType, $T03().__Type__) || 
                    $S07().CallStatic($T18(), "op_Equality", null, initValType, $T19().__Type__) || 
                    $S07().CallStatic($T18(), "op_Equality", null, initValType, $T1A().__Type__))) || $S08().CallVirtual("IsAssignableFrom", null, paramNew.Type, initValType))) {
              throw $S09().Construct(JSIL.ConcatString.apply(null, JSIL.Array.New($T0E(), ["Error preparing effect pass ", i, ". Shader parameter ", paramNew.Type.toString(), " ", paramNew.Name, " was defined as ", initValType.toString(), " ", paramNew.Name, " during initialization (different types)."])));
            }
            if (this._parameters.TryGetValue(paramNew.Name, /* ref */ paramExisting)) {
              if (!((paramExisting.get().Info.Size === paramNew.Size) && !$S0A().CallStatic($T18(), "op_Inequality", null, paramExisting.get().Info.Type, paramNew.Type))) {
                throw $S09().Construct(JSIL.ConcatString.apply(null, JSIL.Array.New($T0E(), ["Error preparing effect pass ", i, ". Shader parameter ", paramNew.Name, " already defined with a different type in effect pass ", paramExisting.get().ShaderInxs.get_Item(0)])));
              }
              $S0B().CallVirtual("Add", null, paramExisting.get().ShaderInxs, i);
            } else {
              paramExisting.set((new ($T0F())()).__Initialize__({
                    Info: paramNew.MemberwiseClone(), 
                    ShaderInxs: $S0C().Construct($T1D().$Cast(JSIL.Array.New($T03(), [i]))), 
                    Value: initValue.get()}
                ));
              this._parameters.Add(paramNew.Name, paramExisting.get());
            }
            $S0D().CallVirtual("Add", null, this._paramsPerPass.get_Item(i), paramExisting.get());
          }
        }
      } finally {
        if (enumerator !== null) {
          $IM03().Call(enumerator, null);
        }
      }
    }
  };

  function ShaderEffect_DetachFromContext () {
    this._parameters = null;
    this._paramsPerPass = null;
    this._paramDecl = null;
    this._compiledShaders = null;
    this._rc = null;
  };

  function ShaderEffect_GetEffectParam (name) {
    var param = new JSIL.BoxedVariable(null);
    if (this._parameters.TryGetValue(name, /* ref */ param)) {
      var result = param.get().Value;
    } else {
      result = null;
    }
    return result;
  };

  function ShaderEffect_RenderMesh (mesh, $exception) {
    var $temp00;
    var i = 0;
    var nPasses = this._vertexShaderSrc.length;
    try {

      for (i = 0; i < nPasses; i = ((i + 1) | 0)) {
        this._rc.SetShader(this._compiledShaders[i]);

        for (var a$0 = this._paramsPerPass.get_Item(i)._items, i$0 = 0, l$0 = this._paramsPerPass.get_Item(i)._size; i$0 < l$0; ($temp00 = i$0, 
            i$0 = ((i$0 + 1) | 0), 
            $temp00)) {
          var param = a$0[i$0];
          if ($S07().CallStatic($T18(), "op_Equality", null, param.Info.Type, $T03().__Type__)) {
            this._rc.SetShaderParamI(param.Info.Handle, $T03().$Cast(param.Value));
          } else if ($S07().CallStatic($T18(), "op_Equality", null, param.Info.Type, $T19().__Type__)) {
            this._rc.SetShaderParam1f(param.Info.Handle, $T19().$Cast(param.Value));
          } else if ($S07().CallStatic($T18(), "op_Equality", null, param.Info.Type, $T1F().__Type__)) {
            this._rc.SetShaderParam2f(param.Info.Handle, $T1F().$Cast(param.Value).MemberwiseClone());
          } else if ($S07().CallStatic($T18(), "op_Equality", null, param.Info.Type, $T20().__Type__)) {
            this._rc.SetShaderParam3f(param.Info.Handle, $T20().$Cast(param.Value).MemberwiseClone());
          } else if ($S07().CallStatic($T18(), "op_Equality", null, param.Info.Type, $T21().__Type__)) {
            this._rc.SetShaderParam4f(param.Info.Handle, $T21().$Cast(param.Value).MemberwiseClone());
          } else if ($S07().CallStatic($T18(), "op_Equality", null, param.Info.Type, $T22().__Type__)) {
            this._rc.SetShaderParamMtx4f(param.Info.Handle, $T22().$Cast(param.Value).MemberwiseClone());
          } else if ($S07().CallStatic($T18(), "op_Equality", null, param.Info.Type, $T23().__Type__)) {
            this._rc.SetShaderParamTexture(param.Info.Handle, $T23().$Cast(param.Value));
          }
        }
        this._rc.SetRenderState(this._states[i]);
        this._rc.Render(mesh);
      }
    } catch ($exception) {
      throw $S02().Construct(JSIL.ConcatString("Error while rendering pass ", i), $exception);
    }
  };

  function ShaderEffect_SetEffectParam (name, value) {
    var param = new JSIL.BoxedVariable(null);
    if (!((this._parameters === null) || !this._parameters.TryGetValue(name, /* ref */ param))) {
      param.get().Value = value;
    }
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.ShaderEffect", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm02.TypeRef("Fusee.Engine.EffectPassDeclaration")]), $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm02.TypeRef("Fusee.Engine.EffectParameterDeclaration")])], []), 
      ShaderEffect__ctor
    );

    $.Method({Static:false, Public:true }, "AttachToContext", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.RenderContext")], []), 
      ShaderEffect_AttachToContext
    );

    $.Method({Static:false, Public:true }, "DetachFromContext", 
      new JSIL.MethodSignature(null, [], []), 
      ShaderEffect_DetachFromContext
    );

    $.Method({Static:false, Public:true }, "GetEffectParam", 
      new JSIL.MethodSignature($.Object, [$.String], []), 
      ShaderEffect_GetEffectParam
    );

    $.Method({Static:false, Public:true }, "RenderMesh", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.Mesh")], []), 
      ShaderEffect_RenderMesh
    );

    $.Method({Static:false, Public:true }, "SetEffectParam", 
      new JSIL.MethodSignature(null, [$.String, $.Object], []), 
      ShaderEffect_SetEffectParam
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "_states", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("Fusee.Engine.RenderStateSet")])); 
    $.Field({Static:false, Public:false}, "_compiledShaders", $jsilcore.TypeRef("System.Array", [$asm02.TypeRef("Fusee.Engine.ShaderProgram")])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_vertexShaderSrc", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_pixelShaderSrc", $jsilcore.TypeRef("System.Array", [$.String])); 
    $.Field({Static:false, Public:false}, "_parameters", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm02.TypeRef("Fusee.Engine.EffectParam")])); 
    $.Field({Static:false, Public:false}, "_paramsPerPass", $asm07.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Collections.Generic.List`1", [$asm02.TypeRef("Fusee.Engine.EffectParam")])])); 
    $.Field({Static:false, Public:false}, "_paramDecl", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Object])); 
    $.Field({Static:false, Public:false}, "_rc", $asm02.TypeRef("Fusee.Engine.RenderContext")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Fusee.Engine.Stereo3DEye */ 

JSIL.MakeEnum(
  "Fusee.Engine.Stereo3DEye", true, {
    Left: 0, 
    Right: 1
  }, false
);

/* enum Fusee.Engine.Stereo3DMode */ 

JSIL.MakeEnum(
  "Fusee.Engine.Stereo3DMode", true, {
    Anaglyph: 0, 
    Oculus: 1
  }, false
);

/* class Fusee.Engine.Stereo3DParams */ 

(function Stereo3DParams$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("Fusee.Engine.Stereo3DParams", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:true , Public:false}, "EyeDistance", $.Single, 30); 
    $.Field({Static:true , Public:false}, "Convergence", $.Single, 0); 
    function Stereo3DParams__cctor () {
      $thisType.EyeDistance = +30;
      $thisType.Convergence = +0;
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      Stereo3DParams__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Stereo3D */ 

(function Stereo3D$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm02.Fusee.Engine.Stereo3DMode)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm02.Fusee.Engine.RenderContext)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm01.Fusee.Engine.ImageData)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm02.Fusee.Engine.ShaderProgram)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm02.Fusee.Engine.GUIImage)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm02.Fusee.Engine.GUIElement)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm04.Fusee.Math.float4)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm01.Fusee.Engine.ClearFlags)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm02.Fusee.Engine.Stereo3DEye)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm04.Fusee.Math.float3)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm02.Fusee.Engine.Stereo3DParams)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm04.Fusee.Math.float4x4)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm04.Fusee.Math.float2)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm01.Fusee.Engine.Rectangle)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm02.TypeRef("Fusee.Engine.GUIImage"), [
        $asm07.TypeRef("System.String"), $asm07.TypeRef("System.Int32"), 
        $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Int32"), 
        $asm07.TypeRef("System.Int32")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Math.float4"), [
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single"), 
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Math.float3"), [
        $asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single"), 
        $asm07.TypeRef("System.Single")
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm04.TypeRef("Fusee.Math.float2"), [$asm07.TypeRef("System.Single"), $asm07.TypeRef("System.Single")]))) ();
  };

  function Stereo3D__ctor (mode, width, height) {
    this._activeMode = mode;
    this._screenWidth = width;
    this._screenHeight = height;
  };

  function Stereo3D_AttachToContext (rc) {
    this._rc = rc;
    this._clearColor = rc.get_ClearColor().MemberwiseClone();
    var imgData = this._rc.CreateImage(this._screenWidth, this._screenHeight, "black").MemberwiseClone();
    this._contentLTex = this._rc.CreateTexture(imgData.MemberwiseClone());
    this._contentRTex = this._rc.CreateTexture(imgData.MemberwiseClone());
    switch (this._activeMode.valueOf()) {
      case 0: 
        this._shaderProgram = this._rc.CreateShader("\r\n            attribute vec3 fuVertex;\r\n            attribute vec2 fuUV;\r\n            attribute vec4 fuColor;\r\n\r\n            varying vec2 vUV;\r\n\r\n            void main()\r\n            {\r\n                vUV = fuUV;\r\n                gl_Position = vec4(fuVertex, 1);\r\n            }", "\r\n            #ifdef GL_ES\r\n                precision highp float;\r\n            #endif\r\n        \r\n            uniform sampler2D vTexture;\r\n            varying vec2 vUV;\r\n\r\n            void main()\r\n            {\r\n                vec4 colTex = texture2D(vTexture, vUV);\r\n                vec4 _redBalance = vec4(0.1, 0.65, 0.25, 0);\r\n                float _redColor = (colTex.r * _redBalance.r + colTex.g * _redBalance.g + colTex.b * _redBalance.b) * 1.5;\r\n                gl_FragColor = vec4(_redColor, colTex.g, colTex.b, 1) * 1.4; // * dot(vNormal, vec3(0, 0, -1))  lefthanded change???\r\n            }");
        this._shaderTexture = this._shaderProgram.GetShaderParam("vTexture");
        this._guiLImage = $S00().Construct(null, 0, 0, this._screenWidth, this._screenHeight);
        this._guiLImage.AttachToContext(rc);
        this._guiLImage.Refresh();
        break;

      case 1: 
        this._guiLImage = $S00().Construct(null, 0, 0, ((this._screenWidth / 2) | 0), this._screenHeight);
        this._guiLImage.AttachToContext(rc);
        this._guiLImage.Refresh();
        this._guiRImage = $S00().Construct(null, ((this._screenWidth / 2) | 0), 0, ((this._screenWidth / 2) | 0), this._screenHeight);
        this._guiRImage.AttachToContext(rc);
        this._guiRImage.Refresh();
        this._shaderProgram = this._rc.CreateShader("\r\n            attribute vec3 fuVertex;\r\n            attribute vec2 fuUV;\r\n            attribute vec4 fuColor;\r\n\r\n            varying vec2 vUV;\r\n\r\n            void main()\r\n            {\r\n                vUV = fuUV;\r\n                gl_Position = vec4(fuVertex, 1);\r\n            }", "\r\n            uniform sampler2D vTexture;\r\n\r\n            uniform vec2 LensCenter;\r\n            uniform vec2 ScreenCenter;\r\n            uniform vec2 Scale;\r\n            uniform vec2 ScaleIn;\r\n            uniform vec4 HmdWarpParam;\r\n\r\n            varying vec2 vUV;\r\n\r\n            vec2 HmdWarp(vec2 texIn)\r\n            {\r\n                vec2 theta = (texIn - LensCenter) * ScaleIn;\r\n                float rSq = theta.x * theta.x + theta.y * theta.y;\r\n                vec2 theta1 = theta * (HmdWarpParam.x + HmdWarpParam.y * rSq + HmdWarpParam.z * rSq * rSq + HmdWarpParam.w * rSq * rSq * rSq);\r\n                return LensCenter + Scale * theta1;\r\n            }\r\n\r\n            void main()\r\n            {\r\n                vec2 tc = HmdWarp(vUV.xy);\r\n\t            if (any(bvec2(clamp(tc,ScreenCenter-vec2(0.25,0.5), ScreenCenter+vec2(0.25,0.5)) - tc)))\r\n\t            {\r\n\t\t            gl_FragColor = vec4(0.2, 0.2, 0.2, 1.0);\r\n\t\t            return;\r\n\t            }\r\n\r\n\t            gl_FragColor = texture(vTexture, tc);\r\n            }");
        this._shaderTexture = this._shaderProgram.GetShaderParam("vTexture");
        this._lensCenterParam = this._shaderProgram.GetShaderParam("LensCenter");
        this._screenCenterParam = this._shaderProgram.GetShaderParam("ScreenCenter");
        this._scaleParam = this._shaderProgram.GetShaderParam("Scale");
        this._scaleInParam = this._shaderProgram.GetShaderParam("ScaleIn");
        this._hdmWarpParam = this._shaderProgram.GetShaderParam("HmdWarpParam");
        break;

    }
  };

  function Stereo3D_Display () {
    (this._rc.ClearColor = $S01().Construct(0, 0, 0, 0));
    this._rc.Clear($T08().$Flags("Color", "Depth"));
    var currShader = this._rc.get_CurrentShader();
    switch (this._activeMode.valueOf()) {
      case 0: 
        this._rc.SetShader(this._shaderProgram);
        this.RenderColorMaskedEye(
          $T09().Left, 
          true, 
          false, 
          false, 
          false
        );
        this._rc.Clear($T08().Depth);
        this.RenderColorMaskedEye(
          $T09().Right, 
          false, 
          true, 
          true, 
          false
        );
        this._rc.ColorMask(true, true, true, false);
        break;

      case 1: 
        this._rc.SetShader(this._shaderProgram);
        this.RenderDistortedEye($T09().Left);
        this.RenderDistortedEye($T09().Right);
        break;

    }
    this._rc.SetShader(currShader);
  };

  function Stereo3D_get_CurrentEye () {
    return this._currentEye;
  };

  function Stereo3D_LookAt3D (eye, eyeV, target, up) {
    var x = +((eye.valueOf() === 0) ? (eyeV.x - $T0C().EyeDistance) : (eyeV.x + $T0C().EyeDistance));
    var newEye = $S02().Construct(x, eyeV.y, eyeV.z);
    var newTarget = $S02().Construct(target.x, target.y, target.z);
    return $T0D().LookAt(newEye.MemberwiseClone(), newTarget.MemberwiseClone(), up);
  };

  function Stereo3D_Prepare (eye) {
    this._currentEye = eye;
    if (this._activeMode === $T00().Oculus) {
      this._currentEye = eye;
      switch (eye.valueOf()) {
        case 0: 
          this._rc.Viewport(0, 100, ((this._screenWidth / 2) | 0), ((this._screenHeight - 100) | 0));
          break;

        case 1: 
          this._rc.Viewport(((this._screenWidth / 2) | 0), 100, ((this._screenWidth / 2) | 0), ((this._screenHeight - 100) | 0));
          break;

      }
    }
    (this._rc.ClearColor = this._clearColor.MemberwiseClone());
    this._rc.Clear($T08().$Flags("Color", "Depth"));
  };

  function Stereo3D_RenderColorMaskedEye (eye, red, green, blue, alpha) {
    this._rc.SetShaderParamTexture(this._shaderTexture, ((eye.valueOf() === 0) ? this._contentLTex : this._contentRTex));
    this._rc.ColorMask(red, green, blue, alpha);
    this._rc.Render(this._guiLImage.GUIElement$GUIMesh$value);
  };

  function Stereo3D_RenderDistortedEye (eye) {
    var lensCenter = new ($T0F())(), screenCenter = new ($T0F())();
    var scale = $S03().Construct(0.1469278, 0.2350845);
    var scaleIn = $S03().Construct(2, 2.5);
    var hdmWarp = $S01().Construct(1, 0.22, 0.24, 0);
    if (eye === $T09().Left) {
      this._rc.SetShaderParamTexture(this._shaderTexture, this._contentLTex);
      $T0F().prototype._ctor.call(lensCenter, 0.3125, 0.5);
      $T0F().prototype._ctor.call(screenCenter, 0.25, 0.5);
    } else {
      this._rc.SetShaderParamTexture(this._shaderTexture, this._contentRTex);
      $T0F().prototype._ctor.call(lensCenter, 0.6875, 0.5);
      $T0F().prototype._ctor.call(screenCenter, 0.75, 0.5);
    }
    this._rc.SetShaderParam2f(this._lensCenterParam, lensCenter.MemberwiseClone());
    this._rc.SetShaderParam2f(this._screenCenterParam, screenCenter.MemberwiseClone());
    this._rc.SetShaderParam2f(this._scaleParam, scale.MemberwiseClone());
    this._rc.SetShaderParam2f(this._scaleInParam, scaleIn.MemberwiseClone());
    this._rc.SetShaderParam4f(this._hdmWarpParam, hdmWarp.MemberwiseClone());
    this._rc.Render(((eye.valueOf() === 0) ? this._guiLImage.GUIElement$GUIMesh$value : this._guiRImage.GUIElement$GUIMesh$value));
  };

  function Stereo3D_Save () {
    switch (this._activeMode.valueOf()) {
      case 0: 
        this._rc.GetBufferContent(new ($T10())(0, 0, this._screenWidth, this._screenHeight), ((this._currentEye.valueOf() === 0) ? this._contentLTex : this._contentRTex));
        break;

      case 1: 
        switch (this._currentEye.valueOf()) {
          case 0: 
            this._rc.GetBufferContent(new ($T10())(-81, 0, ((this._screenWidth - 81) | 0), this._screenHeight), this._contentLTex);
            break;

          case 1: 
            this._rc.GetBufferContent(new ($T10())(81, 0, ((this._screenWidth + 81) | 0), this._screenHeight), this._contentRTex);
            break;

        }
        this._rc.Viewport(0, 0, this._screenWidth, this._screenHeight);
        break;

    }
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Stereo3D", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("Fusee.Engine.Stereo3DMode"), $.Int32, 
          $.Int32
        ], []), 
      Stereo3D__ctor
    );

    $.Method({Static:false, Public:true }, "AttachToContext", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.RenderContext")], []), 
      Stereo3D_AttachToContext
    );

    $.Method({Static:false, Public:true }, "Display", 
      new JSIL.MethodSignature(null, [], []), 
      Stereo3D_Display
    );

    $.Method({Static:false, Public:true }, "get_CurrentEye", 
      new JSIL.MethodSignature($asm02.TypeRef("Fusee.Engine.Stereo3DEye"), [], []), 
      Stereo3D_get_CurrentEye
    );

    $.Method({Static:false, Public:true }, "LookAt3D", 
      new JSIL.MethodSignature($asm04.TypeRef("Fusee.Math.float4x4"), [
          $asm02.TypeRef("Fusee.Engine.Stereo3DEye"), $asm04.TypeRef("Fusee.Math.float3"), 
          $asm04.TypeRef("Fusee.Math.float3"), $asm04.TypeRef("Fusee.Math.float3")
        ], []), 
      Stereo3D_LookAt3D
    );

    $.Method({Static:false, Public:true }, "Prepare", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.Stereo3DEye")], []), 
      Stereo3D_Prepare
    );

    $.Method({Static:false, Public:false}, "RenderColorMaskedEye", 
      new JSIL.MethodSignature(null, [
          $asm02.TypeRef("Fusee.Engine.Stereo3DEye"), $.Boolean, 
          $.Boolean, $.Boolean, 
          $.Boolean
        ], []), 
      Stereo3D_RenderColorMaskedEye
    );

    $.Method({Static:false, Public:false}, "RenderDistortedEye", 
      new JSIL.MethodSignature(null, [$asm02.TypeRef("Fusee.Engine.Stereo3DEye")], []), 
      Stereo3D_RenderDistortedEye
    );

    $.Method({Static:false, Public:true }, "Save", 
      new JSIL.MethodSignature(null, [], []), 
      Stereo3D_Save
    );

    $.Constant({Static:true , Public:false}, "K0", 1); 
    $.Constant({Static:true , Public:false}, "K1", 0.22); 
    $.Constant({Static:true , Public:false}, "K2", 0.24); 
    $.Constant({Static:true , Public:false}, "K3", 0); 
    $.Constant({Static:true , Public:false}, "OculusVs", "\r\n            attribute vec3 fuVertex;\r\n            attribute vec2 fuUV;\r\n            attribute vec4 fuColor;\r\n\r\n            varying vec2 vUV;\r\n\r\n            void main()\r\n            {\r\n                vUV = fuUV;\r\n                gl_Position = vec4(fuVertex, 1);\r\n            }"); 
    $.Constant({Static:true , Public:false}, "OculusPs", "\r\n            uniform sampler2D vTexture;\r\n\r\n            uniform vec2 LensCenter;\r\n            uniform vec2 ScreenCenter;\r\n            uniform vec2 Scale;\r\n            uniform vec2 ScaleIn;\r\n            uniform vec4 HmdWarpParam;\r\n\r\n            varying vec2 vUV;\r\n\r\n            vec2 HmdWarp(vec2 texIn)\r\n            {\r\n                vec2 theta = (texIn - LensCenter) * ScaleIn;\r\n                float rSq = theta.x * theta.x + theta.y * theta.y;\r\n                vec2 theta1 = theta * (HmdWarpParam.x + HmdWarpParam.y * rSq + HmdWarpParam.z * rSq * rSq + HmdWarpParam.w * rSq * rSq * rSq);\r\n                return LensCenter + Scale * theta1;\r\n            }\r\n\r\n            void main()\r\n            {\r\n                vec2 tc = HmdWarp(vUV.xy);\r\n\t            if (any(bvec2(clamp(tc,ScreenCenter-vec2(0.25,0.5), ScreenCenter+vec2(0.25,0.5)) - tc)))\r\n\t            {\r\n\t\t            gl_FragColor = vec4(0.2, 0.2, 0.2, 1.0);\r\n\t\t            return;\r\n\t            }\r\n\r\n\t            gl_FragColor = texture(vTexture, tc);\r\n            }"); 
    $.Constant({Static:true , Public:false}, "AnaglyphVs", "\r\n            attribute vec3 fuVertex;\r\n            attribute vec2 fuUV;\r\n            attribute vec4 fuColor;\r\n\r\n            varying vec2 vUV;\r\n\r\n            void main()\r\n            {\r\n                vUV = fuUV;\r\n                gl_Position = vec4(fuVertex, 1);\r\n            }"); 
    $.Constant({Static:true , Public:false}, "AnaglyphPs", "\r\n            #ifdef GL_ES\r\n                precision highp float;\r\n            #endif\r\n        \r\n            uniform sampler2D vTexture;\r\n            varying vec2 vUV;\r\n\r\n            void main()\r\n            {\r\n                vec4 colTex = texture2D(vTexture, vUV);\r\n                vec4 _redBalance = vec4(0.1, 0.65, 0.25, 0);\r\n                float _redColor = (colTex.r * _redBalance.r + colTex.g * _redBalance.g + colTex.b * _redBalance.b) * 1.5;\r\n                gl_FragColor = vec4(_redColor, colTex.g, colTex.b, 1) * 1.4; // * dot(vNormal, vec3(0, 0, -1))  lefthanded change???\r\n            }"); 
    $.Field({Static:false, Public:false}, "_rc", $asm02.TypeRef("Fusee.Engine.RenderContext")); 
    $.Field({Static:false, Public:false}, "_clearColor", $asm04.TypeRef("Fusee.Math.float4")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_activeMode", $asm02.TypeRef("Fusee.Engine.Stereo3DMode")); 
    $.Field({Static:false, Public:false}, "_currentEye", $asm02.TypeRef("Fusee.Engine.Stereo3DEye")); 
    $.Field({Static:false, Public:false}, "_guiLImage", $asm02.TypeRef("Fusee.Engine.GUIImage")); 
    $.Field({Static:false, Public:false}, "_guiRImage", $asm02.TypeRef("Fusee.Engine.GUIImage")); 
    $.Field({Static:false, Public:false}, "_shaderProgram", $asm02.TypeRef("Fusee.Engine.ShaderProgram")); 
    $.Field({Static:false, Public:false}, "_shaderTexture", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_screenWidth", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "_screenHeight", $.Int32); 
    $.Field({Static:false, Public:false}, "_contentLTex", $asm01.TypeRef("Fusee.Engine.ITexture")); 
    $.Field({Static:false, Public:false}, "_contentRTex", $asm01.TypeRef("Fusee.Engine.ITexture")); 
    $.Field({Static:false, Public:false}, "_lensCenterParam", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:false}, "_screenCenterParam", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:false}, "_scaleParam", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:false}, "_scaleInParam", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Field({Static:false, Public:false}, "_hdmWarpParam", $asm01.TypeRef("Fusee.Engine.IShaderParam")); 
    $.Property({Static:false, Public:true }, "CurrentEye", $asm02.TypeRef("Fusee.Engine.Stereo3DEye"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Fusee.Engine.Time */ 

(function Time$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Double)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Int64)) ();
  };

  function Time__ctor () {
    this._timeFlow = +1;
  };

  function Time_get_DeltaTime () {
    return +this._deltaTime;
  };

  function Time_get_FramePerSecond () {
    return +this._unsmoothedFps;
  };

  function Time_get_FramePerSecondSmooth () {
    return this._framePerSecondSmooth;
  };

  function Time_get_Frames () {
    return this._frameCount;
  };

  function Time_get_Instance () {
    if ($thisType._instance === null) {
      $thisType._instance = new $thisType();
    }
    return $thisType._instance;
  };

  function Time_get_RealDeltaTime () {
    return +this._realDeltaTime;
  };

  function Time_get_RealTimeSinceStart () {
    return +this._realTime;
  };

  function Time_get_TimeFlow () {
    return +this._timeFlow;
  };

  function Time_get_TimeSinceStart () {
    return +this._time;
  };

  function Time_set_DeltaTimeIncrement (value) {
    this._deltaTime = +value;
    this._realDeltaTime = +this._deltaTime;
    this._unsmoothedFps = +$T01().$Cast((1 / this._deltaTime));
    this._timeSecond += +$T01().$Cast(value);
    this._framePerSecond = ((this._framePerSecond + 1) | 0);
    this._realTime += +this._deltaTime;
    this._frameCount = $T02().op_Addition(this._frameCount, $T02().Create(1, 0, 0));
    this._deltaTime *= +this._timeFlow;
    this._time += +this._deltaTime;
    if (this._timeSecond >= 1) {
      this._framePerSecondSmooth = this._framePerSecond;
      this._framePerSecond = 0;
      this._timeSecond = +0;
    }
  };

  function Time_set_TimeFlow (value) {
    this._timeFlow = +value;
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "Fusee.Engine.Time", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      Time__ctor
    );

    $.Method({Static:false, Public:true }, "get_DeltaTime", 
      new JSIL.MethodSignature($.Double, [], []), 
      Time_get_DeltaTime
    );

    $.Method({Static:false, Public:true }, "get_FramePerSecond", 
      new JSIL.MethodSignature($.Single, [], []), 
      Time_get_FramePerSecond
    );

    $.Method({Static:false, Public:true }, "get_FramePerSecondSmooth", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Time_get_FramePerSecondSmooth
    );

    $.Method({Static:false, Public:true }, "get_Frames", 
      new JSIL.MethodSignature($.Int64, [], []), 
      Time_get_Frames
    );

    $.Method({Static:true , Public:true }, "get_Instance", 
      new JSIL.MethodSignature($.Type, [], []), 
      Time_get_Instance
    );

    $.Method({Static:false, Public:true }, "get_RealDeltaTime", 
      new JSIL.MethodSignature($.Double, [], []), 
      Time_get_RealDeltaTime
    );

    $.Method({Static:false, Public:true }, "get_RealTimeSinceStart", 
      new JSIL.MethodSignature($.Double, [], []), 
      Time_get_RealTimeSinceStart
    );

    $.Method({Static:false, Public:true }, "get_TimeFlow", 
      new JSIL.MethodSignature($.Single, [], []), 
      Time_get_TimeFlow
    );

    $.Method({Static:false, Public:true }, "get_TimeSinceStart", 
      new JSIL.MethodSignature($.Double, [], []), 
      Time_get_TimeSinceStart
    );

    $.Method({Static:false, Public:false}, "set_DeltaTimeIncrement", 
      new JSIL.MethodSignature(null, [$.Double], []), 
      Time_set_DeltaTimeIncrement
    );

    $.Method({Static:false, Public:true }, "set_TimeFlow", 
      new JSIL.MethodSignature(null, [$.Single], []), 
      Time_set_TimeFlow
    );

    $.Field({Static:true , Public:false}, "_instance", $.Type); 
    $.Field({Static:false, Public:false}, "_deltaTime", $.Double); 
    $.Field({Static:false, Public:false}, "_time", $.Double); 
    $.Field({Static:false, Public:false}, "_timeFlow", $.Single); 
    $.Field({Static:false, Public:false}, "_frameCount", $.Int64); 
    $.Field({Static:false, Public:false}, "_realTime", $.Double); 
    $.Field({Static:false, Public:false}, "_framePerSecondSmooth", $.Int32); 
    $.Field({Static:false, Public:false}, "_timeSecond", $.Single); 
    $.Field({Static:false, Public:false}, "_framePerSecond", $.Int32); 
    $.Field({Static:false, Public:false}, "_unsmoothedFps", $.Single); 
    $.Field({Static:false, Public:false}, "_realDeltaTime", $.Double); 
    $.Property({Static:false, Public:false}, "DeltaTimeIncrement", $.Double);

    $.Property({Static:false, Public:true }, "FramePerSecondSmooth", $.Int32);

    $.Property({Static:false, Public:true }, "RealTimeSinceStart", $.Double);

    $.Property({Static:false, Public:true }, "FramePerSecond", $.Single);

    $.Property({Static:false, Public:true }, "Frames", $.Int64);

    $.Property({Static:false, Public:true }, "DeltaTime", $.Double);

    $.Property({Static:false, Public:true }, "RealDeltaTime", $.Double);

    $.Property({Static:false, Public:true }, "TimeSinceStart", $.Double);

    $.Property({Static:false, Public:true }, "TimeFlow", $.Single);

    $.Property({Static:true , Public:true }, "Instance", $.Type);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

