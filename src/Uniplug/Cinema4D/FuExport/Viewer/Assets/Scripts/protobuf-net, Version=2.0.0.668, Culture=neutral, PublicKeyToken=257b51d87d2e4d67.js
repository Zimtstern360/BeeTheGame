/* Generated by JSIL v0.7.8 build 970. See http://jsil.org/ for more information. */ 
var $asm08 = JSIL.DeclareAssembly("protobuf-net, Version=2.0.0.668, Culture=neutral, PublicKeyToken=257b51d87d2e4d67");

JSIL.DeclareNamespace("ProtoBuf");
JSIL.DeclareNamespace("ProtoBuf.Meta");
/* class ProtoBuf.Meta.TypeFormatEventArgs */ 

(function TypeFormatEventArgs$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.EventArgs)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Void)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentNullException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")], []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.InvalidOperationException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")], []))) ();
  };

  function TypeFormatEventArgs__ctor$00 (formattedName) {
    $T01().prototype._ctor.call(this);
    if ($T02().IsNullOrEmpty(formattedName)) {
      throw $S00().Construct("formattedName");
    }
    this.formattedName = formattedName;
  };

  function TypeFormatEventArgs__ctor$01 (type) {
    $T01().prototype._ctor.call(this);
    if ($S01().CallStatic($T04(), "op_Equality", null, type, null)) {
      throw $S00().Construct("type");
    }
    this.type = type;
    this.typeFixed = true;
  };

  function TypeFormatEventArgs_get_FormattedName () {
    return this.formattedName;
  };

  function TypeFormatEventArgs_get_Type () {
    return this.type;
  };

  function TypeFormatEventArgs_set_FormattedName (value) {
    if (this.formattedName != value) {
      if (!this.typeFixed) {
        throw $S02().Construct("The formatted-name is fixed and cannot be changed");
      }
      this.formattedName = value;
    }
  };

  function TypeFormatEventArgs_set_Type (value) {
    if ($S03().CallStatic($T04(), "op_Inequality", null, this.type, value)) {
      if (this.typeFixed) {
        throw $S02().Construct("The type is fixed and cannot be changed");
      }
      this.type = value;
    }
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.EventArgs"), 
      Name: "ProtoBuf.Meta.TypeFormatEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], []), 
      TypeFormatEventArgs__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type")], []), 
      TypeFormatEventArgs__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_FormattedName", 
      new JSIL.MethodSignature($.String, [], []), 
      TypeFormatEventArgs_get_FormattedName
    );

    $.Method({Static:false, Public:true }, "get_Type", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [], []), 
      TypeFormatEventArgs_get_Type
    );

    $.Method({Static:false, Public:true }, "set_FormattedName", 
      new JSIL.MethodSignature(null, [$.String], []), 
      TypeFormatEventArgs_set_FormattedName
    );

    $.Method({Static:false, Public:true }, "set_Type", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type")], []), 
      TypeFormatEventArgs_set_Type
    );

    $.Field({Static:false, Public:false}, "type", $asm07.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "formattedName", $.String); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "typeFixed", $.Boolean); 
    $.Property({Static:false, Public:true }, "Type", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "FormattedName", $.String);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate ProtoBuf.Meta.TypeFormatEventHandler */ 

JSIL.MakeDelegate("ProtoBuf.Meta.TypeFormatEventHandler", true, []);

JSIL.DeclareNamespace("ProtoBuf.ServiceModel");
/* class ProtoBuf.ServiceModel.XmlProtoSerializer */ 

(function XmlProtoSerializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0E.System.Runtime.Serialization.XmlObjectSerializer)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Void)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm0E.System.Xml.XmlDictionaryReader)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0D.System.Xml.XmlReader)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0D.System.Xml.XmlNodeType)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.IO.Stream)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm07.System.IO.MemoryStream)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm0E.System.Xml.XmlDictionaryWriter)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm0D.System.Xml.XmlWriter)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize(System.Array.Of($asm07.System.Byte))) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentNullException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")], []))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")], []))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.String"), [$asm07.TypeRef("System.String")], []))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Object"), [
        $asm07.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Object"), 
        $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.SerializationContext")
      ], []))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Object"), [
        $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Object"), 
        $asm08.TypeRef("ProtoBuf.ProtoReader")
      ], []))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.IO.MemoryStream"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Byte")])]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.TypeRef("ProtoBuf.ServiceModel.XmlProtoSerializer"), [
        $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Int32"), 
        $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Boolean")
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.IO.MemoryStream"), []))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Object"), 
        $asm08.TypeRef("ProtoBuf.SerializationContext")
      ], []))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Object"), 
        $asm08.TypeRef("ProtoBuf.ProtoWriter")
      ], []))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };

  function XmlProtoSerializer__ctor$00 (model, key, type, isList) {
    $T04().prototype._ctor.call(this);
    if (model === null) {
      throw $S00().Construct("model");
    }
    if (key < 0) {
      throw $S01().Construct("key");
    }
    if ($S02().CallStatic($T02(), "op_Equality", null, type, null)) {
      throw $S01().Construct("type");
    }
    this.model = model;
    this.key = key;
    this.isList = isList;
    this.type = type;
    this.isEnum = $T07().IsEnum(type);
  };

  function XmlProtoSerializer__ctor$01 (model, $type) {
    var type = new JSIL.BoxedVariable($type);
    $T04().prototype._ctor.call(this);
    if (model === null) {
      throw $S00().Construct("model");
    }
    if ($S02().CallStatic($T02(), "op_Equality", null, type.get(), null)) {
      throw $S00().Construct("type");
    }
    this.key = $thisType.GetKey(model, /* ref */ type, /* ref */ new JSIL.MemberReference(this, "isList"));
    this.model = model;
    this.type = type.get();
    this.isEnum = $T07().IsEnum(type.get());
    if (this.key < 0) {
      throw $S03().Construct("type", JSIL.ConcatString("Type not recognised by the model: ", type.get().get_FullName()));
    }
  };

  function XmlProtoSerializer_GetKey (model, /* ref */ type, /* ref */ isList) {
    var listItemType = new JSIL.BoxedVariable(null);
    if (!((model === null) || !$S04().CallStatic($T02(), "op_Inequality", null, type.get(), null))) {
      var num = model.GetKey(/* ref */ type);
      if (num >= 0) {
        isList.set(false);
        return num;
      }
      listItemType.set($T00().GetListItemType(model, type.get()));
      if ($S04().CallStatic($T02(), "op_Inequality", null, listItemType.get(), null)) {
        num = model.GetKey(/* ref */ listItemType);
        if (num >= 0) {
          isList.set(true);
          return num;
        }
      }
    }
    isList.set(false);
    return -1;
  };

  function XmlProtoSerializer_IsStartObject (reader) {
    if (reader === null) {
      throw $S00().Construct("reader");
    }
    reader.MoveToContent();
    return ((reader.get_NodeType() === $T0C().Element) && (reader.get_Name() == "proto"));
  };

  function XmlProtoSerializer_ReadObject (reader, verifyObjectName) {
    if (reader === null) {
      throw $S00().Construct("reader");
    }
    reader.MoveToContent();
    var isEmptyElement = reader.get_IsEmptyElement();
    var flag = ($S05().CallVirtual("GetAttribute", null, reader, "nil") == "true");
    reader.ReadStartElement("proto");
    if (flag) {
      if (!isEmptyElement) {
        reader.ReadEndElement();
      }
      return null;
    }
    if (isEmptyElement) {
      if (!(!this.isList && !this.isEnum)) {
        return $S06().CallVirtual("Deserialize", null, this.model, $T0D().Null, null, this.type, null);
      }
      var protoReader = null;
      try {
        protoReader = $T0E().Create($T0D().Null, this.model, null, -1);
        return $S07().CallVirtual("Deserialize", null, this.model, this.key, null, protoReader);
      } finally {
        $T0E().Recycle(protoReader);
      }
    }
    var memoryStream = $S08().Construct(reader.ReadContentAsBase64());
    try {
      if (!(!this.isList && !this.isEnum)) {
        var result = $S06().CallVirtual("Deserialize", null, this.model, memoryStream, null, this.type, null);
      } else {
        var protoReader2 = null;
        try {
          protoReader2 = $T0E().Create(memoryStream, this.model, null, -1);
          result = $S07().CallVirtual("Deserialize", null, this.model, this.key, null, protoReader2);
        } finally {
          $T0E().Recycle(protoReader2);
        }
      }
    } finally {
      if (memoryStream !== null) {
        $IM00().Call(memoryStream, null);
      }
    }
    reader.ReadEndElement();
    return result;
  };

  function XmlProtoSerializer_TryCreate (model, $type) {
    var type = new JSIL.BoxedVariable($type);
    var flag = new JSIL.BoxedVariable(false);
    if (model === null) {
      throw $S00().Construct("model");
    }
    if ($S02().CallStatic($T02(), "op_Equality", null, type.get(), null)) {
      throw $S00().Construct("type");
    }
    var num = $thisType.GetKey(model, /* ref */ type, /* ref */ flag);
    if (num >= 0) {
      return $S09().Construct(model, num, type.get(), flag.get());
    }
    return null;
  };

  function XmlProtoSerializer_WriteEndObject (writer) {
    if (writer === null) {
      throw $S00().Construct("writer");
    }
    writer.WriteEndElement();
  };

  function XmlProtoSerializer_WriteObjectContent (writer, graph) {
    if (writer === null) {
      throw $S00().Construct("writer");
    }
    if (graph === null) {
      writer.WriteAttributeString("nil", "true");
      return;
    }
    var memoryStream = $S0A().Construct();
    try {
      if (this.isList) {
        $S0B().CallVirtual("Serialize", null, this.model, memoryStream, graph, null);
      } else {
        var protoWriter = new ($T14())(memoryStream, this.model, null);
        try {
          $S0C().CallVirtual("Serialize", null, this.model, this.key, graph, protoWriter);
        } finally {
          if (protoWriter !== null) {
            $IM00().Call(protoWriter, null);
          }
        }
      }
      var buffer = memoryStream.GetBuffer();
      writer.WriteBase64(buffer, 0, memoryStream.get_Length().ToNumber(4294967295, true));
    } finally {
      if (memoryStream !== null) {
        $IM00().Call(memoryStream, null);
      }
    }
  };

  function XmlProtoSerializer_WriteStartObject (writer, graph) {
    if (writer === null) {
      throw $S00().Construct("writer");
    }
    writer.WriteStartElement("proto");
  };

  JSIL.MakeType({
      BaseType: $asm0E.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), 
      Name: "ProtoBuf.ServiceModel.XmlProtoSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $.Int32, 
          $asm07.TypeRef("System.Type"), $.Boolean
        ], []), 
      XmlProtoSerializer__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type")], []), 
      XmlProtoSerializer__ctor$01
    );

    $.Method({Static:true , Public:false}, "GetKey", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], []), 
      XmlProtoSerializer_GetKey
    );

    $.Method({Static:false, Public:true , Virtual:true }, "IsStartObject", 
      new JSIL.MethodSignature($.Boolean, [$asm0E.TypeRef("System.Xml.XmlDictionaryReader")], []), 
      XmlProtoSerializer_IsStartObject
    );

    $.Method({Static:false, Public:true , Virtual:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [$asm0E.TypeRef("System.Xml.XmlDictionaryReader"), $.Boolean], []), 
      XmlProtoSerializer_ReadObject
    );

    $.Method({Static:true , Public:true }, "TryCreate", 
      new JSIL.MethodSignature($.Type, [$asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type")], []), 
      XmlProtoSerializer_TryCreate
    );

    $.Method({Static:false, Public:true , Virtual:true }, "WriteEndObject", 
      new JSIL.MethodSignature(null, [$asm0E.TypeRef("System.Xml.XmlDictionaryWriter")], []), 
      XmlProtoSerializer_WriteEndObject
    );

    $.Method({Static:false, Public:true , Virtual:true }, "WriteObjectContent", 
      new JSIL.MethodSignature(null, [$asm0E.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object], []), 
      XmlProtoSerializer_WriteObjectContent
    );

    $.Method({Static:false, Public:true , Virtual:true }, "WriteStartObject", 
      new JSIL.MethodSignature(null, [$asm0E.TypeRef("System.Xml.XmlDictionaryWriter"), $.Object], []), 
      XmlProtoSerializer_WriteStartObject
    );

    $.Constant({Static:true , Public:false}, "PROTO_ELEMENT", "proto"); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "key", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "isList", $.Boolean); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "isEnum", $.Boolean); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm07.TypeRef("System.Type")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.NetObjectCache */ 

(function NetObjectCache$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Collections.Generic.Dictionary$b2.Of($asm07.System.Object, $asm07.System.Int32))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.NetObjectCache_ReferenceComparer)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Collections.Generic.Dictionary$b2.Of($asm07.System.String, $asm07.System.Int32))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.Meta.MutableList)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.ProtoException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentNullException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Object"), $asm07.TypeRef("System.Int32")]), [$asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm07.TypeRef("System.Object")])]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Int32")]), []))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.TypeRef("ProtoBuf.ProtoException"), [$asm07.TypeRef("System.String")]))) ();
  };

  function NetObjectCache__ctor () {
  };

  function NetObjectCache_AddObjectKey (value, /* ref */ existing) {
    if (value === null) {
      throw $S00().Construct("value");
    }
    if (value === this.rootObject) {
      existing.set(true);
      return 0;
    }
    var text = $T03().$As(value);
    var list = this.get_List();
    var num = new JSIL.BoxedVariable(0);
    if (text === null) {
      if (this.objectKeys === null) {
        this.objectKeys = $S01().Construct($T07().Default);
        num.set(-1);
      } else if (!this.objectKeys.TryGetValue(value, /* ref */ num)) {
        num.set(-1);
      }
    } else if (this.stringKeys === null) {
      this.stringKeys = $S02().Construct();
      num.set(-1);
    } else if (!this.stringKeys.TryGetValue(text, /* ref */ num)) {
      num.set(-1);
    }
    if (!existing.set((num.get() >= 0))) {
      num.set(list.Add(value));
      if (text === null) {
        this.objectKeys.Add(value, num.get());
      } else {
        this.stringKeys.Add(text, num.get());
      }
    }
    return ((num.get() + 1) | 0);
  };

  function NetObjectCache_Clear () {
    this.trapStartIndex = 0;
    this.rootObject = null;
    if (this.underlyingList !== null) {
      this.underlyingList.Clear();
    }
    if (this.stringKeys !== null) {
      this.stringKeys.Clear();
    }
    if (this.objectKeys !== null) {
      this.objectKeys.Clear();
    }
  };

  function NetObjectCache_get_List () {
    if (this.underlyingList === null) {
      this.underlyingList = new ($T09())();
    }
    return this.underlyingList;
  };

  function NetObjectCache_GetKeyedObject (key) {
    var $temp00;
    if (($temp00 = key, 
        key = ((key - 1) | 0), 
        $temp00) === 0) {
      if (this.rootObject === null) {
        throw $S03().Construct("No root object assigned");
      }
      return this.rootObject;
    } else {
      var list = this.get_List();
      if (!((key >= 0) && (key < list.get_Count()))) {
        throw $S03().Construct("Internal error; a missing key occurred");
      }
      var obj = list.get_Item(key);
      if (obj === null) {
        throw $S03().Construct("A deferred key does not have a value yet");
      }
      return obj;
    }
  };

  function NetObjectCache_RegisterTrappedObject (value) {
    if (this.rootObject === null) {
      this.rootObject = value;
      return;
    }
    if (this.underlyingList !== null) {

      for (var i = this.trapStartIndex; i < this.underlyingList.get_Count(); i = ((i + 1) | 0)) {
        this.trapStartIndex = ((i + 1) | 0);
        if (this.underlyingList.get_Item(i) === null) {
          this.underlyingList.set_Item(i, value);
          return;
        }
      }
    }
  };

  function NetObjectCache_SetKeyedObject (key, value) {
    var $temp00;
    if (($temp00 = key, 
        key = ((key - 1) | 0), 
        $temp00) !== 0) {
      var list = this.get_List();
      if (key < list.get_Count()) {
        var obj = list.get_Item(key);
        if (obj === null) {
          list.set_Item(key, value);
          return;
        }
        if (obj !== value) {
          throw $S03().Construct("Reference-tracked objects cannot change reference");
        }
      } else if (key !== list.Add(value)) {
        throw $S03().Construct("Internal error; a key mismatch occurred");
      }
      return;
    }
    if (value === null) {
      throw $S00().Construct("value");
    }
    if (!((this.rootObject === null) || (this.rootObject === value))) {
      throw $S03().Construct("The root object cannot be reassigned");
    }
    this.rootObject = value;
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.NetObjectCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      NetObjectCache__ctor
    );

    $.Method({Static:false, Public:false}, "AddObjectKey", 
      new JSIL.MethodSignature($.Int32, [$.Object, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])], []), 
      NetObjectCache_AddObjectKey
    );

    $.Method({Static:false, Public:false}, "Clear", 
      new JSIL.MethodSignature(null, [], []), 
      NetObjectCache_Clear
    );

    $.Method({Static:false, Public:false}, "get_List", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Meta.MutableList"), [], []), 
      NetObjectCache_get_List
    );

    $.Method({Static:false, Public:false}, "GetKeyedObject", 
      new JSIL.MethodSignature($.Object, [$.Int32], []), 
      NetObjectCache_GetKeyedObject
    );

    $.Method({Static:false, Public:false}, "RegisterTrappedObject", 
      new JSIL.MethodSignature(null, [$.Object], []), 
      NetObjectCache_RegisterTrappedObject
    );

    $.Method({Static:false, Public:false}, "SetKeyedObject", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object], []), 
      NetObjectCache_SetKeyedObject
    );

    $.Constant({Static:true , Public:false}, "Root", 0); 
    $.Field({Static:false, Public:false}, "underlyingList", $asm08.TypeRef("ProtoBuf.Meta.MutableList")); 
    $.Field({Static:false, Public:false}, "rootObject", $.Object); 
    $.Field({Static:false, Public:false}, "trapStartIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "stringKeys", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32])); 
    $.Field({Static:false, Public:false}, "objectKeys", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $.Int32])); 
    $.Property({Static:false, Public:false}, "List", $asm08.TypeRef("ProtoBuf.Meta.MutableList"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.NetObjectCache/ReferenceComparer */ 

(function ReferenceComparer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Runtime.CompilerServices.RuntimeHelpers)) ();
  };

  function ReferenceComparer__ctor () {
  };

  function ReferenceComparer_System_Collections_Generic_IEqualityComparer$lSystem_Object$g_Equals (x, y) {
    return (x === y);
  };

  function ReferenceComparer_System_Collections_Generic_IEqualityComparer$lSystem_Object$g_GetHashCode (obj) {
    return $T01().GetHashCode(obj);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.NetObjectCache/ReferenceComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ReferenceComparer__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEqualityComparer$lSystem.Object$g.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object], []), 
      ReferenceComparer_System_Collections_Generic_IEqualityComparer$lSystem_Object$g_Equals
    )
      .Overrides(0, "Equals");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEqualityComparer$lSystem.Object$g.GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.Object], []), 
      ReferenceComparer_System_Collections_Generic_IEqualityComparer$lSystem_Object$g_GetHashCode
    )
      .Overrides(0, "GetHashCode");

    $.Field({Static:true , Public:true , ReadOnly:true }, "Default", $.Type); 
    function ReferenceComparer__cctor () {
      $thisType.Default = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      ReferenceComparer__cctor
    );

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.Object])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.ImplicitFields */ 

JSIL.MakeEnum(
  "ProtoBuf.ImplicitFields", true, {
    None: 0, 
    AllPublic: 1, 
    AllFields: 2
  }, false
);

/* class ProtoBuf.Serializer */ 

(function Serializer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.BufferPool)) ();
  };

  function Serializer_FlushPool () {
    $T00().Flush();
  };

  JSIL.MakeStaticClass("ProtoBuf.Serializer", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "FlushPool", 
      new JSIL.MethodSignature(null, [], []), 
      Serializer_FlushPool
    );

    $.Constant({Static:true , Public:true }, "ListItemTag", 1); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate ProtoBuf.Serializer/TypeResolver */ 

JSIL.MakeDelegate("ProtoBuf.Serializer/TypeResolver", false, []);

/* class ProtoBuf.ProtoEnumAttribute */ 

(function ProtoEnumAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Attribute)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Int32)) ();
  };

  function ProtoEnumAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ProtoEnumAttribute_get_Name () {
    return this.$name;
  };

  function ProtoEnumAttribute_get_Value () {
    return this.enumValue;
  };

  function ProtoEnumAttribute_HasValue () {
    return this.hasValue;
  };

  function ProtoEnumAttribute_set_Name (value) {
    this.$name = value;
  };

  function ProtoEnumAttribute_set_Value (value) {
    this.enumValue = value;
    this.hasValue = true;
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoEnumAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ProtoEnumAttribute__ctor
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], []), 
      ProtoEnumAttribute_get_Name
    );

    $.Method({Static:false, Public:true }, "get_Value", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ProtoEnumAttribute_get_Value
    );

    $.Method({Static:false, Public:true }, "HasValue", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ProtoEnumAttribute_HasValue
    );

    $.Method({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], []), 
      ProtoEnumAttribute_set_Name
    );

    $.Method({Static:false, Public:true }, "set_Value", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      ProtoEnumAttribute_set_Value
    );

    $.Field({Static:false, Public:false}, "hasValue", $.Boolean); 
    $.Field({Static:false, Public:false}, "enumValue", $.Int32); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Property({Static:false, Public:true }, "Value", $.Int32);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Field]; });

})();

/* interface ProtoBuf.IExtension */ 

JSIL.MakeInterface(
  "ProtoBuf.IExtension", true, [], function ($) {
    $.Method({}, "BeginAppend", new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [], []));
    $.Method({}, "EndAppend", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Boolean], []));
    $.Method({}, "BeginQuery", new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [], []));
    $.Method({}, "EndQuery", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream")], []));
    $.Method({}, "GetLength", new JSIL.MethodSignature($.Int32, [], []));
  }, []);

/* class ProtoBuf.BufferPool */ 

(function BufferPool$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize(System.Array.Of($asm07.System.Byte))) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };

  function BufferPool__ctor () {
  };

  function BufferPool_Flush () {

    for (var i = 0; i < $thisType.pool.length; i = ((i + 1) | 0)) {
      $thisType.pool[i] = null;
    }
  };

  function BufferPool_GetBuffer () {
    var obj = null;

    for (var i = 0; i < $thisType.pool.length; i = ((i + 1) | 0)) {
      if ((obj = $thisType.pool[i]) !== null) {
        return $T03().$Cast(obj);
      }
    }
    return JSIL.Array.New($T04(), 1024);
  };

  function BufferPool_ReleaseBufferToPool (/* ref */ buffer) {
    if (buffer.get() === null) {
      return;
    }
    if (buffer.get().length === 1024) {

    $loop0: 
      for (var i = 0; i < $thisType.pool.length; i = ((i + 1) | 0)) {
        if ($thisType.pool[i] === null) {
          $thisType.pool[i] = buffer.get();
        }
        if ($thisType.pool[i] === null) {
          break $loop0;
        }
      }
    }
    buffer.set(null);
  };

  function BufferPool_ResizeAndFlushLeft (/* ref */ buffer, toFitAtLeastBytes, copyFromIndex, copyBytes) {
    var num = ((buffer.get().length * 2) | 0);
    if (num < toFitAtLeastBytes) {
      num = toFitAtLeastBytes;
    }
    var array = JSIL.Array.New($T04(), num);
    if (copyBytes > 0) {
      $T05().BlockCopy(
        buffer.get(), 
        copyFromIndex, 
        array, 
        0, 
        copyBytes
      );
    }
    if (buffer.get().length === 1024) {
      $thisType.ReleaseBufferToPool(/* ref */ buffer);
    }
    buffer.set(array);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.BufferPool", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      BufferPool__ctor
    );

    $.Method({Static:true , Public:false}, "Flush", 
      new JSIL.MethodSignature(null, [], []), 
      BufferPool_Flush
    );

    $.Method({Static:true , Public:false}, "GetBuffer", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [], []), 
      BufferPool_GetBuffer
    );

    $.Method({Static:true , Public:false}, "ReleaseBufferToPool", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])])], []), 
      BufferPool_ReleaseBufferToPool
    );

    $.Method({Static:true , Public:false}, "ResizeAndFlushLeft", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Byte])]), $.Int32, 
          $.Int32, $.Int32
        ], []), 
      BufferPool_ResizeAndFlushLeft
    );

    $.Constant({Static:true , Public:false}, "PoolSize", 20); 
    $.Constant({Static:true , Public:false}, "BufferLength", 1024); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "pool", $jsilcore.TypeRef("System.Array", [$.Object]), function ($pi) {
        return JSIL.Array.New($asm07.System.Object, 20);
      }); 
    function BufferPool__cctor () {
      $thisType.pool = JSIL.Array.New($T00(), 20);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      BufferPool__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface ProtoBuf.IExtensible */ 

JSIL.MakeInterface(
  "ProtoBuf.IExtensible", true, [], function ($) {
    $.Method({}, "GetExtensionObject", new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.IExtension"), [$.Boolean], []));
  }, []);

/* class ProtoBuf.BufferExtension */ 

(function BufferExtension$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.IO.MemoryStream)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize(System.Array.Of($asm07.System.Byte))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.IO.Stream)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.IO.MemoryStream"), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.IO.MemoryStream"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Byte")])]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };

  function BufferExtension__ctor () {
  };

  function BufferExtension_ProtoBuf_IExtension_BeginAppend () {
    return $S00().Construct();
  };

  function BufferExtension_ProtoBuf_IExtension_BeginQuery () {
    if (this.buffer !== null) {
      return $S01().Construct(this.buffer);
    }
    return $T02().Null;
  };

  function BufferExtension_ProtoBuf_IExtension_EndAppend (stream, commit) {
    var num = 0;
    try {
      if (!(!commit || ((num = stream.get_Length().ToNumber(4294967295, true)) <= 0))) {
        var memoryStream = $T00().$Cast(stream);
        if (this.buffer === null) {
          this.buffer = memoryStream.ToArray();
        } else {
          var num2 = this.buffer.length;
          var to = JSIL.Array.New($T06(), ((num2 + num) | 0));
          $T07().BlockCopy(
            this.buffer, 
            0, 
            to, 
            0, 
            num2
          );
          $T07().BlockCopy(
            memoryStream.GetBuffer(), 
            0, 
            to, 
            num2, 
            num
          );
          this.buffer = to;
        }
      }
    } finally {
      if (stream !== null) {
        $IM00().Call(stream, null);
      }
    }
  };

  function BufferExtension_ProtoBuf_IExtension_EndQuery (stream) {
    try {
    } finally {
      if (stream !== null) {
        $IM00().Call(stream, null);
      }
    }
  };

  function BufferExtension_ProtoBuf_IExtension_GetLength () {
    if (this.buffer !== null) {
      return this.buffer.length;
    }
    return 0;
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.BufferExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      BufferExtension__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.IExtension.BeginAppend", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [], []), 
      BufferExtension_ProtoBuf_IExtension_BeginAppend
    )
      .Overrides(0, "BeginAppend");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.IExtension.BeginQuery", 
      new JSIL.MethodSignature($asm07.TypeRef("System.IO.Stream"), [], []), 
      BufferExtension_ProtoBuf_IExtension_BeginQuery
    )
      .Overrides(0, "BeginQuery");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.IExtension.EndAppend", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Boolean], []), 
      BufferExtension_ProtoBuf_IExtension_EndAppend
    )
      .Overrides(0, "EndAppend");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.IExtension.EndQuery", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream")], []), 
      BufferExtension_ProtoBuf_IExtension_EndQuery
    )
      .Overrides(0, "EndQuery");

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.IExtension.GetLength", 
      new JSIL.MethodSignature($.Int32, [], []), 
      BufferExtension_ProtoBuf_IExtension_GetLength
    )
      .Overrides(0, "GetLength");

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.IExtension")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ServiceModel.ProtoBehaviorAttribute */ 

(function ProtoBehaviorAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Attribute)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.ServiceModel.Description.OperationDescription)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm0F.System.ServiceModel.Channels.BindingParameterCollection)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.ServiceModel.Dispatcher.ClientOperation)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm0F.System.ServiceModel.Description.IOperationBehavior)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.ServiceModel.ProtoOperationBehavior)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm0F.System.ServiceModel.Dispatcher.DispatchOperation)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm0F.System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm0F.System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior)) ();
  };

  function ProtoBehaviorAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ProtoBehaviorAttribute_System_ServiceModel_Description_IOperationBehavior_AddBindingParameters (operationDescription, bindingParameters) {
  };

  function ProtoBehaviorAttribute_System_ServiceModel_Description_IOperationBehavior_ApplyClientBehavior (operationDescription, clientOperation) {
    var operationBehavior = new ($T05())(operationDescription);
    $IM00().Call(operationBehavior, null, operationDescription, clientOperation);
  };

  function ProtoBehaviorAttribute_System_ServiceModel_Description_IOperationBehavior_ApplyDispatchBehavior (operationDescription, dispatchOperation) {
    var operationBehavior = new ($T05())(operationDescription);
    $IM01().Call(operationBehavior, null, operationDescription, dispatchOperation);
  };

  function ProtoBehaviorAttribute_System_ServiceModel_Description_IOperationBehavior_Validate (operationDescription) {
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ServiceModel.ProtoBehaviorAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ProtoBehaviorAttribute__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IOperationBehavior.AddBindingParameters", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.ServiceModel.Description.OperationDescription"), $asm0F.TypeRef("System.ServiceModel.Channels.BindingParameterCollection")], []), 
      ProtoBehaviorAttribute_System_ServiceModel_Description_IOperationBehavior_AddBindingParameters
    )
      .Overrides(1, "AddBindingParameters");

    $.Method({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.ServiceModel.Description.OperationDescription"), $asm0F.TypeRef("System.ServiceModel.Dispatcher.ClientOperation")], []), 
      ProtoBehaviorAttribute_System_ServiceModel_Description_IOperationBehavior_ApplyClientBehavior
    )
      .Overrides(1, "ApplyClientBehavior");

    $.Method({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.ServiceModel.Description.OperationDescription"), $asm0F.TypeRef("System.ServiceModel.Dispatcher.DispatchOperation")], []), 
      ProtoBehaviorAttribute_System_ServiceModel_Description_IOperationBehavior_ApplyDispatchBehavior
    )
      .Overrides(1, "ApplyDispatchBehavior");

    $.Method({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IOperationBehavior.Validate", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.ServiceModel.Description.OperationDescription")], []), 
      ProtoBehaviorAttribute_System_ServiceModel_Description_IOperationBehavior_Validate
    )
      .Overrides(1, "Validate");

    $.ImplementInterfaces(
      /* 1 */ $asm0F.TypeRef("System.ServiceModel.Description.IOperationBehavior")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; });

})();

/* enum ProtoBuf.PrefixStyle */ 

JSIL.MakeEnum(
  "ProtoBuf.PrefixStyle", true, {
    None: 0, 
    Base128: 1, 
    Fixed32: 2, 
    Fixed32BigEndian: 3
  }, false
);

/* class ProtoBuf.ServiceModel.ProtoOperationBehavior */ 

(function ProtoOperationBehavior$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.ServiceModel.Description.OperationDescription)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm0F.System.ServiceModel.Description.DataContractSerializerOperationBehavior)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0E.System.Xml.XmlDictionaryString)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Collections.Generic.IList$b1.Of($asm07.System.Type))) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.ServiceModel.XmlProtoSerializer)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.InvalidOperationException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm0E.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), [
        $asm07.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.XmlDictionaryString"), 
        $asm0E.TypeRef("System.Xml.XmlDictionaryString"), $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Type")])
      ], []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentNullException"), [$asm07.TypeRef("System.String")]))) ();
  };

  function ProtoOperationBehavior__ctor (operation) {
    $T01().prototype._ctor.call(this, operation);
  };

  function ProtoOperationBehavior_CreateSerializer (type, name, ns, knownTypes) {
    if (this.model === null) {
      throw $S00().Construct("No Model instance has been assigned to the ProtoOperationBehavior");
    }
    return JSIL.Coalesce(
      $T07().TryCreate(this.model, type), 
      $T07().$Cast($S01().Call($T01().prototype, "CreateSerializer", null, this, type, name, ns, knownTypes))
    );
  };

  function ProtoOperationBehavior_get_Model () {
    return this.model;
  };

  function ProtoOperationBehavior_set_Model (value) {
    if (value === null) {
      throw $S02().Construct("Model");
    }
    this.model = value;
  };

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ServiceModel.Description.DataContractSerializerOperationBehavior"), 
      Name: "ProtoBuf.ServiceModel.ProtoOperationBehavior", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.ServiceModel.Description.OperationDescription")], []), 
      ProtoOperationBehavior__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CreateSerializer", 
      new JSIL.MethodSignature($asm0E.TypeRef("System.Runtime.Serialization.XmlObjectSerializer"), [
          $asm07.TypeRef("System.Type"), $asm0E.TypeRef("System.Xml.XmlDictionaryString"), 
          $asm0E.TypeRef("System.Xml.XmlDictionaryString"), $asm07.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("System.Type")])
        ], []), 
      ProtoOperationBehavior_CreateSerializer
    );

    $.Method({Static:false, Public:true }, "get_Model", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Meta.TypeModel"), [], []), 
      ProtoOperationBehavior_get_Model
    );

    $.Method({Static:false, Public:true }, "set_Model", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Meta.TypeModel")], []), 
      ProtoOperationBehavior_set_Model
    );

    $.Field({Static:false, Public:false}, "model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel")); 
    $.Property({Static:false, Public:true }, "Model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ProtoIgnoreAttribute */ 

(function ProtoIgnoreAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Attribute)) ();
  };

  function ProtoIgnoreAttribute__ctor$00 () {
    $T00().prototype._ctor.call(this);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoIgnoreAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ProtoIgnoreAttribute__ctor$00
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

/* class ProtoBuf.ProtoPartialIgnoreAttribute */ 

(function ProtoPartialIgnoreAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.ProtoIgnoreAttribute)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentNullException"), [$asm07.TypeRef("System.String")]))) ();
  };

  function ProtoPartialIgnoreAttribute__ctor (memberName) {
    $T01().prototype._ctor.call(this);
    if ($T02().IsNullOrEmpty(memberName)) {
      throw $S00().Construct("memberName");
    }
    this.memberName = memberName;
  };

  function ProtoPartialIgnoreAttribute_get_MemberName () {
    return this.memberName;
  };

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("ProtoBuf.ProtoIgnoreAttribute"), 
      Name: "ProtoBuf.ProtoPartialIgnoreAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], []), 
      ProtoPartialIgnoreAttribute__ctor
    );

    $.Method({Static:false, Public:true }, "get_MemberName", 
      new JSIL.MethodSignature($.String, [], []), 
      ProtoPartialIgnoreAttribute_get_MemberName
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "memberName", $.String); 
    $.Property({Static:false, Public:true }, "MemberName", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; });

})();

/* class ProtoBuf.Extensible */ 

(function Extensible$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.IExtensible)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.DataFormat)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.ExtensibleUtil)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.IExtension)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.ProtoBuf.BufferExtension)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.Collections.IEnumerator)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Collections.IEnumerable)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.Collections.IEnumerable.GetEnumerator)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm07.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm07.System.Collections.IEnumerator.get_Current)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };

  function Extensible__ctor () {
  };

  function Extensible_AppendValue (model, instance, tag, format, value) {
    $T05().AppendExtendValue(
      model, 
      instance, 
      tag, 
      format, 
      value
    );
  };

  function Extensible_GetExtensionObject$00 (createIfMissing) {
    return $thisType.GetExtensionObject(/* ref */ new JSIL.MemberReference(this, "extensionObject"), createIfMissing);
  };

  function Extensible_GetExtensionObject$01 (/* ref */ extensionObject, createIfMissing) {
    if (!(!createIfMissing || (extensionObject.get() !== null))) {
      extensionObject.set(new ($T08())());
    }
    return extensionObject.get();
  };

  function Extensible_GetValues (model, type, instance, tag, format) {
    return $T05().GetExtendedValues(
      model, 
      type, 
      instance, 
      tag, 
      format, 
      false, 
      false
    );
  };

  function Extensible_ProtoBuf_IExtensible_GetExtensionObject (createIfMissing) {
    return this.GetExtensionObject(createIfMissing);
  };

  function Extensible_TryGetValue (model, type, instance, tag, format, allowDefinedTag, /* ref */ value) {
    value.set(null);
    var result = false;
    var enumerator = $IM00().Call($T05().GetExtendedValues(
        model, 
        type, 
        instance, 
        tag, 
        format, 
        true, 
        allowDefinedTag
      ), null);
    try {

      while ($IM01().Call(enumerator, null)) {
        var current = $IM02().Call(enumerator, null);
        value.set(current);
        result = true;
      }
    } finally {
      var disposable = $T0C().$As(enumerator);
      if (disposable !== null) {
        $IM03().Call(disposable, null);
      }
    }
    return result;
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Extensible", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      Extensible__ctor
    );

    $.Method({Static:true , Public:true }, "AppendValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm08.TypeRef("ProtoBuf.IExtensible"), 
          $.Int32, $asm08.TypeRef("ProtoBuf.DataFormat"), 
          $.Object
        ], []), 
      Extensible_AppendValue
    );

    $.Method({Static:false, Public:false, Virtual:true }, "GetExtensionObject", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.IExtension"), [$.Boolean], []), 
      Extensible_GetExtensionObject$00
    );

    $.Method({Static:true , Public:true }, "GetExtensionObject", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.IExtension"), [$jsilcore.TypeRef("JSIL.Reference", [$asm08.TypeRef("ProtoBuf.IExtension")]), $.Boolean], []), 
      Extensible_GetExtensionObject$01
    );

    $.Method({Static:true , Public:true }, "GetValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.IEnumerable"), [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type"), 
          $asm08.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $asm08.TypeRef("ProtoBuf.DataFormat")
        ], []), 
      Extensible_GetValues
    );

    $.Method({Static:false, Public:false, Virtual:true }, "ProtoBuf.IExtensible.GetExtensionObject", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.IExtension"), [$.Boolean], []), 
      Extensible_ProtoBuf_IExtensible_GetExtensionObject
    )
      .Overrides(0, "GetExtensionObject");

    $.Method({Static:true , Public:true }, "TryGetValue", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type"), 
          $asm08.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $asm08.TypeRef("ProtoBuf.DataFormat"), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], []), 
      Extensible_TryGetValue
    );

    $.Field({Static:false, Public:false}, "extensionObject", $asm08.TypeRef("ProtoBuf.IExtension")); 
    $.ImplementInterfaces(
      /* 0 */ $asm08.TypeRef("ProtoBuf.IExtensible")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.TypeModel */ 

(function TypeModel$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Collections.IList)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeFormatEventHandler)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Delegate)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Threading.Interlocked)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Collections.Generic.KeyValuePair$b2)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel_Formatter)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.Void)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.Reflection.ConstructorInfo)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.System.Collections.Generic.IDictionary$b2)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize(System.Array.Of($asm07.System.Type))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm07.System.Collections.Generic.Dictionary$b2)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.Collections.IDictionary)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm07.System.Collections.Hashtable)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm07.System.Collections.Generic.List$b1)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm07.System.Collections.ArrayList)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm07.System.Activator)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm07.System.NotSupportedException)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm07.System.IO.MemoryStream)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm07.System.IO.Stream)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize(System.Array.Of($asm07.System.Byte))) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm08.ProtoBuf.DataFormat)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm08.ProtoBuf.WireType)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm08.ProtoBuf.SerializationContext)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm08.ProtoBuf.PrefixStyle)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm08.ProtoBuf.Serializer_TypeResolver)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel_DeserializeItemsIterator)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeFormatEventArgs)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm07.System.Collections.IEnumerable)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.MethodInfo))) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm07.System.Reflection.MethodInfo)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm07.System.Reflection.MethodBase)) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm07.System.Reflection.MemberInfo)) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.ParameterInfo))) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm07.System.Reflection.ParameterInfo)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.PropertyInfo))) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm07.System.Reflection.BindingFlags)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm07.System.Reflection.PropertyInfo)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize($asm07.System.Reflection.Assembly)) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm08.ProtoBuf.ProtoTypeCode)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm07.System.Exception)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm07.System.Char)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerable$b1)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm07.System.Collections.Generic.ICollection$b1)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm08.ProtoBuf.ProtoException)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm08.ProtoBuf.SubItemToken)) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize($asm08.ProtoBuf.BclHelpers)) ();
  };
  var $T3D = function () {
    return ($T3D = JSIL.Memoize($asm09.System.Uri)) ();
  };
  var $T3E = function () {
    return ($T3E = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };
  var $T3F = function () {
    return ($T3F = JSIL.Memoize($asm07.System.Array)) ();
  };
  var $T40 = function () {
    return ($T40 = JSIL.Memoize($asm07.System.SByte)) ();
  };
  var $T41 = function () {
    return ($T41 = JSIL.Memoize($asm07.System.Int16)) ();
  };
  var $T42 = function () {
    return ($T42 = JSIL.Memoize($asm07.System.UInt16)) ();
  };
  var $T43 = function () {
    return ($T43 = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T44 = function () {
    return ($T44 = JSIL.Memoize($asm07.System.UInt64)) ();
  };
  var $T45 = function () {
    return ($T45 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T46 = function () {
    return ($T46 = JSIL.Memoize($asm07.System.Double)) ();
  };
  var $T47 = function () {
    return ($T47 = JSIL.Memoize($asm07.System.Decimal)) ();
  };
  var $T48 = function () {
    return ($T48 = JSIL.Memoize($asm07.System.DateTime)) ();
  };
  var $T49 = function () {
    return ($T49 = JSIL.Memoize($asm07.System.TimeSpan)) ();
  };
  var $T4A = function () {
    return ($T4A = JSIL.Memoize($asm07.System.Guid)) ();
  };
  var $T4B = function () {
    return ($T4B = JSIL.Memoize($asm07.System.Collections.IEnumerator)) ();
  };
  var $T4C = function () {
    return ($T4C = JSIL.Memoize($asm07.System.NullReferenceException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentNullException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")], []))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Object"), [$asm07.TypeRef("System.Type")], []))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.NotSupportedException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.IO.MemoryStream"), []))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Object"), 
        $asm08.TypeRef("ProtoBuf.ProtoWriter")
      ], []))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Object"), [
        $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Object"), 
        $asm08.TypeRef("ProtoBuf.ProtoReader")
      ], []))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Object"), [
        $asm07.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Object"), 
        $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.SerializationContext")
      ], []))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.TypeRef("ProtoBuf.Meta.TypeModel/DeserializeItemsIterator"), [
        $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.IO.Stream"), 
        $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
        $asm07.TypeRef("System.Int32"), $asm08.TypeRef("ProtoBuf.Serializer/TypeResolver"), 
        $asm08.TypeRef("ProtoBuf.SerializationContext")
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
        $asm07.TypeRef("System.IO.Stream"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
        $asm07.TypeRef("System.Int32"), $asm08.TypeRef("ProtoBuf.SerializationContext")
      ], ["T"]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.TypeRef("ProtoBuf.Meta.TypeFormatEventArgs"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.InvalidOperationException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.InvalidOperationException"), []))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Type")], []))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.NotSupportedException"), []))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Object"), 
        $asm08.TypeRef("ProtoBuf.SerializationContext")
      ], []))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.TypeRef("ProtoBuf.Meta.TypeFormatEventArgs"), [$asm07.TypeRef("System.Type")]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.TypeRef("ProtoBuf.ProtoException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.ConstructorSignature($asm09.TypeRef("System.Uri"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S15 = function () {
    return ($S15 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.TypeRef("System.Array"), $asm07.TypeRef("System.Array"), 
        $asm07.TypeRef("System.Int32")
      ], []))) ();
  };
  var $S16 = function () {
    return ($S16 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.NullReferenceException"), []))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm07.System.Collections.IList.Add)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm07.System.Collections.IEnumerable.GetEnumerator)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm07.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm07.System.Collections.IEnumerator.get_Current)) ();
  };

  function TypeModel__ctor () {
  };

  function TypeModel_add_DynamicTypeFormatting (value) {
    var typeFormatEventHandler = this.DynamicTypeFormatting;

    do {
      var typeFormatEventHandler2 = typeFormatEventHandler;
      var value2 = $T02().Combine(typeFormatEventHandler2, value);
      typeFormatEventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "DynamicTypeFormatting"), value2, typeFormatEventHandler2);
    } while (typeFormatEventHandler !== typeFormatEventHandler2);
  };

  function TypeModel_CanSerialize$00 (type) {
    return this.CanSerialize(type, true, true, true);
  };

  function TypeModel_CanSerialize$01 ($type, allowBasic, allowContract, allowLists) {
    var type = new JSIL.BoxedVariable($type);
    if ($S00().CallStatic($T04(), "op_Equality", null, type.get(), null)) {
      throw $S01().Construct("type");
    }
    var underlyingType = $T07().GetUnderlyingType(type.get());
    if ($S02().CallStatic($T04(), "op_Inequality", null, underlyingType, null)) {
      type.set(underlyingType);
    }
    switch ($T07().GetTypeCode(type.get()).valueOf()) {
      case 0: 
      case 1: 
        var key = this.GetKey(/* ref */ type);
        if (key >= 0) {
          return allowContract;
        }
        if (allowLists) {
          var type2 = null;
          if (type.get().get_IsArray()) {
            if (type.get().GetArrayRank() === 1) {
              type2 = type.get().GetElementType();
            }
          } else {
            type2 = $thisType.GetListItemType(this, type.get());
          }
          if ($S02().CallStatic($T04(), "op_Inequality", null, type2, null)) {
            return this.CanSerialize(type2, allowBasic, allowContract, false);
          }
        }
        return false;

      default: 
        return allowBasic;

    }
  };

  function TypeModel_CanSerializeBasicType (type) {
    return this.CanSerialize(type, true, false, true);
  };

  function TypeModel_CanSerializeContractType (type) {
    return this.CanSerialize(type, false, true, true);
  };

  function TypeModel_CheckDictionaryAccessors (model, pair, value) {
    return (!(!pair.get_IsGenericType() || 
        !$S00().CallStatic($T04(), "op_Equality", null, 
          pair.GetGenericTypeDefinition(), 
          model.MapType($T09().__Type__)
        )) && $S00().CallStatic($T04(), "op_Equality", null, pair.GetGenericArguments()[1], value));
  };

  function TypeModel_CreateFormatter (type) {
    return new ($T0A())(this, type);
  };

  function TypeModel_CreateListInstance (listType, itemType) {
    var fullName = null;
    var type = listType;
    if (listType.get_IsArray()) {
      return JSIL.Array.New(itemType, 0);
    }
    if (!(listType.get_IsClass() && 
        !listType.get_IsAbstract() && !$T0D().op_Equality($T07().GetConstructor(listType, $T07().EmptyTypes, true), null))) {
      var flag = false;
      if (!(!listType.get_IsInterface() || 
          ((fullName = listType.get_FullName()) === null) || ((fullName.indexOf("Dictionary")) < 0))) {
        if (!(!listType.get_IsGenericType() || !$S00().CallStatic($T04(), "op_Equality", null, listType.GetGenericTypeDefinition(), $T0E().__Type__))) {
          var genericArguments = listType.GetGenericArguments();
          type = $T10().__Type__.MakeGenericType(genericArguments);
          flag = true;
        }
        if (!(flag || !$S00().CallStatic($T04(), "op_Equality", null, listType, $T11().__Type__))) {
          type = $T12().__Type__;
          flag = true;
        }
      }
      if (!flag) {
        type = $T13().__Type__.MakeGenericType(JSIL.Array.New($T04(), [itemType]));
        flag = true;
      }
      if (!flag) {
        type = $T14().__Type__;
      }
    }
    return $S03().CallStatic($T15(), "CreateInstance", null, type);
  };

  function TypeModel_CreateNestedListsNotSupported () {
    return $S04().Construct("Nested or jagged lists and arrays are not supported");
  };

  function TypeModel_DeepClone ($value) {
    var value = new JSIL.BoxedVariable($value);
    var num = new JSIL.BoxedVariable(0);
    if (value.get() === null) {
      return null;
    }
    var type = new JSIL.BoxedVariable(JSIL.GetType(value.get()));
    var key = this.GetKey(/* ref */ type);
    if (!((key < 0) || $T07().IsEnum(type.get()))) {
      var memoryStream = $S05().Construct();
      try {
        var protoWriter = new ($T19())(memoryStream, this, null);
        try {
          protoWriter.SetRootObject(value.get());
          $S06().CallVirtual("Serialize", null, this, key, value.get(), protoWriter);
          protoWriter.Close();
        } finally {
          if (protoWriter !== null) {
            $IM00().Call(protoWriter, null);
          }
        }
        memoryStream.set_Position($T1C().Create(0, 0, 0));
        var protoReader = null;
        try {
          protoReader = $T1D().Create(memoryStream, this, null, -1);
          var result = $S07().CallVirtual("Deserialize", null, this, key, null, protoReader);
          return result;
        } finally {
          $T1D().Recycle(protoReader);
        }
      } finally {
        if (memoryStream !== null) {
          $IM00().Call(memoryStream, null);
        }
      }
    }
    if ($S00().CallStatic($T04(), "op_Equality", null, type.get(), $T1E().__Type__)) {
      var array = $T1E().$Cast(value.get());
      var array2 = JSIL.Array.New($T1F(), array.length);
      $T07().BlockCopy(
        array, 
        0, 
        array2, 
        0, 
        array.length
      );
      return array2;
    }
    if (!((this.GetWireType($T07().GetTypeCode(type.get()), $T20().Default, /* ref */ type, /* ref */ num) === $T21().None) || (num.get() >= 0))) {
      return value.get();
    }
    var memoryStream2 = $S05().Construct();
    try {
      var protoWriter2 = new ($T19())(memoryStream2, this, null);
      try {
        if (!this.TrySerializeAuxiliaryType(
            protoWriter2, 
            type.get(), 
            $T20().Default, 
            1, 
            value.get(), 
            false
          )) {
          $thisType.ThrowUnexpectedType(type.get());
        }
        protoWriter2.Close();
      } finally {
        if (protoWriter2 !== null) {
          $IM00().Call(protoWriter2, null);
        }
      }
      memoryStream2.set_Position($T1C().Create(0, 0, 0));
      var reader = null;
      try {
        reader = $T1D().Create(memoryStream2, this, null, -1);
        value.set(null);
        this.TryDeserializeAuxiliaryType(
          reader, 
          $T20().Default, 
          1, 
          type.get(), 
          /* ref */ value, 
          true, 
          false, 
          true, 
          false
        );
        result = value.get();
      } finally {
        $T1D().Recycle(reader);
      }
    } finally {
      if (memoryStream2 !== null) {
        $IM00().Call(memoryStream2, null);
      }
    }
    return result;
  };

  function TypeModel_Deserialize$02 (source, value, type) {
    return $S08().CallVirtual("Deserialize", null, this, source, value, type, null);
  };

  function TypeModel_Deserialize$03 (source, value, $type, context) {
    var type = new JSIL.BoxedVariable($type);
    var noAutoCreate = this.PrepareDeserialize(value, /* ref */ type);
    var protoReader = null;
    try {
      protoReader = $T1D().Create(source, this, context, -1);
      if (value !== null) {
        protoReader.SetRootObject(value);
      }
      var obj = this.DeserializeCore(protoReader, type.get(), value, noAutoCreate);
      protoReader.CheckFullyConsumed();
      var result = obj;
    } finally {
      $T1D().Recycle(protoReader);
    }
    return result;
  };

  function TypeModel_Deserialize$04 (source, value, type, length) {
    return this.Deserialize(
      source, 
      value, 
      type, 
      length, 
      null
    );
  };

  function TypeModel_Deserialize$05 (source, value, $type, length, context) {
    var type = new JSIL.BoxedVariable($type);
    var noAutoCreate = this.PrepareDeserialize(value, /* ref */ type);
    var protoReader = null;
    try {
      protoReader = $T1D().Create(source, this, context, length);
      if (value !== null) {
        protoReader.SetRootObject(value);
      }
      var obj = this.DeserializeCore(protoReader, type.get(), value, noAutoCreate);
      protoReader.CheckFullyConsumed();
      var result = obj;
    } finally {
      $T1D().Recycle(protoReader);
    }
    return result;
  };

  function TypeModel_Deserialize$06 (source, value, $type) {
    var type = new JSIL.BoxedVariable($type);
    if (source === null) {
      throw $S01().Construct("source");
    }
    var noAutoCreate = this.PrepareDeserialize(value, /* ref */ type);
    if (value !== null) {
      source.SetRootObject(value);
    }
    var result = this.DeserializeCore(source, type.get(), value, noAutoCreate);
    source.CheckFullyConsumed();
    return result;
  };

  function TypeModel_DeserializeCore (reader, $type, $value, noAutoCreate) {
    var value = new JSIL.BoxedVariable($value);
    var type = new JSIL.BoxedVariable($type);
    var key = this.GetKey(/* ref */ type);
    if (!((key < 0) || $T07().IsEnum(type.get()))) {
      return $S07().CallVirtual("Deserialize", null, this, key, value.get(), reader);
    }
    this.TryDeserializeAuxiliaryType(
      reader, 
      $T20().Default, 
      1, 
      type.get(), 
      /* ref */ value, 
      true, 
      false, 
      noAutoCreate, 
      false
    );
    return value.get();
  };

  function TypeModel_DeserializeItems$07 (source, type, style, expectedField, resolver) {
    return this.DeserializeItems(
      source, 
      type, 
      style, 
      expectedField, 
      resolver, 
      null
    );
  };

  function TypeModel_DeserializeItems$08 (source, type, style, expectedField, resolver, context) {
    return $S09().Construct(this, source, type, style, expectedField, resolver, context);
  };

  function TypeModel_DeserializeItems$b1$09 (T, source, style, expectedField) {
    return $S0A().CallVirtual("DeserializeItems$b1", [T], this, source, style, expectedField, null);
  };

  function TypeModel_DeserializeItems$b1$0A (T, source, style, expectedField, context) {
    return new ($asm08.ProtoBuf.Meta.TypeModel_DeserializeItemsIterator$b1.Of(T)) (this, source, style, expectedField, context);
  };

  function TypeModel_DeserializeType (model, value) {
    if (model !== null) {
      var dynamicTypeFormatting = model.DynamicTypeFormatting;
      if (dynamicTypeFormatting !== null) {
        var typeFormatEventArgs = $S0B().Construct(value);
        dynamicTypeFormatting(model, typeFormatEventArgs);
        if ($S02().CallStatic($T04(), "op_Inequality", null, typeFormatEventArgs.get_Type(), null)) {
          return typeFormatEventArgs.get_Type();
        }
      }
    }
    return JSIL.ReflectionGetTypeInternal($asm08.__Assembly__, value, false, false);
  };

  function TypeModel_DeserializeWithLengthPrefix$0B (source, value, type, style, fieldNumber) {
    var num = new JSIL.BoxedVariable(0);
    return this.DeserializeWithLengthPrefix(
      source, 
      value, 
      type, 
      style, 
      fieldNumber, 
      null, 
      /* ref */ num
    );
  };

  function TypeModel_DeserializeWithLengthPrefix$0C (source, value, type, style, expectedField, resolver) {
    var num = new JSIL.BoxedVariable(0);
    return this.DeserializeWithLengthPrefix(
      source, 
      value, 
      type, 
      style, 
      expectedField, 
      resolver, 
      /* ref */ num
    );
  };

  function TypeModel_DeserializeWithLengthPrefix$0D (source, value, type, style, expectedField, resolver, /* ref */ bytesRead) {
    var flag = new JSIL.BoxedVariable(false);
    return this.DeserializeWithLengthPrefix(
      source, 
      value, 
      type, 
      style, 
      expectedField, 
      resolver, 
      /* ref */ bytesRead, 
      /* ref */ flag, 
      null
    );
  };

  function TypeModel_DeserializeWithLengthPrefix$0E (source, $value, $type, style, expectedField, resolver, /* ref */ bytesRead, /* ref */ haveObject, context) {
    var value = new JSIL.BoxedVariable($value);
    var type = new JSIL.BoxedVariable($type);
    var num2 = new JSIL.BoxedVariable(0);
    var num3 = new JSIL.BoxedVariable(0);

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          haveObject.set(false);
          bytesRead.set(0);
          if (!(!$S00().CallStatic($T04(), "op_Equality", null, type.get(), null) || ((style === $T23().Base128) && 
                (resolver !== null)))) {
            throw $S0C().Construct("A type must be provided unless base-128 prefixing is being used in combination with a resolver");
          }

        $loop0: 
          while (true) {
            var num = $T1D().ReadLengthPrefix(
              source, 
              ((expectedField > 0) || 
                (resolver !== null)), 
              style, 
              /* ref */ num2, 
              /* ref */ num3
            );
            if (num3.get() === 0) {
              break $loop0;
            }
            bytesRead.set(((bytesRead.get() + num3.get()) | 0));
            if (num < 0) {
              return value.get();
            }
            if (style === $T23().Base128) {
              if (!(!((expectedField > 0) || 
                    (resolver !== null)) || 
                  (expectedField !== 0) || 
                  !$S00().CallStatic($T04(), "op_Equality", null, type.get(), null) || (resolver === null))) {
                type.set(resolver(num2.get()));
                var flag2 = $S00().CallStatic($T04(), "op_Equality", null, type.get(), null);
              } else {
                flag2 = (expectedField !== num2.get());
              }
            } else {
              flag2 = false;
            }
            if (flag2) {
              if (num === 2147483647) {
                $label0 = 1 /* goto Block_12 */ ;
                continue $labelgroup0;
              }
              $T1D().Seek(source, num, null);
              bytesRead.set(((bytesRead.get() + num) | 0));
            }
            if (!flag2) {
              break $labelgroup0;
            }
          }
          return value.get();

          $label0 = 1 /* goto Block_12 */ ;
          continue $labelgroup0;
        case 1: /* Block_12 */ 
          throw $S0D().Construct();
          break $labelgroup0;

      }
    }
    /* Original label Block_13 */ 
    var protoReader = null;
    try {
      protoReader = $T1D().Create(source, this, context, num);
      var key = this.GetKey(/* ref */ type);
      if (!((key < 0) || $T07().IsEnum(type.get()))) {
        value.set($S07().CallVirtual("Deserialize", null, this, key, value.get(), protoReader));
      } else if (!(this.TryDeserializeAuxiliaryType(
            protoReader, 
            $T20().Default, 
            1, 
            type.get(), 
            /* ref */ value, 
            true, 
            false, 
            true, 
            false
          ) || (num === 0))) {
        $thisType.ThrowUnexpectedType(type.get());
      }
      bytesRead.set(((bytesRead.get() + protoReader.get_Position()) | 0));
      haveObject.set(true);
    } finally {
      $T1D().Recycle(protoReader);
    }
    return value;
  };

  function TypeModel_GetKey (/* ref */ type) {
    if ($S00().CallStatic($T04(), "op_Equality", null, type.get(), null)) {
      return -1;
    }
    var keyImpl = this.GetKeyImpl(type.get());
    if (keyImpl < 0) {
      var type2 = $thisType.ResolveProxies(type.get());
      if ($S02().CallStatic($T04(), "op_Inequality", null, type2, null)) {
        type.set(type2);
        keyImpl = this.GetKeyImpl(type.get());
      }
    }
    return keyImpl;
  };

  function TypeModel_GetListItemType (model, listType) {
    var parameterType = null;
    if (!(!$S00().CallStatic($T04(), "op_Equality", null, listType, model.MapType($T0B().__Type__)) && 
        !listType.get_IsArray() && $S0E().CallVirtual("IsAssignableFrom", null, model.MapType($T28().__Type__), listType))) {
      return null;
    }
    var basicList = new ($T29())();
    var methods = listType.GetMethods();

    for (var i = 0; i < methods.length; i = ((i + 1) | 0)) {
      var methodInfo = methods[i];
      if (!(methodInfo.get_IsStatic() || (methodInfo.get_Name() != "Add"))) {
        var parameters = methodInfo.GetParameters();
        if (!((parameters.length !== 1) || basicList.Contains((parameterType = (parameters[0]).get_ParameterType())))) {
          basicList.Add(parameterType);
        }
      }
    }
    var name = listType.get_Name();
    if (!((name !== null) && (((name.indexOf("Queue")) >= 0) || 
          ((name.indexOf("Stack")) >= 0)))) {
      $thisType.TestEnumerableListPatterns(model, basicList, listType);
      var interfaces = listType.GetInterfaces();

      for (var j = 0; j < interfaces.length; j = ((j + 1) | 0)) {
        var iType = interfaces[j];
        $thisType.TestEnumerableListPatterns(model, basicList, iType);
      }
    }
    var properties = listType.GetProperties($T31().$Flags("Instance", "NonPublic", "Public"));

    for (var k = 0; k < properties.length; k = ((k + 1) | 0)) {
      var propertyInfo = properties[k];
      if (!((propertyInfo.get_Name() != "Item") || basicList.Contains(propertyInfo.get_PropertyType()))) {
        var indexParameters = propertyInfo.GetIndexParameters();
        if (!((indexParameters.length !== 1) || $S02().CallStatic($T04(), "op_Inequality", null, 
              (indexParameters[0]).get_ParameterType(), 
              model.MapType($T08().__Type__)
            ))) {
          basicList.Add(propertyInfo.get_PropertyType());
        }
      }
    }
    switch (basicList.get_Count()) {
      case 0: 
        return null;

      case 1: 
        return $T04().$Cast(basicList.get_Item(0));

      case 2: 
        if ($thisType.CheckDictionaryAccessors(
            model, 
            $T04().$Cast(basicList.get_Item(0)), 
            $T04().$Cast(basicList.get_Item(1))
          )) {
          return $T04().$Cast(basicList.get_Item(0));
        }
        if ($thisType.CheckDictionaryAccessors(
            model, 
            $T04().$Cast(basicList.get_Item(1)), 
            $T04().$Cast(basicList.get_Item(0))
          )) {
          return $T04().$Cast(basicList.get_Item(1));
        }
        break;

    }
    return null;
  };

  function TypeModel_GetSchema (type) {
    throw $S0F().Construct();
  };

  function TypeModel_GetType$0F (fullName, context) {
    return $thisType.ResolveKnownType(fullName, this, context);
  };

  function TypeModel_GetWireType (code, format, /* ref */ type, /* ref */ modelKey) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          modelKey.set(-1);
          if ($T07().IsEnum(type.get())) {
            modelKey.set(this.GetKey(/* ref */ type));
            return $T21().Variant;
          }
          switch (code.valueOf()) {
            case 3: 
            case 4: 
            case 5: 
            case 6: 
            case 7: 
            case 8: 
            case 9: 
            case 10: 
              if (format !== $T20().FixedSize) {
                return $T21().Variant;
              }
              return $T21().Fixed32;

            case 11: 
            case 12: 
              if (format !== $T20().FixedSize) {
                return $T21().Variant;
              }
              return $T21().Fixed64;

            case 13: 
              return $T21().Fixed32;

            case 14: 
              return $T21().Fixed64;

            case 15: 
            case 16: 
            case 18: 
              break;

            case 17: 
              $label0 = 1 /* goto IL_94 */ ;
              continue $labelgroup0;

            default: 
              switch (code.valueOf()) {
                case 100: 
                case 101: 
                case 102: 
                case 103: 
                  break;

                default: 
                  $label0 = 1 /* goto IL_94 */ ;
                  continue $labelgroup0;

              }
              break;

          }
          return $T21().String;

          $label0 = 1 /* goto IL_94 */ ;
          continue $labelgroup0;
        case 1: /* IL_94 */ 
          if (modelKey.set(this.GetKey(/* ref */ type)) >= 0) {
            return $T21().String;
          }
          return $T21().None;

          break $labelgroup0;
      }
    }
  };

  function TypeModel_IsDefined ($type) {
    var type = new JSIL.BoxedVariable($type);
    return (this.GetKey(/* ref */ type) >= 0);
  };

  function TypeModel_MapType$10 (type) {
    return this.MapType(type, true);
  };

  function TypeModel_MapType$11 (type, demand) {
    return type;
  };

  function TypeModel_PrepareDeserialize (value, /* ref */ type) {
    if ($S00().CallStatic($T04(), "op_Equality", null, type.get(), null)) {
      if (value === null) {
        throw $S01().Construct("type");
      }
      type.set(this.MapType(JSIL.GetType(value)));
    }
    var result = true;
    var underlyingType = $T07().GetUnderlyingType(type.get());
    if ($S02().CallStatic($T04(), "op_Inequality", null, underlyingType, null)) {
      type.set(underlyingType);
      result = false;
    }
    return result;
  };

  function TypeModel_remove_DynamicTypeFormatting (value) {
    var typeFormatEventHandler = this.DynamicTypeFormatting;

    do {
      var typeFormatEventHandler2 = typeFormatEventHandler;
      var value2 = $T02().Remove(typeFormatEventHandler2, value);
      typeFormatEventHandler = $T03().CompareExchange$b1($T01())(/* ref */ new JSIL.MemberReference(this, "DynamicTypeFormatting"), value2, typeFormatEventHandler2);
    } while (typeFormatEventHandler !== typeFormatEventHandler2);
  };

  function TypeModel_ResolveKnownType (name, model, assembly, $exception) {
    if ($T07().IsNullOrEmpty(name)) {
      return null;
    }
    try {
      var type = (JSIL.ReflectionGetTypeInternal($asm08.__Assembly__, name, false, false));
      if ($S02().CallStatic($T04(), "op_Inequality", null, type, null)) {
        var result = type;
        return result;
      }
    } catch ($exception) {
    }
    try {
      var num = (name.indexOf(","));
      var name2 = (((num > 0) ? name.substr(0, num) : name).trim());
      if ($T33().op_Equality(assembly, null)) {
        assembly = $T33().GetCallingAssembly();
      }
      var type2 = ($T33().op_Equality(assembly, null) ? null : assembly.GetType(name2));
      if ($S02().CallStatic($T04(), "op_Inequality", null, type2, null)) {
        result = type2;
        return result;
      }
    } catch ($exception) {
    }
    return null;
  };

  function TypeModel_ResolveListAdd (model, listType, itemType, /* ref */ isList) {
    isList.set($S0E().CallVirtual("IsAssignableFrom", null, model.MapType($thisType.ilist), listType));
    var array = JSIL.Array.New($T04(), [itemType]);
    var instanceMethod = $T07().GetInstanceMethod(listType, "Add", array);
    if ($T2B().op_Equality(instanceMethod, null)) {
      var flag = (listType.get_IsInterface() && 
        $S00().CallStatic($T04(), "op_Equality", null, listType, model.MapType($T37().__Type__).MakeGenericType(array)));
      var type = model.MapType($T38().__Type__).MakeGenericType(array);
      if (!(!flag && !$S0E().CallVirtual("IsAssignableFrom", null, type, listType))) {
        instanceMethod = $T07().GetInstanceMethod(type, "Add", array);
      }
    }
    if ($T2B().op_Equality(instanceMethod, null)) {
      var interfaces = listType.GetInterfaces();

    $loop0: 
      for (var i = 0; i < interfaces.length; i = ((i + 1) | 0)) {
        var type2 = interfaces[i];
        if (!(!(type2.get_Name() == "IProducerConsumerCollection`1") || 
            !type2.get_IsGenericType() || !(type2.GetGenericTypeDefinition().get_FullName() == "System.Collections.Concurrent.IProducerConsumerCollection`1"))) {
          instanceMethod = $T07().GetInstanceMethod(type2, "TryAdd", array);
          if ($T2B().op_Inequality(instanceMethod, null)) {
            break $loop0;
          }
        }
      }
    }
    if ($T2B().op_Equality(instanceMethod, null)) {
      array[0] = model.MapType($T17().__Type__);
      instanceMethod = $T07().GetInstanceMethod(listType, "Add", array);
    }
    if (!(!$T2B().op_Equality(instanceMethod, null) || !isList.get())) {
      instanceMethod = $T07().GetInstanceMethod(model.MapType($thisType.ilist), "Add", array);
    }
    return instanceMethod;
  };

  function TypeModel_ResolveProxies (type) {
    var fullName2 = null;
    if ($S00().CallStatic($T04(), "op_Equality", null, type, null)) {
      return null;
    }
    if (type.get_IsGenericParameter()) {
      return null;
    }
    var underlyingType = $T07().GetUnderlyingType(type);
    if ($S02().CallStatic($T04(), "op_Inequality", null, underlyingType, null)) {
      return underlyingType;
    }
    var fullName = type.get_FullName();
    if (!((fullName === null) || !(System.String.StartsWith(fullName, "System.Data.Entity.DynamicProxies.")))) {
      return type.get_BaseType();
    }
    var interfaces = type.GetInterfaces();

    for (var i = 0; i < interfaces.length; i = ((i + 1) | 0)) {
      if (!(((fullName2 = interfaces[i].get_FullName()) === null) || (!(fullName2 == "NHibernate.Proxy.INHibernateProxy") && 
            !(fullName2 == "NHibernate.Proxy.DynamicProxy.IProxy") && 
            !(fullName2 == "NHibernate.Intercept.IFieldInterceptorAccessor")))) {
        return type.get_BaseType();
      }
    }
    return null;
  };

  function TypeModel_Serialize$12 (dest, value) {
    $S10().CallVirtual("Serialize", null, this, dest, value, null);
  };

  function TypeModel_Serialize$13 (dest, value, context) {
    var protoWriter = new ($T19())(dest, this, context);
    try {
      protoWriter.SetRootObject(value);
      this.SerializeCore(protoWriter, value);
      protoWriter.Close();
    } finally {
      if (protoWriter !== null) {
        $IM00().Call(protoWriter, null);
      }
    }
  };

  function TypeModel_Serialize$14 (dest, value) {
    if (dest === null) {
      throw $S01().Construct("dest");
    }
    dest.CheckDepthFlushlock();
    dest.SetRootObject(value);
    this.SerializeCore(dest, value);
    dest.CheckDepthFlushlock();
    $T19().Flush(dest);
  };

  function TypeModel_SerializeCore (writer, value) {
    if (value === null) {
      throw $S01().Construct("value");
    }
    var type = new JSIL.BoxedVariable(JSIL.GetType(value));
    var key = this.GetKey(/* ref */ type);
    if (key >= 0) {
      $S06().CallVirtual("Serialize", null, this, key, value, writer);
      return;
    }
    if (!this.TrySerializeAuxiliaryType(
        writer, 
        type.get(), 
        $T20().Default, 
        1, 
        value, 
        false
      )) {
      $thisType.ThrowUnexpectedType(type.get());
    }
  };

  function TypeModel_SerializeType (model, type) {
    if (model !== null) {
      var dynamicTypeFormatting = model.DynamicTypeFormatting;
      if (dynamicTypeFormatting !== null) {
        var typeFormatEventArgs = $S11().Construct(type);
        dynamicTypeFormatting(model, typeFormatEventArgs);
        if (!$T07().IsNullOrEmpty(typeFormatEventArgs.get_FormattedName())) {
          return typeFormatEventArgs.get_FormattedName();
        }
      }
    }
    return type.get_AssemblyQualifiedName();
  };

  function TypeModel_SerializeWithLengthPrefix$15 (dest, value, type, style, fieldNumber) {
    this.SerializeWithLengthPrefix(
      dest, 
      value, 
      type, 
      style, 
      fieldNumber, 
      null
    );
  };

  function TypeModel_SerializeWithLengthPrefix$16 (dest, value, $type, style, fieldNumber, context) {
    var type = new JSIL.BoxedVariable($type);
    if ($S00().CallStatic($T04(), "op_Equality", null, type.get(), null)) {
      if (value === null) {
        throw $S01().Construct("value");
      }
      type.set(this.MapType(JSIL.GetType(value)));
    }
    var key = this.GetKey(/* ref */ type);
    var protoWriter = new ($T19())(dest, this, context);
    try {
      switch (style.valueOf()) {
        case 0: 
          $S06().CallVirtual("Serialize", null, this, key, value, protoWriter);
          break;

        case 1: 
        case 2: 
        case 3: 
          $T19().WriteObject(
            value, 
            key, 
            protoWriter, 
            style, 
            fieldNumber
          );
          break;

        default: 
          throw $S12().Construct("style");

      }
      protoWriter.Close();
    } finally {
      if (protoWriter !== null) {
        $IM00().Call(protoWriter, null);
      }
    }
  };

  function TypeModel_TestEnumerableListPatterns (model, candidates, iType) {
    if (iType.get_IsGenericType()) {
      var genericTypeDefinition = iType.GetGenericTypeDefinition();
      if (!(!$S00().CallStatic($T04(), "op_Equality", null, genericTypeDefinition, model.MapType($T37().__Type__)) && 
          !$S00().CallStatic($T04(), "op_Equality", null, genericTypeDefinition, model.MapType($T38().__Type__)) && !(genericTypeDefinition.get_FullName() == "System.Collections.Concurrent.IProducerConsumerCollection`1"))) {
        var genericArguments = iType.GetGenericArguments();
        if (!candidates.Contains(genericArguments[0])) {
          candidates.Add(genericArguments[0]);
        }
      }
    }
  };

  function TypeModel_ThrowCannotCreateInstance (type) {
    throw $S13().Construct(JSIL.ConcatString("No parameterless constructor found for ", ($S00().CallStatic($T04(), "op_Equality", null, type, null) ? "(null)" : type.get_Name())));
  };

  function TypeModel_ThrowUnexpectedSubtype (expected, actual) {
    if ($S02().CallStatic($T04(), "op_Inequality", null, expected, $thisType.ResolveProxies(actual))) {
      throw $S0C().Construct(JSIL.ConcatString("Unexpected sub-type: ", actual.get_FullName()));
    }
  };

  function TypeModel_ThrowUnexpectedType (type) {
    var str = ($S00().CallStatic($T04(), "op_Equality", null, type, null) ? "(unknown)" : type.get_FullName());
    if ($S02().CallStatic($T04(), "op_Inequality", null, type, null)) {
      var baseType = type.get_BaseType();
      if (!(!$S02().CallStatic($T04(), "op_Inequality", null, baseType, null) || 
          !baseType.get_IsGenericType() || !(baseType.GetGenericTypeDefinition().get_Name() == "GeneratedMessage`2"))) {
        throw $S0C().Construct(JSIL.ConcatString("Are you mixing protobuf-net and protobuf-csharp-port? See http://stackoverflow.com/q/11564914; type: ", str));
      }
    }
    throw $S0C().Construct(JSIL.ConcatString("Type is not expected, and no contract can be inferred: ", str));
  };

  function TypeModel_TryDeserializeAuxiliaryType (reader, format, tag, $type, /* ref */ value, skipOtherFields, asListItem, autoCreate, insideList) {
    var type = new JSIL.BoxedVariable($type);
    var num = new JSIL.BoxedVariable(0);
    if ($S00().CallStatic($T04(), "op_Equality", null, type.get(), null)) {
      throw $S01().Construct("type");
    }
    var typeCode = $T07().GetTypeCode(type.get());
    var wireType = this.GetWireType(typeCode, format, /* ref */ type, /* ref */ num);
    var flag = false;
    if (wireType === $T21().None) {
      var type2 = $thisType.GetListItemType(this, type.get());
      if (!(!$S00().CallStatic($T04(), "op_Equality", null, type2, null) || 
          !type.get().get_IsArray() || 
          (type.get().GetArrayRank() !== 1) || !$S02().CallStatic($T04(), "op_Inequality", null, type.get(), $T1E().__Type__))) {
        type2 = type.get().GetElementType();
      }
      if ($S02().CallStatic($T04(), "op_Inequality", null, type2, null)) {
        if (insideList) {
          throw $thisType.CreateNestedListsNotSupported();
        }
        flag = this.TryDeserializeList(
          this, 
          reader, 
          format, 
          tag, 
          type.get(), 
          type2, 
          /* ref */ value
        );
        if (!(flag || !autoCreate)) {
          value.set($thisType.CreateListInstance(type.get(), type2));
        }
        return flag;
      } else {
        $thisType.ThrowUnexpectedType(type.get());
      }
    }

  $loop0: 
    while (!(flag && asListItem)) {
      var num2 = reader.ReadFieldHeader();
      if (num2 <= 0) {
        break $loop0;
      }
      if (num2 !== tag) {
        if (!skipOtherFields) {
          throw $T1D().AddErrorData($S0C().Construct(("Expected field " + (tag).toString() + ", but found " + (num2).toString())), reader);
        }
        reader.SkipField();
      } else {
        flag = true;
        reader.Hint(wireType);
        if (num.get() >= 0) {
          switch (wireType.valueOf()) {
            case 2: 
            case 3: 
              var token = $T1D().StartSubItem(reader);
              value.set($S07().CallVirtual("Deserialize", null, this, num.get(), value.get(), reader));
              $T1D().EndSubItem(token, reader);
              break;

            default: 
              value.set($S07().CallVirtual("Deserialize", null, this, num.get(), value.get(), reader));
              break;

          }
        } else {
          var protoTypeCode = typeCode;
          switch (protoTypeCode.valueOf()) {
            case 3: 
              value.set(reader.ReadBoolean());
              break;

            case 4: 
              value.set(String.fromCharCode(reader.ReadUInt16()));
              break;

            case 5: 
              value.set(reader.ReadSByte());
              break;

            case 6: 
              value.set(reader.ReadByte());
              break;

            case 7: 
              value.set(reader.ReadInt16());
              break;

            case 8: 
              value.set(reader.ReadUInt16());
              break;

            case 9: 
              value.set(reader.ReadInt32());
              break;

            case 10: 
              value.set(reader.ReadUInt32());
              break;

            case 11: 
              value.set(reader.ReadInt64());
              break;

            case 12: 
              value.set(reader.ReadUInt64());
              break;

            case 13: 
              value.set(reader.ReadSingle());
              break;

            case 14: 
              value.set(reader.ReadDouble());
              break;

            case 15: 
              value.set($T3C().ReadDecimal(reader));
              break;

            case 16: 
              value.set($T3C().ReadDateTime(reader).MemberwiseClone());
              break;

            case 17: 
              break;

            case 18: 
              value.set(reader.ReadString());
              break;

            default: 
              switch (protoTypeCode.valueOf()) {
                case 100: 
                  value.set($T3C().ReadTimeSpan(reader).MemberwiseClone());
                  break;

                case 101: 
                  value.set($T1D().AppendBytes($T1E().$Cast(value.get()), reader));
                  break;

                case 102: 
                  value.set($T3C().ReadGuid(reader).MemberwiseClone());
                  break;

                case 103: 
                  value.set($S14().Construct(reader.ReadString()));
                  break;

              }
              break;

          }
        }
      }
    }
    if (!(flag || 
        asListItem || 
        !autoCreate || !$S02().CallStatic($T04(), "op_Inequality", null, type.get(), $T0B().__Type__))) {
      value.set($S03().CallStatic($T15(), "CreateInstance", null, type.get()));
    }
    return flag;
  };

  function TypeModel_TryDeserializeList (model, reader, format, tag, listType, itemType, /* ref */ value) {
    var flag = new JSIL.BoxedVariable(false);
    var methodInfo = $thisType.ResolveListAdd(model, listType, itemType, /* ref */ flag);
    if ($T2B().op_Equality(methodInfo, null)) {
      throw $S04().Construct(JSIL.ConcatString("Unknown list variant: ", listType.get_FullName()));
    }
    var result = false;
    var obj = new JSIL.BoxedVariable(null);
    var list = $T00().$As(value.get());
    var array = (flag.get() ? null : JSIL.Array.New($T17(), 1));
    var basicList = (listType.get_IsArray() ? new ($T29())() : null);

    while (this.TryDeserializeAuxiliaryType(
        reader, 
        format, 
        tag, 
        itemType, 
        /* ref */ obj, 
        true, 
        true, 
        true, 
        true
      )) {
      result = true;
      if (!((value.get() !== null) || (basicList !== null))) {
        value.set($thisType.CreateListInstance(listType, itemType));
        list = $T00().$As(value.get());
      }
      if (list !== null) {
        $IM01().Call(list, null, obj.get());
      } else if (basicList !== null) {
        basicList.Add(obj.get());
      } else {
        array[0] = obj.get();
        methodInfo.Invoke(value.get(), array);
      }
      obj.set(null);
    }
    if (basicList !== null) {
      if (value.get() !== null) {
        if (basicList.get_Count() !== 0) {
          var array2 = $T3F().$Cast(value.get());
          var array3 = (JSIL.Array.New(itemType, ((array2.length + basicList.get_Count()) | 0)));
          $S15().CallStatic($T3F(), "Copy", null, array2, array3, array2.length);
          basicList.CopyTo(array3, array2.length);
          value.set(array3);
        }
      } else {
        array3 = (JSIL.Array.New(itemType, basicList.get_Count()));
        basicList.CopyTo(array3, 0);
        value.set(array3);
      }
    }
    return result;
  };

  function TypeModel_TrySerializeAuxiliaryType (writer, $type, format, tag, value, isInsideList) {
    var type = new JSIL.BoxedVariable($type);
    var num = new JSIL.BoxedVariable(0);
    if ($S00().CallStatic($T04(), "op_Equality", null, type.get(), null)) {
      type.set(JSIL.GetType(value));
    }
    var typeCode = $T07().GetTypeCode(type.get());
    var wireType = this.GetWireType(typeCode, format, /* ref */ type, /* ref */ num);
    if (num.get() >= 0) {
      if ($T07().IsEnum(type.get())) {
        $S06().CallVirtual("Serialize", null, this, num.get(), value, writer);
        return true;
      }
      $T19().WriteFieldHeader(tag, wireType, writer);
      switch (wireType.valueOf()) {
        case -1: 
          throw $T19().CreateException(writer);

        case 2: 
        case 3: 
          var token = $T19().StartSubItem(value, writer);
          $S06().CallVirtual("Serialize", null, this, num.get(), value, writer);
          $T19().EndSubItem(token, writer);
          return true;

      }
      $S06().CallVirtual("Serialize", null, this, num.get(), value, writer);
      return true;
    } else {
      if (wireType !== $T21().None) {
        $T19().WriteFieldHeader(tag, wireType, writer);
      }
      var protoTypeCode = typeCode;
      switch (protoTypeCode.valueOf()) {
        case 3: 
          $T19().WriteBoolean($T05().$Cast(value), writer);
          return true;

        case 4: 
          $T19().WriteUInt16($T36().$Cast(value).charCodeAt(0), writer);
          return true;

        case 5: 
          $T19().WriteSByte($T40().$Cast(value), writer);
          return true;

        case 6: 
          $T19().WriteByte($T1F().$Cast(value), writer);
          return true;

        case 7: 
          $T19().WriteInt16($T41().$Cast(value), writer);
          return true;

        case 8: 
          $T19().WriteUInt16($T42().$Cast(value), writer);
          return true;

        case 9: 
          $T19().WriteInt32($T08().$Cast(value), writer);
          return true;

        case 10: 
          $T19().WriteUInt32($T43().$Cast(value), writer);
          return true;

        case 11: 
          $T19().WriteInt64($T1C().$Cast(value), writer);
          return true;

        case 12: 
          $T19().WriteUInt64($T44().$Cast(value), writer);
          return true;

        case 13: 
          $T19().WriteSingle($T45().$Cast(value), writer);
          return true;

        case 14: 
          $T19().WriteDouble($T46().$Cast(value), writer);
          return true;

        case 15: 
          $T3C().WriteDecimal($T47().$Cast(value), writer);
          return true;

        case 16: 
          $T3C().WriteDateTime($T48().$Cast(value).MemberwiseClone(), writer);
          return true;

        case 17: 
          break;

        case 18: 
          $T19().WriteString($T0B().$Cast(value), writer);
          return true;

        default: 
          switch (protoTypeCode.valueOf()) {
            case 100: 
              $T3C().WriteTimeSpan($T49().$Cast(value).MemberwiseClone(), writer);
              return true;

            case 101: 
              $T19().WriteBytes($T1E().$Cast(value), writer);
              return true;

            case 102: 
              $T3C().WriteGuid($T4A().$Cast(value).MemberwiseClone(), writer);
              return true;

            case 103: 
              $T19().WriteString($T3D().$Cast(value).get_AbsoluteUri(), writer);
              return true;

          }
          break;

      }
      var enumerable = $T28().$As(value);
      if (enumerable === null) {
        return false;
      }
      if (isInsideList) {
        throw $thisType.CreateNestedListsNotSupported();
      }
      var enumerator = $IM02().Call(enumerable, null);
      try {

        while ($IM03().Call(enumerator, null)) {
          var current = $IM04().Call(enumerator, null);
          if (current === null) {
            throw $S16().Construct();
          }
          if (!this.TrySerializeAuxiliaryType(
              writer, 
              null, 
              format, 
              tag, 
              current, 
              true
            )) {
            $thisType.ThrowUnexpectedType(JSIL.GetType(current));
          }
        }
      } finally {
        var disposable = $T1A().$As(enumerator);
        if (disposable !== null) {
          $IM00().Call(disposable, null);
        }
      }
      return true;
    }
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.TypeModel", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      TypeModel__ctor
    );

    $.Method({Static:false, Public:true }, "add_DynamicTypeFormatting", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Meta.TypeFormatEventHandler")], []), 
      TypeModel_add_DynamicTypeFormatting
    );

    $.Method({Static:false, Public:true }, "CanSerialize", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")], []), 
      TypeModel_CanSerialize$00
    );

    $.Method({Static:false, Public:false}, "CanSerialize", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Type"), $.Boolean, 
          $.Boolean, $.Boolean
        ], []), 
      TypeModel_CanSerialize$01
    );

    $.Method({Static:false, Public:true }, "CanSerializeBasicType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")], []), 
      TypeModel_CanSerializeBasicType
    );

    $.Method({Static:false, Public:true }, "CanSerializeContractType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")], []), 
      TypeModel_CanSerializeContractType
    );

    $.Method({Static:true , Public:false}, "CheckDictionaryAccessors", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type")
        ], []), 
      TypeModel_CheckDictionaryAccessors
    );

    $.Method({Static:false, Public:true }, "CreateFormatter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.Serialization.IFormatter"), [$asm07.TypeRef("System.Type")], []), 
      TypeModel_CreateFormatter
    );

    $.Method({Static:true , Public:false}, "CreateListInstance", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")], []), 
      TypeModel_CreateListInstance
    );

    $.Method({Static:true , Public:false}, "CreateNestedListsNotSupported", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [], []), 
      TypeModel_CreateNestedListsNotSupported
    );

    $.Method({Static:false, Public:true }, "DeepClone", 
      new JSIL.MethodSignature($.Object, [$.Object], []), 
      TypeModel_DeepClone
    );

    $.Method({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type")
        ], []), 
      TypeModel_Deserialize$02
    );

    $.Method({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.SerializationContext")
        ], []), 
      TypeModel_Deserialize$03
    );

    $.Method({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type"), $.Int32
        ], []), 
      TypeModel_Deserialize$04
    );

    $.Method({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type"), $.Int32, 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ], []), 
      TypeModel_Deserialize$05
    );

    $.Method({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("ProtoBuf.ProtoReader"), $.Object, 
          $asm07.TypeRef("System.Type")
        ], []), 
      TypeModel_Deserialize$06
    );

    $.Method({Static:false, Public:false}, "DeserializeCore", 
      new JSIL.MethodSignature($.Object, [
          $asm08.TypeRef("ProtoBuf.ProtoReader"), $asm07.TypeRef("System.Type"), 
          $.Object, $.Boolean
        ], []), 
      TypeModel_DeserializeCore
    );

    $.Method({Static:false, Public:true }, "DeserializeItems", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.IEnumerable"), [
          $asm07.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Type"), 
          $asm08.TypeRef("ProtoBuf.PrefixStyle"), $.Int32, 
          $asm08.TypeRef("ProtoBuf.Serializer/TypeResolver")
        ], []), 
      TypeModel_DeserializeItems$07
    );

    $.Method({Static:false, Public:true }, "DeserializeItems", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.IEnumerable"), [
          $asm07.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Type"), 
          $asm08.TypeRef("ProtoBuf.PrefixStyle"), $.Int32, 
          $asm08.TypeRef("ProtoBuf.Serializer/TypeResolver"), $asm08.TypeRef("ProtoBuf.SerializationContext")
        ], []), 
      TypeModel_DeserializeItems$08
    );

    $.Method({Static:false, Public:true }, "DeserializeItems", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm07.TypeRef("System.IO.Stream"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32
        ], ["T"]), 
      TypeModel_DeserializeItems$b1$09
    );

    $.Method({Static:false, Public:true }, "DeserializeItems", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm07.TypeRef("System.IO.Stream"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32, $asm08.TypeRef("ProtoBuf.SerializationContext")
        ], ["T"]), 
      TypeModel_DeserializeItems$b1$0A
    );

    $.Method({Static:true , Public:false}, "DeserializeType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Type, $.String], []), 
      TypeModel_DeserializeType
    );

    $.Method({Static:false, Public:true }, "DeserializeWithLengthPrefix", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32
        ], []), 
      TypeModel_DeserializeWithLengthPrefix$0B
    );

    $.Method({Static:false, Public:true }, "DeserializeWithLengthPrefix", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32, $asm08.TypeRef("ProtoBuf.Serializer/TypeResolver")
        ], []), 
      TypeModel_DeserializeWithLengthPrefix$0C
    );

    $.Method({Static:false, Public:true }, "DeserializeWithLengthPrefix", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32, $asm08.TypeRef("ProtoBuf.Serializer/TypeResolver"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], []), 
      TypeModel_DeserializeWithLengthPrefix$0D
    );

    $.Method({Static:false, Public:false}, "DeserializeWithLengthPrefix", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32, $asm08.TypeRef("ProtoBuf.Serializer/TypeResolver"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ], []), 
      TypeModel_DeserializeWithLengthPrefix$0E
    );

    $.Method({Static:false, Public:false}, "GetKey", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")])], []), 
      TypeModel_GetKey
    );

    $.Method({Static:true , Public:false}, "GetListItemType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.Type, $asm07.TypeRef("System.Type")], []), 
      TypeModel_GetListItemType
    );

    $.Method({Static:false, Public:true , Virtual:true }, "GetSchema", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Type")], []), 
      TypeModel_GetSchema
    );

    $.Method({Static:false, Public:false, Virtual:true }, "GetType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String, $asm07.TypeRef("System.Reflection.Assembly")], []), 
      TypeModel_GetType$0F
    );

    $.Method({Static:false, Public:false}, "GetWireType", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.WireType"), [
          $asm08.TypeRef("ProtoBuf.ProtoTypeCode"), $asm08.TypeRef("ProtoBuf.DataFormat"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], []), 
      TypeModel_GetWireType
    );

    $.Method({Static:false, Public:true }, "IsDefined", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")], []), 
      TypeModel_IsDefined
    );

    $.Method({Static:false, Public:false}, "MapType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Type")], []), 
      TypeModel_MapType$10
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MapType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Type"), $.Boolean], []), 
      TypeModel_MapType$11
    );

    $.Method({Static:false, Public:false}, "PrepareDeserialize", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")])], []), 
      TypeModel_PrepareDeserialize
    );

    $.Method({Static:false, Public:true }, "remove_DynamicTypeFormatting", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Meta.TypeFormatEventHandler")], []), 
      TypeModel_remove_DynamicTypeFormatting
    );

    $.Method({Static:true , Public:false}, "ResolveKnownType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [
          $.String, $.Type, 
          $asm07.TypeRef("System.Reflection.Assembly")
        ], []), 
      TypeModel_ResolveKnownType
    );

    $.Method({Static:true , Public:false}, "ResolveListAdd", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $.Type, $asm07.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ], []), 
      TypeModel_ResolveListAdd
    );

    $.Method({Static:true , Public:false}, "ResolveProxies", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Type")], []), 
      TypeModel_ResolveProxies
    );

    $.Method({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Object], []), 
      TypeModel_Serialize$12
    );

    $.Method({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ], []), 
      TypeModel_Serialize$13
    );

    $.Method({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.ProtoWriter"), $.Object], []), 
      TypeModel_Serialize$14
    );

    $.Method({Static:false, Public:false}, "SerializeCore", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.ProtoWriter"), $.Object], []), 
      TypeModel_SerializeCore
    );

    $.Method({Static:true , Public:false}, "SerializeType", 
      new JSIL.MethodSignature($.String, [$.Type, $asm07.TypeRef("System.Type")], []), 
      TypeModel_SerializeType
    );

    $.Method({Static:false, Public:true }, "SerializeWithLengthPrefix", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32
        ], []), 
      TypeModel_SerializeWithLengthPrefix$15
    );

    $.Method({Static:false, Public:true }, "SerializeWithLengthPrefix", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32, $asm08.TypeRef("ProtoBuf.SerializationContext")
        ], []), 
      TypeModel_SerializeWithLengthPrefix$16
    );

    $.Method({Static:true , Public:false}, "TestEnumerableListPatterns", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm08.TypeRef("ProtoBuf.Meta.BasicList"), 
          $asm07.TypeRef("System.Type")
        ], []), 
      TypeModel_TestEnumerableListPatterns
    );

    $.Method({Static:true , Public:true }, "ThrowCannotCreateInstance", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type")], []), 
      TypeModel_ThrowCannotCreateInstance
    );

    $.Method({Static:true , Public:false}, "ThrowUnexpectedSubtype", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")], []), 
      TypeModel_ThrowUnexpectedSubtype
    );

    $.Method({Static:true , Public:false}, "ThrowUnexpectedType", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type")], []), 
      TypeModel_ThrowUnexpectedType
    );

    $.Method({Static:false, Public:false}, "TryDeserializeAuxiliaryType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("ProtoBuf.ProtoReader"), $asm08.TypeRef("ProtoBuf.DataFormat"), 
          $.Int32, $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $.Boolean, 
          $.Boolean, $.Boolean, 
          $.Boolean
        ], []), 
      TypeModel_TryDeserializeAuxiliaryType
    );

    $.Method({Static:false, Public:false}, "TryDeserializeList", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $asm08.TypeRef("ProtoBuf.ProtoReader"), 
          $asm08.TypeRef("ProtoBuf.DataFormat"), $.Int32, 
          $asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ], []), 
      TypeModel_TryDeserializeList
    );

    $.Method({Static:false, Public:false}, "TrySerializeAuxiliaryType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm08.TypeRef("ProtoBuf.ProtoWriter"), $asm07.TypeRef("System.Type"), 
          $asm08.TypeRef("ProtoBuf.DataFormat"), $.Int32, 
          $.Object, $.Boolean
        ], []), 
      TypeModel_TrySerializeAuxiliaryType
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "ilist", $asm07.TypeRef("System.Type"), $asm07.System.Collections.IList.__Type__); 
    $.Field({Static:false, Public:false}, "DynamicTypeFormatting", $asm08.TypeRef("ProtoBuf.Meta.TypeFormatEventHandler")); 
    function TypeModel__cctor () {
      $thisType.ilist = $T00().__Type__;
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      TypeModel__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.TypeModel/DeserializeItemsIterator */ 

(function DeserializeItemsIterator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.IO.Stream)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.PrefixStyle)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.Serializer_TypeResolver)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.SerializationContext)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.NotSupportedException"), []))) ();
  };

  function DeserializeItemsIterator__ctor$00 (model, source, type, style, expectedField, resolver, context) {
    this.haveObject = true;
    this.source = source;
    this.type = type;
    this.style = style;
    this.expectedField = expectedField;
    this.resolver = resolver;
    this.model = model;
    this.context = context;
  };

  function DeserializeItemsIterator_get_Current$01 () {
    return this.current;
  };

  function DeserializeItemsIterator_MoveNext () {
    var num = new JSIL.BoxedVariable(0);
    if (this.haveObject) {
      this.current = this.model.DeserializeWithLengthPrefix(
        this.source, 
        null, 
        this.type, 
        this.style, 
        this.expectedField, 
        this.resolver, 
        /* ref */ num, 
        /* ref */ new JSIL.MemberReference(this, "haveObject"), 
        this.context
      );
    }
    return this.haveObject;
  };

  function DeserializeItemsIterator_System_Collections_IEnumerable_GetEnumerator () {
    return this;
  };

  function DeserializeItemsIterator_System_Collections_IEnumerator_Reset () {
    throw $S00().Construct();
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.TypeModel/DeserializeItemsIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.IO.Stream"), 
          $asm07.TypeRef("System.Type"), $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32, $asm08.TypeRef("ProtoBuf.Serializer/TypeResolver"), 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ], []), 
      DeserializeItemsIterator__ctor$00
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.Object, [], []), 
      DeserializeItemsIterator_get_Current$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      DeserializeItemsIterator_MoveNext
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.IEnumerator"), [], []), 
      DeserializeItemsIterator_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides(1, "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], []), 
      DeserializeItemsIterator_System_Collections_IEnumerator_Reset
    )
      .Overrides(0, "Reset");

    $.Field({Static:false, Public:false}, "haveObject", $.Boolean); 
    $.Field({Static:false, Public:false}, "current", $.Object); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "source", $asm07.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm07.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "style", $asm08.TypeRef("ProtoBuf.PrefixStyle")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "expectedField", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "resolver", $asm08.TypeRef("ProtoBuf.Serializer/TypeResolver")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "context", $asm08.TypeRef("ProtoBuf.SerializationContext")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerator"), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.TypeModel/DeserializeItemsIterator`1 */ 

(function DeserializeItemsIterator$b1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.IO.Stream)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.PrefixStyle)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.SerializationContext)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel_DeserializeItemsIterator)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Object"), [], []))) ();
  };

  function DeserializeItemsIterator$b1__ctor (model, source, style, expectedField, context) {
    $T05().prototype._ctor.call(this, 
      model, 
      source, 
      model.MapType($thisType.T.get(this)), 
      style, 
      expectedField, 
      null, 
      context
    );
  };

  function DeserializeItemsIterator$b1_get_Current () {
    return $thisType.T.get(this).$Cast($S00().Call($T05().prototype, "get_Current", null, this));
  };

  function DeserializeItemsIterator$b1_System_Collections_Generic_IEnumerable$lT$g_GetEnumerator () {
    return this;
  };

  function DeserializeItemsIterator$b1_System_IDisposable_Dispose () {
  };

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("ProtoBuf.Meta.TypeModel/DeserializeItemsIterator"), 
      Name: "ProtoBuf.Meta.TypeModel/DeserializeItemsIterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 5, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.IO.Stream"), 
          $asm08.TypeRef("ProtoBuf.PrefixStyle"), $.Int32, 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ], []), 
      DeserializeItemsIterator$b1__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature(new JSIL.GenericParameter("T", "ProtoBuf.Meta.TypeModel/DeserializeItemsIterator`1"), [], []), 
      DeserializeItemsIterator$b1_get_Current
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "ProtoBuf.Meta.TypeModel/DeserializeItemsIterator`1")]), [], []), 
      DeserializeItemsIterator$b1_System_Collections_Generic_IEnumerable$lT$g_GetEnumerator
    )
      .Overrides(5, "GetEnumerator");

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], []), 
      DeserializeItemsIterator$b1_System_IDisposable_Dispose
    )
      .Overrides(3, "Dispose");

    $.Property({Static:false, Public:true , Virtual:true }, "Current", new JSIL.GenericParameter("T", "ProtoBuf.Meta.TypeModel/DeserializeItemsIterator`1"));

    $.ImplementInterfaces(
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [new JSIL.GenericParameter("T", "ProtoBuf.Meta.TypeModel/DeserializeItemsIterator`1")]), 
      /* 3 */ $asm07.TypeRef("System.IDisposable"), 
      /* 4 */ $asm07.TypeRef("System.Collections.IEnumerator"), 
      /* 5 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "ProtoBuf.Meta.TypeModel/DeserializeItemsIterator`1")]), 
      /* 6 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.Meta.TypeModel/CallbackType */ 

JSIL.MakeEnum(
  "ProtoBuf.Meta.TypeModel/CallbackType", false, {
    BeforeSerialize: 0, 
    AfterSerialize: 1, 
    BeforeDeserialize: 2, 
    AfterDeserialize: 3
  }, false
);

/* class ProtoBuf.Meta.TypeModel/Formatter */ 

(function Formatter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.IO.Stream)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.SerializationContext)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Runtime.Serialization.SerializationBinder)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Runtime.Serialization.StreamingContext)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Runtime.Serialization.ISurrogateSelector)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentNullException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")], []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.SerializationContext"), [$asm07.TypeRef("System.Runtime.Serialization.StreamingContext")], []))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Object"), 
        $asm08.TypeRef("ProtoBuf.SerializationContext")
      ], []))) ();
  };

  function Formatter__ctor (model, type) {
    if (model === null) {
      throw $S00().Construct("model");
    }
    if ($S01().CallStatic($T01(), "op_Equality", null, type, null)) {
      throw $S00().Construct("type");
    }
    this.model = model;
    this.type = type;
  };

  function Formatter_Deserialize (source) {
    return this.model.Deserialize(
      source, 
      null, 
      this.type, 
      -1, 
      $S02().CallStatic($T04(), "op_Implicit", null, this.get_Context())
    );
  };

  function Formatter_get_Binder () {
    return this.binder;
  };

  function Formatter_get_Context () {
    return this.context;
  };

  function Formatter_get_SurrogateSelector () {
    return this.surrogateSelector;
  };

  function Formatter_Serialize (destination, graph) {
    $S03().CallVirtual("Serialize", null, this.model, destination, graph, $S02().CallStatic($T04(), "op_Implicit", null, this.get_Context()));
  };

  function Formatter_set_Binder (value) {
    this.binder = value;
  };

  function Formatter_set_Context (value) {
    this.context = value;
  };

  function Formatter_set_SurrogateSelector (value) {
    this.surrogateSelector = value;
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.TypeModel/Formatter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type")], []), 
      Formatter__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.IO.Stream")], []), 
      Formatter_Deserialize
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Binder", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.Serialization.SerializationBinder"), [], []), 
      Formatter_get_Binder
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Context", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.Serialization.StreamingContext"), [], []), 
      Formatter_get_Context
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_SurrogateSelector", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.Serialization.ISurrogateSelector"), [], []), 
      Formatter_get_SurrogateSelector
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Object], []), 
      Formatter_Serialize
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Binder", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationBinder")], []), 
      Formatter_set_Binder
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_Context", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.StreamingContext")], []), 
      Formatter_set_Context
    );

    $.Method({Static:false, Public:true , Virtual:true }, "set_SurrogateSelector", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.ISurrogateSelector")], []), 
      Formatter_set_SurrogateSelector
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm07.TypeRef("System.Type")); 
    $.Field({Static:false, Public:false}, "binder", $asm07.TypeRef("System.Runtime.Serialization.SerializationBinder")); 
    $.Field({Static:false, Public:false}, "context", $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")); 
    $.Field({Static:false, Public:false}, "surrogateSelector", $asm07.TypeRef("System.Runtime.Serialization.ISurrogateSelector")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Binder", $asm07.TypeRef("System.Runtime.Serialization.SerializationBinder"));

    $.Property({Static:false, Public:true , Virtual:true }, "Context", $asm07.TypeRef("System.Runtime.Serialization.StreamingContext"));

    $.Property({Static:false, Public:true , Virtual:true }, "SurrogateSelector", $asm07.TypeRef("System.Runtime.Serialization.ISurrogateSelector"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Runtime.Serialization.IFormatter")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ProtoIncludeAttribute */ 

(function ProtoIncludeAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Attribute)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.ProtoBuf.DataFormat)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.String")], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")], []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentNullException"), [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")]))) ();
  };

  function ProtoIncludeAttribute__ctor$00 (tag, knownType) {
    $S00().Call($thisType.prototype, "_ctor", null, this, tag, ($S01().CallStatic($T01(), "op_Equality", null, knownType, null) ? "" : knownType.get_AssemblyQualifiedName()));
  };

  function ProtoIncludeAttribute__ctor$01 (tag, knownTypeName) {
    $T03().prototype._ctor.call(this);
    if (tag <= 0) {
      throw $S02().Construct("tag", "Tags must be positive integers");
    }
    if ($T05().IsNullOrEmpty(knownTypeName)) {
      throw $S03().Construct("knownTypeName", "Known type cannot be blank");
    }
    this.tag = tag;
    this.knownTypeName = knownTypeName;
  };

  function ProtoIncludeAttribute_get_DataFormat () {
    return this.dataFormat;
  };

  function ProtoIncludeAttribute_get_KnownType () {
    return $T07().ResolveKnownType(this.get_KnownTypeName(), null, null);
  };

  function ProtoIncludeAttribute_get_KnownTypeName () {
    return this.knownTypeName;
  };

  function ProtoIncludeAttribute_get_Tag () {
    return this.tag;
  };

  function ProtoIncludeAttribute_set_DataFormat (value) {
    this.dataFormat = value;
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoIncludeAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Type")], []), 
      ProtoIncludeAttribute__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.String], []), 
      ProtoIncludeAttribute__ctor$01
    );

    $.Method({Static:false, Public:true }, "get_DataFormat", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.DataFormat"), [], []), 
      ProtoIncludeAttribute_get_DataFormat
    );

    $.Method({Static:false, Public:true }, "get_KnownType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [], []), 
      ProtoIncludeAttribute_get_KnownType
    );

    $.Method({Static:false, Public:true }, "get_KnownTypeName", 
      new JSIL.MethodSignature($.String, [], []), 
      ProtoIncludeAttribute_get_KnownTypeName
    );

    $.Method({Static:false, Public:true }, "get_Tag", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ProtoIncludeAttribute_get_Tag
    );

    $.Method({Static:false, Public:true }, "set_DataFormat", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.DataFormat")], []), 
      ProtoIncludeAttribute_set_DataFormat
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "tag", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "knownTypeName", $.String); 
    $.Field({Static:false, Public:false}, "dataFormat", $asm08.TypeRef("ProtoBuf.DataFormat")); 
    $.Property({Static:false, Public:true }, "Tag", $.Int32);

    $.Property({Static:false, Public:true }, "KnownTypeName", $.String);

    $.Property({Static:false, Public:true }, "KnownType", $asm07.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "DataFormat", $asm08.TypeRef("ProtoBuf.DataFormat"))
      .Attribute($asm09.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm08.ProtoBuf.DataFormat.Default]; });

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Class", "Interface")]; });

})();

/* class ProtoBuf.Helpers */ 

(function Helpers$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Text.StringBuilder)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize(System.Array.Of($asm07.System.Byte))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Buffer)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm07.System.Type))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.Reflection.BindingFlags)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Reflection.PropertyInfo)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.Reflection.MethodInfo)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.Reflection.MethodBase)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.PropertyInfo))) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.FieldInfo))) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize(System.Array.Of($asm07.System.Reflection.MemberInfo))) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.Reflection.MemberInfo)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm07.System.Reflection.FieldInfo)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm07.System.Reflection.MemberTypes)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm07.System.TypeCode)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm08.ProtoBuf.ProtoTypeCode)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm07.System.TimeSpan)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm07.System.Guid)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm09.System.Uri)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm07.System.Nullable)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm07.System.Double)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm07.System.Enum)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm09.System.Diagnostics.Trace)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Reflection.BindingFlags")], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.PropertyInfo"), [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Reflection.BindingFlags")], []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")], []))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Type")], []))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.TypeRef("System.String")], []))) ();
  };

  function Helpers__ctor () {
  };

  function Helpers_AppendLine (builder) {
    return builder.AppendLine();
  };

  function Helpers_BlockCopy (from, fromIndex, to, toIndex, count) {
    $T04().BlockCopy(
      from, 
      fromIndex, 
      to, 
      toIndex, 
      count
    );
  };

  function Helpers_DebugAssert$00 (condition, message) {
  };

  function Helpers_DebugAssert$01 (condition, message, args) {
  };

  function Helpers_DebugAssert$02 (condition) {
  };

  function Helpers_DebugWriteLine$03 (message, obj) {
  };

  function Helpers_DebugWriteLine$04 (message) {
  };

  function Helpers_GetConstructor (type, parameterTypes, nonPublic) {
    return type.GetConstructor((nonPublic ? $T0A().$Flags("Instance", "NonPublic", "Public") : $T0A().$Flags("Instance", "Public")), null, parameterTypes, null);
  };

  function Helpers_GetConstructors (type, nonPublic) {
    return type.GetConstructors((nonPublic ? $T0A().$Flags("Instance", "NonPublic", "Public") : $T0A().$Flags("Instance", "Public")));
  };

  function Helpers_GetGetMethod (property, nonPublic, allowInternal) {
    if ($T0B().op_Equality(property, null)) {
      return null;
    }
    var methodInfo = property.GetGetMethod(nonPublic);
    if (!(!$T0C().op_Equality(methodInfo, null) || 
        nonPublic || !allowInternal)) {
      methodInfo = property.GetGetMethod(true);
      if (!(!$T0C().op_Equality(methodInfo, null) || 
          methodInfo.get_IsAssembly() || methodInfo.get_IsFamilyOrAssembly())) {
        methodInfo = null;
      }
    }
    return methodInfo;
  };

  function Helpers_GetInstanceFieldsAndProperties (type, publicOnly) {
    var bindingAttr = (publicOnly ? $T0A().$Flags("Instance", "Public") : $T0A().$Flags("Instance", "NonPublic", "Public"));
    var properties = type.GetProperties(bindingAttr);
    var fields = type.GetFields(bindingAttr);
    var array = JSIL.Array.New($T11(), ((fields.length + properties.length) | 0));
    JSIL.Array.CopyTo(properties, array, 0);
    JSIL.Array.CopyTo(fields, array, properties.length);
    return array;
  };

  function Helpers_GetInstanceMethod$05 (declaringType, name) {
    return $S00().CallVirtual("GetMethod", null, declaringType, name, $T0A().$Flags("Instance", "NonPublic", "Public"));
  };

  function Helpers_GetInstanceMethod$06 (declaringType, name, types) {
    if (types === null) {
      types = $thisType.EmptyTypes;
    }
    return declaringType.GetMethod(
      name, 
      $T0A().$Flags("Instance", "NonPublic", "Public"), 
      null, 
      types, 
      null
    );
  };

  function Helpers_GetMemberType (member) {
    var memberType = member.get_MemberType();
    if (memberType === $T13().Field) {
      return $T12().$Cast(member).get_FieldType();
    }
    if (memberType !== $T13().Property) {
      return null;
    }
    return $T0B().$Cast(member).get_PropertyType();
  };

  function Helpers_GetProperty (type, name, nonPublic) {
    return $S01().CallVirtual("GetProperty", null, type, name, (nonPublic ? $T0A().$Flags("Instance", "NonPublic", "Public") : $T0A().$Flags("Instance", "Public")));
  };

  function Helpers_GetSetMethod (property, nonPublic, allowInternal) {
    if ($T0B().op_Equality(property, null)) {
      return null;
    }
    var methodInfo = property.GetSetMethod(nonPublic);
    if (!(!$T0C().op_Equality(methodInfo, null) || 
        nonPublic || !allowInternal)) {
      methodInfo = property.GetGetMethod(true);
      if (!(!$T0C().op_Equality(methodInfo, null) || 
          methodInfo.get_IsAssembly() || methodInfo.get_IsFamilyOrAssembly())) {
        methodInfo = null;
      }
    }
    return methodInfo;
  };

  function Helpers_GetStaticMethod (declaringType, name) {
    return $S00().CallVirtual("GetMethod", null, declaringType, name, $T0A().$Flags("NonPublic", "Public", "Static"));
  };

  function Helpers_GetTypeCode (type) {
    var typeCode = $T00().GetTypeCode(type);
    switch (typeCode.valueOf()) {
      case 0: 
      case 3: 
      case 4: 
      case 5: 
      case 6: 
      case 7: 
      case 8: 
      case 9: 
      case 10: 
      case 11: 
      case 12: 
      case 13: 
      case 14: 
      case 15: 
      case 16: 
      case 18: 
        return $T15().$Cast(typeCode);

    }
    if ($S02().CallStatic($T00(), "op_Equality", null, type, $T16().__Type__)) {
      return $T15().TimeSpan;
    }
    if ($S02().CallStatic($T00(), "op_Equality", null, type, $T17().__Type__)) {
      return $T15().Guid;
    }
    if ($S02().CallStatic($T00(), "op_Equality", null, type, $T18().__Type__)) {
      return $T15().Uri;
    }
    if ($S02().CallStatic($T00(), "op_Equality", null, type, $T02().__Type__)) {
      return $T15().ByteArray;
    }
    if ($S02().CallStatic($T00(), "op_Equality", null, type, $T00().__Type__)) {
      return $T15().Type;
    }
    return $T15().Unknown;
  };

  function Helpers_GetUnderlyingType (type) {
    return $T19().GetUnderlyingType(type);
  };

  function Helpers_IsAssignableFrom (target, type) {
    return $S03().CallVirtual("IsAssignableFrom", null, target, type);
  };

  function Helpers_IsEnum (type) {
    return type.get_IsEnum();
  };

  function Helpers_IsInfinity$07 (value) {
    return $T1A().IsInfinity(value);
  };

  function Helpers_IsInfinity$08 (value) {
    return $T1B().IsInfinity(value);
  };

  function Helpers_IsNullOrEmpty (value) {
    return ((value === null) || (value.length === 0));
  };

  function Helpers_IsSubclassOf (type, baseClass) {
    return type.IsSubclassOf(baseClass);
  };

  function Helpers_IsValueType (type) {
    return type.get_IsValueType();
  };

  function Helpers_ParseEnum (type, value) {
    return $T1C().Parse(type, value, true);
  };

  function Helpers_TraceWriteLine (message) {
    $S04().CallStatic($T1D(), "WriteLine", null, message);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Helpers", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      Helpers__ctor
    );

    $.Method({Static:true , Public:true }, "AppendLine", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Text.StringBuilder"), [$asm07.TypeRef("System.Text.StringBuilder")], []), 
      Helpers_AppendLine
    );

    $.Method({Static:true , Public:true }, "BlockCopy", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ], []), 
      Helpers_BlockCopy
    );

    $.Method({Static:true , Public:true }, "DebugAssert", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String], []), 
      Helpers_DebugAssert$00
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:true }, "DebugAssert", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ], []), 
      Helpers_DebugAssert$01
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:true }, "DebugAssert", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      Helpers_DebugAssert$02
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:true }, "DebugWriteLine", 
      new JSIL.MethodSignature(null, [$.String, $.Object], []), 
      Helpers_DebugWriteLine$03
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:true }, "DebugWriteLine", 
      new JSIL.MethodSignature(null, [$.String], []), 
      Helpers_DebugWriteLine$04
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.Method({Static:true , Public:false}, "GetConstructor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.ConstructorInfo"), [
          $asm07.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), 
          $.Boolean
        ], []), 
      Helpers_GetConstructor
    );

    $.Method({Static:true , Public:false}, "GetConstructors", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.ConstructorInfo")]), [$asm07.TypeRef("System.Type"), $.Boolean], []), 
      Helpers_GetConstructors
    );

    $.Method({Static:true , Public:false}, "GetGetMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $asm07.TypeRef("System.Reflection.PropertyInfo"), $.Boolean, 
          $.Boolean
        ], []), 
      Helpers_GetGetMethod
    );

    $.Method({Static:true , Public:false}, "GetInstanceFieldsAndProperties", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Reflection.MemberInfo")]), [$asm07.TypeRef("System.Type"), $.Boolean], []), 
      Helpers_GetInstanceFieldsAndProperties
    );

    $.Method({Static:true , Public:false}, "GetInstanceMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.Type"), $.String], []), 
      Helpers_GetInstanceMethod$05
    );

    $.Method({Static:true , Public:false}, "GetInstanceMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $asm07.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")])
        ], []), 
      Helpers_GetInstanceMethod$06
    );

    $.Method({Static:true , Public:false}, "GetMemberType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Reflection.MemberInfo")], []), 
      Helpers_GetMemberType
    );

    $.Method({Static:true , Public:false}, "GetProperty", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.PropertyInfo"), [
          $asm07.TypeRef("System.Type"), $.String, 
          $.Boolean
        ], []), 
      Helpers_GetProperty
    );

    $.Method({Static:true , Public:false}, "GetSetMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [
          $asm07.TypeRef("System.Reflection.PropertyInfo"), $.Boolean, 
          $.Boolean
        ], []), 
      Helpers_GetSetMethod
    );

    $.Method({Static:true , Public:false}, "GetStaticMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.Type"), $.String], []), 
      Helpers_GetStaticMethod
    );

    $.Method({Static:true , Public:true }, "GetTypeCode", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.ProtoTypeCode"), [$asm07.TypeRef("System.Type")], []), 
      Helpers_GetTypeCode
    );

    $.Method({Static:true , Public:false}, "GetUnderlyingType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$asm07.TypeRef("System.Type")], []), 
      Helpers_GetUnderlyingType
    );

    $.Method({Static:true , Public:false}, "IsAssignableFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")], []), 
      Helpers_IsAssignableFrom
    );

    $.Method({Static:true , Public:false}, "IsEnum", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")], []), 
      Helpers_IsEnum
    );

    $.Method({Static:true , Public:true }, "IsInfinity", 
      new JSIL.MethodSignature($.Boolean, [$.Single], []), 
      Helpers_IsInfinity$07
    );

    $.Method({Static:true , Public:true }, "IsInfinity", 
      new JSIL.MethodSignature($.Boolean, [$.Double], []), 
      Helpers_IsInfinity$08
    );

    $.Method({Static:true , Public:true }, "IsNullOrEmpty", 
      new JSIL.MethodSignature($.Boolean, [$.String], []), 
      Helpers_IsNullOrEmpty
    );

    $.Method({Static:true , Public:false}, "IsSubclassOf", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")], []), 
      Helpers_IsSubclassOf
    );

    $.Method({Static:true , Public:false}, "IsValueType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Type")], []), 
      Helpers_IsValueType
    );

    $.Method({Static:true , Public:false}, "ParseEnum", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type"), $.String], []), 
      Helpers_ParseEnum
    );

    $.Method({Static:true , Public:true }, "TraceWriteLine", 
      new JSIL.MethodSignature(null, [$.String], []), 
      Helpers_TraceWriteLine
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["TRACE"]; });

    $.Field({Static:true , Public:true , ReadOnly:true }, "EmptyTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Type")]), function ($pi) {
        return $asm07.System.Type.EmptyTypes;
      }); 
    function Helpers__cctor () {
      $thisType.EmptyTypes = $T00().EmptyTypes;
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      Helpers__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.ProtoTypeCode */ 

JSIL.MakeEnum(
  "ProtoBuf.ProtoTypeCode", false, {
    Empty: 0, 
    Unknown: 1, 
    Boolean: 3, 
    Char: 4, 
    SByte: 5, 
    Byte: 6, 
    Int16: 7, 
    UInt16: 8, 
    Int32: 9, 
    UInt32: 10, 
    Int64: 11, 
    UInt64: 12, 
    Single: 13, 
    Double: 14, 
    Decimal: 15, 
    DateTime: 16, 
    String: 18, 
    TimeSpan: 100, 
    ByteArray: 101, 
    Guid: 102, 
    Uri: 103, 
    Type: 104
  }, false
);

/* class ProtoBuf.ProtoContractAttribute */ 

(function ProtoContractAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Attribute)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.ImplicitFields)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm07.TypeRef("System.String")]))) ();
  };

  function ProtoContractAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ProtoContractAttribute_get_AsReferenceDefault () {
    return this.HasFlag(32);
  };

  function ProtoContractAttribute_get_DataMemberOffset () {
    return this.dataMemberOffset;
  };

  function ProtoContractAttribute_get_EnumPassthru () {
    return this.HasFlag(64);
  };

  function ProtoContractAttribute_get_EnumPassthruHasValue () {
    return this.HasFlag(128);
  };

  function ProtoContractAttribute_get_IgnoreListHandling () {
    return this.HasFlag(16);
  };

  function ProtoContractAttribute_get_ImplicitFields () {
    return this.implicitFields;
  };

  function ProtoContractAttribute_get_ImplicitFirstTag () {
    return this.implicitFirstTag;
  };

  function ProtoContractAttribute_get_InferTagFromName () {
    return this.HasFlag(1);
  };

  function ProtoContractAttribute_get_InferTagFromNameHasValue () {
    return this.HasFlag(2);
  };

  function ProtoContractAttribute_get_Name () {
    return this.$name;
  };

  function ProtoContractAttribute_get_SkipConstructor () {
    return this.HasFlag(8);
  };

  function ProtoContractAttribute_get_UseProtoMembersOnly () {
    return this.HasFlag(4);
  };

  function ProtoContractAttribute_HasFlag (flag) {
    return ((this.flags & flag) === flag);
  };

  function ProtoContractAttribute_set_AsReferenceDefault (value) {
    this.SetFlag(32, value);
  };

  function ProtoContractAttribute_set_DataMemberOffset (value) {
    this.dataMemberOffset = value;
  };

  function ProtoContractAttribute_set_EnumPassthru (value) {
    this.SetFlag(64, value);
    this.SetFlag(128, true);
  };

  function ProtoContractAttribute_set_IgnoreListHandling (value) {
    this.SetFlag(16, value);
  };

  function ProtoContractAttribute_set_ImplicitFields (value) {
    this.implicitFields = value;
  };

  function ProtoContractAttribute_set_ImplicitFirstTag (value) {
    if (value < 1) {
      throw $S00().Construct("ImplicitFirstTag");
    }
    this.implicitFirstTag = value;
  };

  function ProtoContractAttribute_set_InferTagFromName (value) {
    this.SetFlag(1, value);
    this.SetFlag(2, true);
  };

  function ProtoContractAttribute_set_Name (value) {
    this.$name = value;
  };

  function ProtoContractAttribute_set_SkipConstructor (value) {
    this.SetFlag(8, value);
  };

  function ProtoContractAttribute_set_UseProtoMembersOnly (value) {
    this.SetFlag(4, value);
  };

  function ProtoContractAttribute_SetFlag (flag, value) {
    if (value) {
      this.flags = (this.flags | flag);
      return;
    }
    this.flags = (this.flags & (~flag | 0));
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoContractAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ProtoContractAttribute__ctor
    );

    $.Method({Static:false, Public:true }, "get_AsReferenceDefault", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ProtoContractAttribute_get_AsReferenceDefault
    );

    $.Method({Static:false, Public:true }, "get_DataMemberOffset", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ProtoContractAttribute_get_DataMemberOffset
    );

    $.Method({Static:false, Public:true }, "get_EnumPassthru", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ProtoContractAttribute_get_EnumPassthru
    );

    $.Method({Static:false, Public:false}, "get_EnumPassthruHasValue", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ProtoContractAttribute_get_EnumPassthruHasValue
    );

    $.Method({Static:false, Public:true }, "get_IgnoreListHandling", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ProtoContractAttribute_get_IgnoreListHandling
    );

    $.Method({Static:false, Public:true }, "get_ImplicitFields", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.ImplicitFields"), [], []), 
      ProtoContractAttribute_get_ImplicitFields
    );

    $.Method({Static:false, Public:true }, "get_ImplicitFirstTag", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ProtoContractAttribute_get_ImplicitFirstTag
    );

    $.Method({Static:false, Public:true }, "get_InferTagFromName", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ProtoContractAttribute_get_InferTagFromName
    );

    $.Method({Static:false, Public:false}, "get_InferTagFromNameHasValue", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ProtoContractAttribute_get_InferTagFromNameHasValue
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], []), 
      ProtoContractAttribute_get_Name
    );

    $.Method({Static:false, Public:true }, "get_SkipConstructor", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ProtoContractAttribute_get_SkipConstructor
    );

    $.Method({Static:false, Public:true }, "get_UseProtoMembersOnly", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ProtoContractAttribute_get_UseProtoMembersOnly
    );

    $.Method({Static:false, Public:false}, "HasFlag", 
      new JSIL.MethodSignature($.Boolean, [$.Byte], []), 
      ProtoContractAttribute_HasFlag
    );

    $.Method({Static:false, Public:true }, "set_AsReferenceDefault", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      ProtoContractAttribute_set_AsReferenceDefault
    );

    $.Method({Static:false, Public:true }, "set_DataMemberOffset", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      ProtoContractAttribute_set_DataMemberOffset
    );

    $.Method({Static:false, Public:true }, "set_EnumPassthru", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      ProtoContractAttribute_set_EnumPassthru
    );

    $.Method({Static:false, Public:true }, "set_IgnoreListHandling", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      ProtoContractAttribute_set_IgnoreListHandling
    );

    $.Method({Static:false, Public:true }, "set_ImplicitFields", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.ImplicitFields")], []), 
      ProtoContractAttribute_set_ImplicitFields
    );

    $.Method({Static:false, Public:true }, "set_ImplicitFirstTag", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      ProtoContractAttribute_set_ImplicitFirstTag
    );

    $.Method({Static:false, Public:true }, "set_InferTagFromName", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      ProtoContractAttribute_set_InferTagFromName
    );

    $.Method({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], []), 
      ProtoContractAttribute_set_Name
    );

    $.Method({Static:false, Public:true }, "set_SkipConstructor", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      ProtoContractAttribute_set_SkipConstructor
    );

    $.Method({Static:false, Public:true }, "set_UseProtoMembersOnly", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      ProtoContractAttribute_set_UseProtoMembersOnly
    );

    $.Method({Static:false, Public:false}, "SetFlag", 
      new JSIL.MethodSignature(null, [$.Byte, $.Boolean], []), 
      ProtoContractAttribute_SetFlag
    );

    $.Constant({Static:true , Public:false}, "OPTIONS_InferTagFromName", 1); 
    $.Constant({Static:true , Public:false}, "OPTIONS_InferTagFromNameHasValue", 2); 
    $.Constant({Static:true , Public:false}, "OPTIONS_UseProtoMembersOnly", 4); 
    $.Constant({Static:true , Public:false}, "OPTIONS_SkipConstructor", 8); 
    $.Constant({Static:true , Public:false}, "OPTIONS_IgnoreListHandling", 16); 
    $.Constant({Static:true , Public:false}, "OPTIONS_AsReferenceDefault", 32); 
    $.Constant({Static:true , Public:false}, "OPTIONS_EnumPassthru", 64); 
    $.Constant({Static:true , Public:false}, "OPTIONS_EnumPassthruHasValue", 128); 
    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "implicitFirstTag", $.Int32); 
    $.Field({Static:false, Public:false}, "implicitFields", $asm08.TypeRef("ProtoBuf.ImplicitFields")); 
    $.Field({Static:false, Public:false}, "dataMemberOffset", $.Int32); 
    $.Field({Static:false, Public:false}, "flags", $.Byte); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "ImplicitFirstTag", $.Int32);

    $.Property({Static:false, Public:true }, "UseProtoMembersOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "IgnoreListHandling", $.Boolean);

    $.Property({Static:false, Public:true }, "ImplicitFields", $asm08.TypeRef("ProtoBuf.ImplicitFields"));

    $.Property({Static:false, Public:true }, "InferTagFromName", $.Boolean);

    $.Property({Static:false, Public:false}, "InferTagFromNameHasValue", $.Boolean);

    $.Property({Static:false, Public:true }, "DataMemberOffset", $.Int32);

    $.Property({Static:false, Public:true }, "SkipConstructor", $.Boolean);

    $.Property({Static:false, Public:true }, "AsReferenceDefault", $.Boolean);

    $.Property({Static:false, Public:true }, "EnumPassthru", $.Boolean);

    $.Property({Static:false, Public:false}, "EnumPassthruHasValue", $.Boolean);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Class", "Enum", "Interface", "Struct")]; });

})();

/* class ProtoBuf.Meta.BasicList */ 

(function BasicList$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList_Node)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList_NodeEnumerator)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Void)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Array)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm07.System.Int32))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.ArgumentException)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList_Group)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList_MatchPredicate)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.String)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentNullException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentException"), [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")]))) ();
  };

  function BasicList__ctor () {
    this.head = $thisType.nil;
  };

  function BasicList_Add (value) {
    return (((this.head = this.head.Append(value)).get_Length() - 1) | 0);
  };

  function BasicList_Contains (value) {

    for (var enumerator = this.GetEnumerator(); enumerator.MoveNext(); ) {
      var current = enumerator.get_Current();
      if (JSIL.ObjectEquals(current, value)) {
        return true;
      }
    }
    return false;
  };

  function BasicList_CopyTo (array, offset) {
    this.head.CopyTo(array, offset);
  };

  function BasicList_get_Count () {
    return this.head.get_Length();
  };

  function BasicList_get_Item (index) {
    return this.head.get_Item(index);
  };

  function BasicList_GetContiguousGroups (keys, values) {
    if (keys === null) {
      throw $S00().Construct("keys");
    }
    if (values === null) {
      throw $S00().Construct("values");
    }
    if (values.length < keys.length) {
      throw $S01().Construct("Not all keys are covered by values", "values");
    }
    var basicList = new $thisType();
    var group = null;

    for (var i = 0; i < keys.length; i = ((i + 1) | 0)) {
      if (!((i !== 0) && (keys[i] === keys[((i - 1) | 0)]))) {
        group = null;
      }
      if (group === null) {
        group = new ($T0A())(keys[i]);
        basicList.Add(group);
      }
      group.Items.Add(values[i]);
    }
    return basicList;
  };

  function BasicList_GetEnumerator () {
    return new ($T02())(this.head);
  };

  function BasicList_IndexOf (predicate, ctx) {
    return this.head.IndexOf(predicate, ctx);
  };

  function BasicList_IndexOfReference (instance) {
    return this.head.IndexOfReference(instance);
  };

  function BasicList_IndexOfString (value) {
    return this.head.IndexOfString(value);
  };

  function BasicList_System_Collections_IEnumerable_GetEnumerator () {
    return new ($T02())(this.head);
  };

  function BasicList_Trim () {
    this.head = this.head.Trim();
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.BasicList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      BasicList__ctor
    );

    $.Method({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.Object], []), 
      BasicList_Add
    );

    $.Method({Static:false, Public:false}, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object], []), 
      BasicList_Contains
    );

    $.Method({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32], []), 
      BasicList_CopyTo
    );

    $.Method({Static:false, Public:true }, "get_Count", 
      new JSIL.MethodSignature($.Int32, [], []), 
      BasicList_get_Count
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32], []), 
      BasicList_get_Item
    );

    $.Method({Static:true , Public:false}, "GetContiguousGroups", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Object])], []), 
      BasicList_GetContiguousGroups
    );

    $.Method({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Meta.BasicList/NodeEnumerator"), [], []), 
      BasicList_GetEnumerator
    );

    $.Method({Static:false, Public:false}, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm08.TypeRef("ProtoBuf.Meta.BasicList/MatchPredicate"), $.Object], []), 
      BasicList_IndexOf
    );

    $.Method({Static:false, Public:false}, "IndexOfReference", 
      new JSIL.MethodSignature($.Int32, [$.Object], []), 
      BasicList_IndexOfReference
    );

    $.Method({Static:false, Public:false}, "IndexOfString", 
      new JSIL.MethodSignature($.Int32, [$.String], []), 
      BasicList_IndexOfString
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.IEnumerator"), [], []), 
      BasicList_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides(0, "GetEnumerator");

    $.Method({Static:false, Public:true }, "Trim", 
      new JSIL.MethodSignature(null, [], []), 
      BasicList_Trim
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "nil", $asm08.TypeRef("ProtoBuf.Meta.BasicList/Node")); 
    $.Field({Static:false, Public:false}, "head", $asm08.TypeRef("ProtoBuf.Meta.BasicList/Node")); 
    function BasicList__cctor () {
      $thisType.nil = new ($T00())(null, 0);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      BasicList__cctor
    );

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct ProtoBuf.Meta.BasicList/NodeEnumerator */ 

(function NodeEnumerator$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList_Node)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Int32)) ();
  };

  function NodeEnumerator__ctor (node) {
    this.position = -1;
    this.node = node;
  };

  function NodeEnumerator_get_Current () {
    return this.node.get_Item(this.position);
  };

  function NodeEnumerator_MoveNext () {
    var length = this.node.get_Length();
    return ((this.position <= length) && ((this.position = ((this.position + 1) | 0)) < length));
  };

  function NodeEnumerator_System_Collections_IEnumerator_Reset () {
    this.position = -1;
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "ProtoBuf.Meta.BasicList/NodeEnumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.Meta.BasicList/Node")], []), 
      NodeEnumerator__ctor
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.Object, [], []), 
      NodeEnumerator_get_Current
    );

    $.Method({Static:false, Public:true , Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      NodeEnumerator_MoveNext
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], []), 
      NodeEnumerator_System_Collections_IEnumerator_Reset
    )
      .Overrides(0, "Reset");

    $.Field({Static:false, Public:false}, "position", $.Int32); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "node", $asm08.TypeRef("ProtoBuf.Meta.BasicList/Node")); 
    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.IEnumerator")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.BasicList/Node */ 

(function Node$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize(System.Array.Of($asm07.System.Object))) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Array)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Void)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList_MatchPredicate)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.TypeRef("System.Array"), $asm07.TypeRef("System.Array"), 
        $asm07.TypeRef("System.Int32")
      ], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.TypeRef("System.Array"), $asm07.TypeRef("System.Int32"), 
        $asm07.TypeRef("System.Array"), $asm07.TypeRef("System.Int32"), 
        $asm07.TypeRef("System.Int32")
      ], []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.InvalidOperationException"), []))) ();
  };

  function Node__ctor (data, length) {
    this.data = data;
    this.$length = length;
  };

  function Node_Append (value) {
    var num = ((this.$length + 1) | 0);
    if (this.data === null) {
      var array = JSIL.Array.New($T02(), 10);
    } else if (this.$length === this.data.length) {
      array = JSIL.Array.New($T02(), ((this.data.length * 2) | 0));
      $S00().CallStatic($T03(), "Copy", null, this.data, array, this.$length);
    } else {
      array = this.data;
    }
    array[this.$length] = value;
    return new $thisType(array, num);
  };

  function Node_Clear () {
    if (this.data !== null) {
      JSIL.Array.Erase(this.data, $T02().__Type__, 0, this.data.length);
    }
    this.$length = 0;
  };

  function Node_CopyTo (array, offset) {
    if (this.$length > 0) {
      $S01().CallStatic($T03(), "Copy", null, 
        this.data, 
        0, 
        array, 
        offset, 
        this.$length
      );
    }
  };

  function Node_get_Item (index) {
    if (!((index < 0) || (index >= this.$length))) {
      return this.data[index];
    }
    throw $S02().Construct("index");
  };

  function Node_get_Length () {
    return this.$length;
  };

  function Node_IndexOf (predicate, ctx) {

    for (var i = 0; i < this.$length; i = ((i + 1) | 0)) {
      if (predicate(this.data[i], ctx)) {
        return i;
      }
    }
    return -1;
  };

  function Node_IndexOfReference (instance) {

    for (var i = 0; i < this.$length; i = ((i + 1) | 0)) {
      if (instance === this.data[i]) {
        return i;
      }
    }
    return -1;
  };

  function Node_IndexOfString (value) {

    for (var i = 0; i < this.$length; i = ((i + 1) | 0)) {
      if (value == $T07().$Cast(this.data[i])) {
        return i;
      }
    }
    return -1;
  };

  function Node_RemoveLastWithMutate () {
    if (this.$length === 0) {
      throw $S03().Construct();
    }
    this.$length = ((this.$length - 1) | 0);
  };

  function Node_set_Item (index, value) {
    if (!((index < 0) || (index >= this.$length))) {
      this.data[index] = value;
      return;
    }
    throw $S02().Construct("index");
  };

  function Node_Trim () {
    if (!((this.$length !== 0) && (this.$length !== this.data.length))) {
      return this;
    }
    var destinationArray = JSIL.Array.New($T02(), this.$length);
    $S00().CallStatic($T03(), "Copy", null, this.data, destinationArray, this.$length);
    return new $thisType(destinationArray, this.$length);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.BasicList/Node", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Object]), $.Int32], []), 
      Node__ctor
    );

    $.Method({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($.Type, [$.Object], []), 
      Node_Append
    );

    $.Method({Static:false, Public:false}, "Clear", 
      new JSIL.MethodSignature(null, [], []), 
      Node_Clear
    );

    $.Method({Static:false, Public:false}, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Array"), $.Int32], []), 
      Node_CopyTo
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32], []), 
      Node_get_Item
    );

    $.Method({Static:false, Public:true }, "get_Length", 
      new JSIL.MethodSignature($.Int32, [], []), 
      Node_get_Length
    );

    $.Method({Static:false, Public:false}, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm08.TypeRef("ProtoBuf.Meta.BasicList/MatchPredicate"), $.Object], []), 
      Node_IndexOf
    );

    $.Method({Static:false, Public:false}, "IndexOfReference", 
      new JSIL.MethodSignature($.Int32, [$.Object], []), 
      Node_IndexOfReference
    );

    $.Method({Static:false, Public:false}, "IndexOfString", 
      new JSIL.MethodSignature($.Int32, [$.String], []), 
      Node_IndexOfString
    );

    $.Method({Static:false, Public:true }, "RemoveLastWithMutate", 
      new JSIL.MethodSignature(null, [], []), 
      Node_RemoveLastWithMutate
    );

    $.Method({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object], []), 
      Node_set_Item
    );

    $.Method({Static:false, Public:true }, "Trim", 
      new JSIL.MethodSignature($.Type, [], []), 
      Node_Trim
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "data", $jsilcore.TypeRef("System.Array", [$.Object])); 
    $.Field({Static:false, Public:false}, "$length", $.Int32); 
    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "Length", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* delegate ProtoBuf.Meta.BasicList/MatchPredicate */ 

JSIL.MakeDelegate("ProtoBuf.Meta.BasicList/MatchPredicate", false, []);

/* class ProtoBuf.Meta.BasicList/Group */ 

(function Group$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList)) ();
  };

  function Group__ctor (first) {
    this.First = first;
    this.Items = new ($T01())();
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.Meta.BasicList/Group", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      Group__ctor
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "First", $.Int32); 
    $.Field({Static:false, Public:true , ReadOnly:true }, "Items", $asm08.TypeRef("ProtoBuf.Meta.BasicList")); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.Meta.MutableList */ 

(function MutableList$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList_Node)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Object)) ();
  };

  function MutableList__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function MutableList_Clear () {
    this.head.Clear();
  };

  function MutableList_get_Item (index) {
    return this.head.get_Item(index);
  };

  function MutableList_RemoveLast () {
    this.head.RemoveLastWithMutate();
  };

  function MutableList_set_Item (index, value) {
    this.head.set_Item(index, value);
  };

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("ProtoBuf.Meta.BasicList"), 
      Name: "ProtoBuf.Meta.MutableList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      MutableList__ctor
    );

    $.Method({Static:false, Public:true }, "Clear", 
      new JSIL.MethodSignature(null, [], []), 
      MutableList_Clear
    );

    $.Method({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32], []), 
      MutableList_get_Item
    );

    $.Method({Static:false, Public:true }, "RemoveLast", 
      new JSIL.MethodSignature(null, [], []), 
      MutableList_RemoveLast
    );

    $.Method({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object], []), 
      MutableList_set_Item
    );

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class ProtoBuf.ProtoBeforeSerializationAttribute */ 

(function ProtoBeforeSerializationAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Attribute)) ();
  };

  function ProtoBeforeSerializationAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoBeforeSerializationAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ProtoBeforeSerializationAttribute__ctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; })
    .Attribute($asm09.TypeRef("System.ComponentModel.ImmutableObjectAttribute"), function () { return [true]; });

})();

/* class ProtoBuf.ProtoAfterSerializationAttribute */ 

(function ProtoAfterSerializationAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Attribute)) ();
  };

  function ProtoAfterSerializationAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoAfterSerializationAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ProtoAfterSerializationAttribute__ctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.ComponentModel.ImmutableObjectAttribute"), function () { return [true]; })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; });

})();

/* class ProtoBuf.ProtoBeforeDeserializationAttribute */ 

(function ProtoBeforeDeserializationAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Attribute)) ();
  };

  function ProtoBeforeDeserializationAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoBeforeDeserializationAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ProtoBeforeDeserializationAttribute__ctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; })
    .Attribute($asm09.TypeRef("System.ComponentModel.ImmutableObjectAttribute"), function () { return [true]; });

})();

/* class ProtoBuf.ProtoAfterDeserializationAttribute */ 

(function ProtoAfterDeserializationAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Attribute)) ();
  };

  function ProtoAfterDeserializationAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoAfterDeserializationAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ProtoAfterDeserializationAttribute__ctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm09.TypeRef("System.ComponentModel.ImmutableObjectAttribute"), function () { return [true]; })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; });

})();

/* struct ProtoBuf.SubItemToken */ 

(function SubItemToken$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };

  function SubItemToken__ctor (value) {
    this.value = value;
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.ValueType"), 
      Name: "ProtoBuf.SubItemToken", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      SubItemToken__ctor
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "value", $.Int32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ServiceModel.ProtoEndpointBehavior */ 

(function ProtoEndpointBehavior$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.ServiceModel.Description.ServiceEndpoint)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerator$b1.Of($asm0F.System.ServiceModel.Description.OperationDescription))) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Collections.ObjectModel.Collection$b1.Of($asm0F.System.ServiceModel.Description.OperationDescription))) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm0F.System.ServiceModel.Description.ContractDescription)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Collections.IEnumerator)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm0F.System.ServiceModel.Description.OperationDescription)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm0F.System.ServiceModel.Description.DataContractSerializerOperationBehavior)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm0F.System.Collections.Generic.KeyedByTypeCollection$b1.Of($asm0F.System.ServiceModel.Description.IOperationBehavior))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Collections.ObjectModel.Collection$b1.Of($asm0F.System.ServiceModel.Description.IOperationBehavior))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.ServiceModel.ProtoOperationBehavior)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm0F.System.ServiceModel.Channels.BindingParameterCollection)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm0F.System.ServiceModel.Dispatcher.ClientRuntime)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm0F.System.ServiceModel.Dispatcher.EndpointDispatcher)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.ServiceModel.Description.OperationDescription")], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature("!!0", [], ["T"]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm0F.TypeRef("System.ServiceModel.Description.IOperationBehavior")], []))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.ServiceModel.Description.IOperationBehavior")], []))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.ServiceModel.Description.ServiceEndpoint")], []))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.Collections.IEnumerator.MoveNext)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm07.System.Collections.Generic.IEnumerator$b1.Of($asm0F.System.ServiceModel.Description.OperationDescription).get_Current)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };

  function ProtoEndpointBehavior__ctor () {
  };

  function ProtoEndpointBehavior_ReplaceDataContractSerializerOperationBehavior$00 (serviceEndpoint) {
    var enumerator = serviceEndpoint.get_Contract().get_Operations().GetEnumerator();
    try {

      while ($IM00().Call(enumerator, null)) {
        var current = $IM01().Call(enumerator, null);
        $S00().CallStatic($thisType, "ReplaceDataContractSerializerOperationBehavior", null, current);
      }
    } finally {
      if (enumerator !== null) {
        $IM02().Call(enumerator, null);
      }
    }
  };

  function ProtoEndpointBehavior_ReplaceDataContractSerializerOperationBehavior$01 (description) {
    var dataContractSerializerOperationBehavior = $S01().Call($T08().prototype, "Find$b1", [$asm0F.System.ServiceModel.Description.DataContractSerializerOperationBehavior], description.get_Behaviors());
    if (dataContractSerializerOperationBehavior !== null) {
      $S02().CallVirtual("Remove", null, description.get_Behaviors(), dataContractSerializerOperationBehavior);
      var protoOperationBehavior = new ($T0A())(description);
      protoOperationBehavior.set_MaxItemsInObjectGraph(dataContractSerializerOperationBehavior.get_MaxItemsInObjectGraph());
      $S03().CallVirtual("Add", null, description.get_Behaviors(), protoOperationBehavior);
    }
  };

  function ProtoEndpointBehavior_System_ServiceModel_Description_IEndpointBehavior_AddBindingParameters (endpoint, bindingParameters) {
  };

  function ProtoEndpointBehavior_System_ServiceModel_Description_IEndpointBehavior_ApplyClientBehavior (endpoint, clientRuntime) {
    $S04().CallStatic($thisType, "ReplaceDataContractSerializerOperationBehavior", null, endpoint);
  };

  function ProtoEndpointBehavior_System_ServiceModel_Description_IEndpointBehavior_ApplyDispatchBehavior (endpoint, endpointDispatcher) {
    $S04().CallStatic($thisType, "ReplaceDataContractSerializerOperationBehavior", null, endpoint);
  };

  function ProtoEndpointBehavior_System_ServiceModel_Description_IEndpointBehavior_Validate (endpoint) {
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.ServiceModel.ProtoEndpointBehavior", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ProtoEndpointBehavior__ctor
    );

    $.Method({Static:true , Public:false}, "ReplaceDataContractSerializerOperationBehavior", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.ServiceModel.Description.ServiceEndpoint")], []), 
      ProtoEndpointBehavior_ReplaceDataContractSerializerOperationBehavior$00
    );

    $.Method({Static:true , Public:false}, "ReplaceDataContractSerializerOperationBehavior", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.ServiceModel.Description.OperationDescription")], []), 
      ProtoEndpointBehavior_ReplaceDataContractSerializerOperationBehavior$01
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.ServiceModel.Description.ServiceEndpoint"), $asm0F.TypeRef("System.ServiceModel.Channels.BindingParameterCollection")], []), 
      ProtoEndpointBehavior_System_ServiceModel_Description_IEndpointBehavior_AddBindingParameters
    )
      .Overrides(0, "AddBindingParameters");

    $.Method({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.ServiceModel.Description.ServiceEndpoint"), $asm0F.TypeRef("System.ServiceModel.Dispatcher.ClientRuntime")], []), 
      ProtoEndpointBehavior_System_ServiceModel_Description_IEndpointBehavior_ApplyClientBehavior
    )
      .Overrides(0, "ApplyClientBehavior");

    $.Method({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.ServiceModel.Description.ServiceEndpoint"), $asm0F.TypeRef("System.ServiceModel.Dispatcher.EndpointDispatcher")], []), 
      ProtoEndpointBehavior_System_ServiceModel_Description_IEndpointBehavior_ApplyDispatchBehavior
    )
      .Overrides(0, "ApplyDispatchBehavior");

    $.Method({Static:false, Public:false, Virtual:true }, "System.ServiceModel.Description.IEndpointBehavior.Validate", 
      new JSIL.MethodSignature(null, [$asm0F.TypeRef("System.ServiceModel.Description.ServiceEndpoint")], []), 
      ProtoEndpointBehavior_System_ServiceModel_Description_IEndpointBehavior_Validate
    )
      .Overrides(0, "Validate");

    $.ImplementInterfaces(
      /* 0 */ $asm0F.TypeRef("System.ServiceModel.Description.IEndpointBehavior")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ExtensibleUtil */ 

(function ExtensibleUtil$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.IExtensible)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.DataFormat)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.IExtension)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.IO.Stream)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm08.ProtoBuf.ExtensibleUtil_$lGetExtendedValues$gd__0)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentNullException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.InvalidOperationException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm08.ProtoBuf.IExtensible.GetExtensionObject)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm08.ProtoBuf.IExtension.BeginAppend)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm08.ProtoBuf.IExtension.EndAppend)) ();
  };

  function ExtensibleUtil_AppendExtendValue (model, instance, tag, format, value) {
    if (instance === null) {
      throw $S00().Construct("instance");
    }
    if (value === null) {
      throw $S00().Construct("value");
    }
    var extensionObject = $IM00().Call(instance, null, true);
    if (extensionObject === null) {
      throw $S01().Construct("No extension object available; appended data would be lost.");
    }
    var commit = false;
    var stream = $IM01().Call(extensionObject, null);
    try {
      var protoWriter = new ($T0A())(stream, model, null);
      try {
        model.TrySerializeAuxiliaryType(
          protoWriter, 
          null, 
          format, 
          tag, 
          value, 
          false
        );
        protoWriter.Close();
      } finally {
        if (protoWriter !== null) {
          $IM02().Call(protoWriter, null);
        }
      }
      commit = true;
    } finally {
      $IM03().Call(extensionObject, null, stream, commit);
    }
  };

  function ExtensibleUtil_GetExtendedValues (model, type, instance, tag, format, singleton, allowDefinedTag) {
    var $lGetExtendedValues$gd__ = new ($T0D())(-2);
    $lGetExtendedValues$gd__.$model = model;
    $lGetExtendedValues$gd__.$type = type;
    $lGetExtendedValues$gd__.$instance = instance;
    $lGetExtendedValues$gd__.$tag = tag;
    $lGetExtendedValues$gd__.$format = format;
    $lGetExtendedValues$gd__.$singleton = singleton;
    return $lGetExtendedValues$gd__;
  };

  JSIL.MakeStaticClass("ProtoBuf.ExtensibleUtil", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:false}, "AppendExtendValue", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm08.TypeRef("ProtoBuf.IExtensible"), 
          $.Int32, $asm08.TypeRef("ProtoBuf.DataFormat"), 
          $.Object
        ], []), 
      ExtensibleUtil_AppendExtendValue
    );

    $.Method({Static:true , Public:false}, "GetExtendedValues", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.IEnumerable"), [
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm07.TypeRef("System.Type"), 
          $asm08.TypeRef("ProtoBuf.IExtensible"), $.Int32, 
          $asm08.TypeRef("ProtoBuf.DataFormat"), $.Boolean, 
          $.Boolean
        ], []), 
      ExtensibleUtil_GetExtendedValues
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ExtensibleUtil/<GetExtendedValues>d__0 */ 

(function $lGetExtendedValues$gd__0$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Threading.Thread)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.IExtension)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Exception)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm08.ProtoBuf.IExtensible)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.ProtoBuf.SerializationContext)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.NotSupportedException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentNullException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.NotSupportedException"), []))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm08.ProtoBuf.IExtension.EndQuery)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm08.ProtoBuf.IExtensible.GetExtensionObject)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm08.ProtoBuf.IExtension.BeginQuery)) ();
  };

  function $lGetExtendedValues$gd__0__ctor ($l$g1__state) {
    this.$state = $l$g1__state;
    this.$initialThreadId = $T01().get_CurrentThread().get_ManagedThreadId();
  };

  function $lGetExtendedValues$gd__0_$l$gm__Finally6 () {
    this.$state = -1;
    $T02().Recycle(this.reader);
    $IM00().Call(this.extn, null, this.stream);
  };

  function $lGetExtendedValues$gd__0_MoveNext ($exception) {
    try {

      var $label0 = 0;
    $labelgroup0: 
      while (true) {
        switch ($label0) {
          case 0: /* $entry0 */ 
            switch (this.$state) {
              case 0: 
                this.$state = -1;
                if (this.instance === null) {
                  throw $S00().Construct("instance");
                }
                if (this.tag <= 0) {
                  throw $S01().Construct("tag");
                }
                this.extn = $IM01().Call(this.instance, null, false);
                if (this.extn === null) {
                  break $labelgroup0;
                }
                this.stream = $IM02().Call(this.extn, null);
                this.value = null;
                this.reader = null;
                this.$state = 1;
                this.ctx = new ($T08())();
                this.reader = $T02().Create(this.stream, this.model, this.ctx, -1);
                break;

              case 1: 
                break $labelgroup0;

              case 2: 
                this.$state = 1;
                this.value = null;
                break;

              case 3: 
                this.$state = 1;
                $label0 = 1 /* goto IL_153 */ ;
                continue $labelgroup0;

              default: 
                break $labelgroup0;

            }

            while (this.model.TryDeserializeAuxiliaryType(
                this.reader, 
                this.format, 
                this.tag, 
                this.type, 
                /* ref */ new JSIL.MemberReference(this, "value"), 
                true, 
                false, 
                false, 
                false
              ) && (this.value !== null)) {
              if (!this.singleton) {
                this.$current = this.value;
                this.$state = 2;
                var result = true;
                return result;
              }
            }
            if (!(!this.singleton || (this.value === null))) {
              this.$current = this.value;
              this.$state = 3;
              result = true;
              return result;
            }

            $label0 = 1 /* goto IL_153 */ ;
            continue $labelgroup0;
          case 1: /* IL_153 */ 
            this.$l$gm__Finally6();
            break $labelgroup0;

        }
      }
      /* Original label IL_159 */ 
      result = false;
    } catch ($exception) {
      this.System_IDisposable_Dispose();
      throw $exception;
    }
    return result;
  };

  function $lGetExtendedValues$gd__0_System_Collections_Generic_IEnumerable$lSystem_Object$g_GetEnumerator () {
    if (!(($T01().get_CurrentThread().get_ManagedThreadId() !== this.$initialThreadId) || (this.$state !== -2))) {
      this.$state = 0;
      var $lGetExtendedValues$gd__ = this;
    } else {
      $lGetExtendedValues$gd__ = new $thisType(0);
    }
    $lGetExtendedValues$gd__.model = this.$model;
    $lGetExtendedValues$gd__.type = this.$type;
    $lGetExtendedValues$gd__.instance = this.$instance;
    $lGetExtendedValues$gd__.tag = this.$tag;
    $lGetExtendedValues$gd__.format = this.$format;
    $lGetExtendedValues$gd__.singleton = this.$singleton;
    return $lGetExtendedValues$gd__;
  };

  function $lGetExtendedValues$gd__0_System_Collections_Generic_IEnumerator$lSystem_Object$g_get_Current () {
    return this.$current;
  };

  function $lGetExtendedValues$gd__0_System_Collections_IEnumerable_GetEnumerator () {
    return this.System_Collections_Generic_IEnumerable$lSystem_Object$g_GetEnumerator();
  };

  function $lGetExtendedValues$gd__0_System_Collections_IEnumerator_get_Current () {
    return this.$current;
  };

  function $lGetExtendedValues$gd__0_System_Collections_IEnumerator_Reset () {
    throw $S02().Construct();
  };

  function $lGetExtendedValues$gd__0_System_IDisposable_Dispose () {
    switch (this.$state) {
      case 1: 
      case 2: 
      case 3: 
        try {
        } finally {
          this.$l$gm__Finally6();
        }
        return;

      default: 
        return;

    }
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.ExtensibleUtil/<GetExtendedValues>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      $lGetExtendedValues$gd__0__ctor
    )
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false}, "$l$gm__Finally6", 
      new JSIL.MethodSignature(null, [], []), 
      $lGetExtendedValues$gd__0_$l$gm__Finally6
    );

    $.Method({Static:false, Public:false, Virtual:true }, "MoveNext", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      $lGetExtendedValues$gd__0_MoveNext
    )
      .Overrides(3, "MoveNext");

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Object$g.GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), [], []), 
      $lGetExtendedValues$gd__0_System_Collections_Generic_IEnumerable$lSystem_Object$g_GetEnumerator
    )
      .Overrides(0, "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.get_Current", 
      new JSIL.MethodSignature($.Object, [], []), 
      $lGetExtendedValues$gd__0_System_Collections_Generic_IEnumerator$lSystem_Object$g_get_Current
    )
      .Overrides(2, "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Collections.IEnumerator"), [], []), 
      $lGetExtendedValues$gd__0_System_Collections_IEnumerable_GetEnumerator
    )
      .Overrides(1, "GetEnumerator")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      new JSIL.MethodSignature($.Object, [], []), 
      $lGetExtendedValues$gd__0_System_Collections_IEnumerator_get_Current
    )
      .Overrides(3, "get_Current")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      new JSIL.MethodSignature(null, [], []), 
      $lGetExtendedValues$gd__0_System_Collections_IEnumerator_Reset
    )
      .Overrides(3, "Reset")
      .Attribute($asm07.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], []), 
      $lGetExtendedValues$gd__0_System_IDisposable_Dispose
    )
      .Overrides(4, "Dispose");

    $.Field({Static:false, Public:false}, "$current", $.Object); 
    $.Field({Static:false, Public:false}, "$state", $.Int32); 
    $.Field({Static:false, Public:false}, "$initialThreadId", $.Int32); 
    $.Field({Static:false, Public:true }, "model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel")); 
    $.Field({Static:false, Public:true }, "$model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel")); 
    $.Field({Static:false, Public:true }, "type", $asm07.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "$type", $asm07.TypeRef("System.Type")); 
    $.Field({Static:false, Public:true }, "instance", $asm08.TypeRef("ProtoBuf.IExtensible")); 
    $.Field({Static:false, Public:true }, "$instance", $asm08.TypeRef("ProtoBuf.IExtensible")); 
    $.Field({Static:false, Public:true }, "tag", $.Int32); 
    $.Field({Static:false, Public:true }, "$tag", $.Int32); 
    $.Field({Static:false, Public:true }, "format", $asm08.TypeRef("ProtoBuf.DataFormat")); 
    $.Field({Static:false, Public:true }, "$format", $asm08.TypeRef("ProtoBuf.DataFormat")); 
    $.Field({Static:false, Public:true }, "singleton", $.Boolean); 
    $.Field({Static:false, Public:true }, "$singleton", $.Boolean); 
    $.Field({Static:false, Public:true }, "extn", $asm08.TypeRef("ProtoBuf.IExtension")); 
    $.Field({Static:false, Public:true }, "stream", $asm07.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:true }, "value", $.Object); 
    $.Field({Static:false, Public:true }, "reader", $asm08.TypeRef("ProtoBuf.ProtoReader")); 
    $.Field({Static:false, Public:true }, "ctx", $asm08.TypeRef("ProtoBuf.SerializationContext")); 
    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Object$g.Current", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object]), 
      /* 1 */ $asm07.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Object]), 
      /* 3 */ $asm07.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm07.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* enum ProtoBuf.WireType */ 

JSIL.MakeEnum(
  "ProtoBuf.WireType", true, {
    None: -1, 
    Variant: 0, 
    Fixed64: 1, 
    String: 2, 
    StartGroup: 3, 
    EndGroup: 4, 
    Fixed32: 5, 
    SignedVariant: 8
  }, false
);

/* enum ProtoBuf.DataFormat */ 

JSIL.MakeEnum(
  "ProtoBuf.DataFormat", true, {
    Default: 0, 
    ZigZag: 1, 
    TwosComplement: 2, 
    FixedSize: 3, 
    Group: 4
  }, false
);

/* class ProtoBuf.ServiceModel.ProtoBehaviorExtension */ 

(function ProtoBehaviorExtension$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm0F.System.ServiceModel.Configuration.BehaviorExtensionElement)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.ProtoBuf.ServiceModel.ProtoEndpointBehavior)) ();
  };

  function ProtoBehaviorExtension__ctor () {
    $T00().prototype._ctor.call(this);
  };

  function ProtoBehaviorExtension_CreateBehavior () {
    return new ($T01())();
  };

  function ProtoBehaviorExtension_get_BehaviorType () {
    return $T01().__Type__;
  };

  JSIL.MakeType({
      BaseType: $asm0F.TypeRef("System.ServiceModel.Configuration.BehaviorExtensionElement"), 
      Name: "ProtoBuf.ServiceModel.ProtoBehaviorExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ProtoBehaviorExtension__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "CreateBehavior", 
      new JSIL.MethodSignature($.Object, [], []), 
      ProtoBehaviorExtension_CreateBehavior
    );

    $.Method({Static:false, Public:true , Virtual:true }, "get_BehaviorType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [], []), 
      ProtoBehaviorExtension_get_BehaviorType
    );

    $.Property({Static:false, Public:true , Virtual:true }, "BehaviorType", $asm07.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ProtoWriter */ 

(function ProtoWriter$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Text.UTF8Encoding)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.IO.Stream)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.SerializationContext)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.NetObjectCache)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.ArgumentException)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.BufferPool)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.ProtoBuf.WireType)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm08.ProtoBuf.IExtensible)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.ProtoBuf.IExtension)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm08.ProtoBuf.Meta.MutableList)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm08.ProtoBuf.Meta.BasicList)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm08.ProtoBuf.ProtoException)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.Void)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize(System.Array.Of($asm07.System.Byte))) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm08.ProtoBuf.SubItemToken)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm08.ProtoBuf.PrefixStyle)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm07.System.Double)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm07.System.BitConverter)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm07.System.OverflowException)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize(System.Array.Of($asm07.System.String))) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm07.System.Int16)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm08.ProtoBuf.DataFormat)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm07.System.SByte)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm07.System.Text.Encoding)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm07.System.UInt16)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm07.System.UInt64)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Text.UTF8Encoding"), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentNullException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentException"), [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.InvalidOperationException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.TypeRef("ProtoBuf.ProtoException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Byte")]), [$asm07.TypeRef("System.Double")], []))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Single")], []))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Double")], []))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.OverflowException"), []))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.UInt32"), [$asm07.TypeRef("System.Int32")], []))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.UInt64"), [$asm07.TypeRef("System.Int64")], []))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Object"), 
        $asm08.TypeRef("ProtoBuf.ProtoWriter")
      ], []))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Byte")]), [$asm07.TypeRef("System.Single")], []))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [$asm07.TypeRef("System.String")], []))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [
        $asm07.TypeRef("System.String"), $asm07.TypeRef("System.Int32"), 
        $asm07.TypeRef("System.Int32"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Byte")]), 
        $asm07.TypeRef("System.Int32")
      ], []))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm08.ProtoBuf.IExtensible.GetExtensionObject)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm08.ProtoBuf.IExtension.BeginQuery)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm08.ProtoBuf.IExtension.EndQuery)) ();
  };

  function ProtoWriter__ctor (dest, model, context) {
    this.netCache = new ($T04())();
    if (dest === null) {
      throw $S01().Construct("dest");
    }
    if (!dest.get_CanWrite()) {
      throw $S02().Construct("Cannot write to stream", "dest");
    }
    this.dest = dest;
    this.ioBuffer = $T07().GetBuffer();
    this.model = model;
    this.wireType = $T08().None;
    if (context === null) {
      context = $T03().get_Default();
    } else {
      context.Freeze();
    }
    this.context = context;
  };

  function ProtoWriter_AppendExtensionData (instance, writer) {
    if (instance === null) {
      throw $S01().Construct("instance");
    }
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    if (writer.wireType !== $T08().None) {
      throw $thisType.CreateException(writer);
    }
    var extensionObject = $IM00().Call(instance, null, false);
    if (extensionObject !== null) {
      var stream = $IM01().Call(extensionObject, null);
      try {
        $thisType.CopyRawFromStream(stream, writer);
      } finally {
        $IM02().Call(extensionObject, null, stream);
      }
    }
  };

  function ProtoWriter_CheckDepthFlushlock () {
    if (!((this.depth === 0) && (this.flushLock === 0))) {
      throw $S03().Construct("The writer is in an incomplete state");
    }
  };

  function ProtoWriter_CheckRecursionStackAndPush (instance) {
    var num = 0;
    if (this.recursionStack === null) {
      this.recursionStack = new ($T0E())();
    } else if (!((instance === null) || ((num = this.recursionStack.IndexOfReference(instance)) < 0))) {
      throw $S04().Construct(("Possible recursion detected (offset: " + (((this.recursionStack.get_Count() - num) | 0)).toString() + " level(s)): " + instance.toString()));
    }
    this.recursionStack.Add(instance);
  };

  function ProtoWriter_Close () {
    if (!((this.depth === 0) && (this.flushLock === 0))) {
      throw $S03().Construct("Unable to close stream in an incomplete state");
    }
    this.Dispose();
  };

  function ProtoWriter_CopyRawFromStream (source, writer) {
    var array = writer.ioBuffer;
    var num = ((array.length - writer.ioIndex) | 0);

    for (var num2 = 1; (num > 0) && ((num2 = source.Read(array, writer.ioIndex, num)) > 0); ) {
      writer.ioIndex = ((writer.ioIndex + num2) | 0);
      writer.position = ((writer.position + num2) | 0);
      num = ((num - num2) | 0);
    }
    if (num2 <= 0) {
      return;
    }
    if (writer.flushLock === 0) {
      $thisType.Flush(writer);

      while ((num2 = source.Read(array, 0, array.length)) > 0) {
        writer.dest.Write(array, 0, num2);
        writer.position = ((writer.position + num2) | 0);
      }
      return;
    }

  $loop2: 
    while (true) {
      $thisType.DemandSpace(128, writer);
      if ((num2 = source.Read(writer.ioBuffer, writer.ioIndex, ((writer.ioBuffer.length - writer.ioIndex) | 0))) <= 0) {
        break $loop2;
      }
      writer.position = ((writer.position + num2) | 0);
      writer.ioIndex = ((writer.ioIndex + num2) | 0);
    }
  };

  function ProtoWriter_CreateException (writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    return $S04().Construct(("Invalid serialization operation with wire-type " + writer.wireType.toString() + " at position " + (writer.position).toString()));
  };

  function ProtoWriter_DemandSpace (required, writer) {
    if (((writer.ioBuffer.length - writer.ioIndex) | 0) < required) {
      if (writer.flushLock === 0) {
        $thisType.Flush(writer);
        if (((writer.ioBuffer.length - writer.ioIndex) | 0) >= required) {
          return;
        }
      }
      $T07().ResizeAndFlushLeft(/* ref */ new JSIL.MemberReference(writer, "ioBuffer"), ((required + writer.ioIndex) | 0), 0, writer.ioIndex);
    }
  };

  function ProtoWriter_Dispose () {
    if (this.dest !== null) {
      $thisType.Flush(this);
      this.dest = null;
    }
    this.model = null;
    $T07().ReleaseBufferToPool(/* ref */ new JSIL.MemberReference(this, "ioBuffer"));
  };

  function ProtoWriter_EndSubItem$00 (token, writer) {
    $thisType.EndSubItem(token, writer, $T15().Base128);
  };

  function ProtoWriter_EndSubItem$01 (token, writer, style) {
    var $temp00, $temp01;
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    if (writer.wireType !== $T08().None) {
      throw $thisType.CreateException(writer);
    }
    var value = token.value;
    if (writer.depth <= 0) {
      throw $thisType.CreateException(writer);
    }
    if (($temp00 = writer.depth, 
        writer.depth = ((writer.depth - 1) | 0), 
        $temp00) > 25) {
      writer.PopRecursionStack();
    }
    writer.packedFieldNumber = 0;
    if (value < 0) {
      $thisType.WriteHeaderCore((-value | 0), $T08().EndGroup, writer);
      writer.wireType = $T08().None;
      return;
    }
    switch (style.valueOf()) {
      case 1: 
        var num = ((((writer.ioIndex - value) | 0) - 1) | 0);
        var num2 = 0;
        var num3 = $T16().$Cast(num);

        while ((num3 = (num3 >>> 7)) !== 0) {
          num2 = ((num2 + 1) | 0);
        }
        if (num2 === 0) {
          writer.ioBuffer[value] = $T17().$Cast((num & 127));
        } else {
          $thisType.DemandSpace(num2, writer);
          var array = writer.ioBuffer;
          $T18().BlockCopy(
            array, 
            ((value + 1) | 0), 
            array, 
            ((((value + 1) | 0) + num2) | 0), 
            num
          );
          num3 = $T16().$Cast(num);

          do {
            array[($temp01 = value, 
              value = ((value + 1) | 0), 
              $temp01)] = $T17().$Cast(((num3 & 127) | 128));
          } while ((num3 = (num3 >>> 7)) !== 0);
          array[((value - 1) | 0)] = $T17().$Cast((array[((value - 1) | 0)] & -129));
          writer.position = ((writer.position + num2) | 0);
          writer.ioIndex = ((writer.ioIndex + num2) | 0);
        }
        break;

      case 2: 
        num = ((((writer.ioIndex - value) | 0) - 4) | 0);
        $thisType.WriteInt32ToBuffer(num, writer.ioBuffer, value);
        break;

      case 3: 
        num = ((((writer.ioIndex - value) | 0) - 4) | 0);
        var array2 = writer.ioBuffer;
        $thisType.WriteInt32ToBuffer(num, array2, value);
        var b = array2[value];
        array2[value] = array2[((value + 3) | 0)];
        array2[((value + 3) | 0)] = b;
        b = array2[((value + 1) | 0)];
        array2[((value + 1) | 0)] = array2[((value + 2) | 0)];
        array2[((value + 2) | 0)] = b;
        break;

      default: 
        throw $S05().Construct("style");

    }
    if (!(((writer.flushLock = ((writer.flushLock - 1) | 0)) !== 0) || (writer.ioIndex < 1024))) {
      $thisType.Flush(writer);
    }
  };

  function ProtoWriter_Flush (writer) {
    if (!((writer.flushLock !== 0) || (writer.ioIndex === 0))) {
      writer.dest.Write(writer.ioBuffer, 0, writer.ioIndex);
      writer.ioIndex = 0;
    }
  };

  function ProtoWriter_get_Context () {
    return this.context;
  };

  function ProtoWriter_get_Model () {
    return this.model;
  };

  function ProtoWriter_get_NetCache () {
    return this.netCache;
  };

  function ProtoWriter_get_WireType () {
    return this.wireType;
  };

  function ProtoWriter_GetPosition (writer) {
    return writer.position;
  };

  function ProtoWriter_GetTypeKey (/* ref */ type) {
    return this.model.GetKey(/* ref */ type);
  };

  function ProtoWriter_IncrementedAndReset (length, writer) {
    writer.ioIndex = ((writer.ioIndex + length) | 0);
    writer.position = ((writer.position + length) | 0);
    writer.wireType = $T08().None;
  };

  function ProtoWriter_PopRecursionStack () {
    this.recursionStack.RemoveLast();
  };

  function ProtoWriter_SerializeType (type) {
    return $T02().SerializeType(this.model, type);
  };

  function ProtoWriter_SetPackedField (fieldNumber, writer) {
    if (fieldNumber <= 0) {
      throw $S05().Construct("fieldNumber");
    }
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    writer.packedFieldNumber = fieldNumber;
  };

  function ProtoWriter_SetRootObject (value) {
    this.get_NetCache().SetKeyedObject(0, value);
  };

  function ProtoWriter_StartSubItem$02 (instance, writer) {
    return $thisType.StartSubItem(instance, writer, false);
  };

  function ProtoWriter_StartSubItem$03 (instance, writer, allowFixed) {
    var $temp00;
    var result = new ($T14())();
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    if ((writer.depth = ((writer.depth + 1) | 0)) > 25) {
      writer.CheckRecursionStackAndPush(instance);
    }
    if (writer.packedFieldNumber !== 0) {
      throw $S03().Construct("Cannot begin a sub-item while performing packed encoding");
    }
    switch (writer.wireType.valueOf()) {
      case 2: 
        writer.wireType = $T08().None;
        $thisType.DemandSpace(32, writer);
        writer.flushLock = ((writer.flushLock + 1) | 0);
        writer.position = ((writer.position + 1) | 0);
        return new ($T14())(($temp00 = writer.ioIndex, 
            writer.ioIndex = ((writer.ioIndex + 1) | 0), 
            $temp00));

      case 3: 
        writer.wireType = $T08().None;
        return new ($T14())((-writer.fieldNumber | 0));

      case 5: 
        if (!allowFixed) {
          throw $thisType.CreateException(writer);
        }
        $thisType.DemandSpace(32, writer);
        writer.flushLock = ((writer.flushLock + 1) | 0);
        result = new ($T14())(writer.ioIndex);
        $thisType.IncrementedAndReset(4, writer);
        return result;

    }
    throw $thisType.CreateException(writer);
  };

  function ProtoWriter_System_IDisposable_Dispose () {
    this.Dispose();
  };

  function ProtoWriter_ThrowEnumException (writer, enumValue) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    var str = ((enumValue === null) ? "<null>" : (JSIL.GetType(enumValue).get_FullName() + "." + enumValue.toString()));
    throw $S04().Construct(("No wire-value is mapped to the enum " + str + " at position " + (writer.position).toString()));
  };

  function ProtoWriter_WriteBoolean (value, writer) {
    $thisType.WriteUInt32((value ? 1 : 0), writer);
  };

  function ProtoWriter_WriteByte (value, writer) {
    $thisType.WriteUInt32(value, writer);
  };

  function ProtoWriter_WriteBytes$04 (data, writer) {
    if (data === null) {
      throw $S01().Construct("data");
    }
    $thisType.WriteBytes(data, 0, data.length, writer);
  };

  function ProtoWriter_WriteBytes$05 (data, offset, length, writer) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          if (data === null) {
            throw $S01().Construct("data");
          }
          if (writer === null) {
            throw $S01().Construct("writer");
          }
          switch (writer.wireType.valueOf()) {
            case 1: 
              if (length !== 8) {
                throw $S06().Construct("length");
              }
              $label0 = 1 /* goto IL_AE */ ;
              continue $labelgroup0;

            case 2: 
              $thisType.WriteUInt32Variant($T16().$Cast(length), writer);
              writer.wireType = $T08().None;
              if (length === 0) {
                return;
              }
              if (!((writer.flushLock !== 0) || (length <= writer.ioBuffer.length))) {
                $thisType.Flush(writer);
                writer.dest.Write(data, offset, length);
                writer.position = ((writer.position + length) | 0);
                return;
              }
              $label0 = 1 /* goto IL_AE */ ;
              continue $labelgroup0;

            case 5: 
              if (length !== 4) {
                throw $S06().Construct("length");
              }
              $label0 = 1 /* goto IL_AE */ ;
              continue $labelgroup0;

          }
          throw $thisType.CreateException(writer);

          $label0 = 1 /* goto IL_AE */ ;
          continue $labelgroup0;
        case 1: /* IL_AE */ 
          $thisType.DemandSpace(length, writer);
          $T18().BlockCopy(
            data, 
            offset, 
            writer.ioBuffer, 
            writer.ioIndex, 
            length
          );
          $thisType.IncrementedAndReset(length, writer);

          break $labelgroup0;
      }
    }
  };

  function ProtoWriter_WriteDouble (value, writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    if (wireType === $T08().Fixed64) {
      $thisType.WriteInt64($T1D().ToInt64($S07().CallStatic($T1D(), "GetBytes", null, value), 0), writer);
      return;
    }
    if (wireType !== $T08().Fixed32) {
      throw $thisType.CreateException(writer);
    }
    var value2 = +$T1E().$Cast(value);
    if (!(!$S08().CallStatic($T18(), "IsInfinity", null, value2) || $S09().CallStatic($T18(), "IsInfinity", null, value))) {
      throw $S0A().Construct();
    }
    $thisType.WriteSingle(value2, writer);
  };

  function ProtoWriter_WriteFieldHeader (fieldNumber, wireType, writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    if (writer.wireType !== $T08().None) {
      throw $S03().Construct(JSIL.ConcatString.apply(null, JSIL.Array.New($T12(), ["Cannot write a ", wireType.toString(), " header until the ", writer.wireType.toString(), " data has been written"])));
    }
    if (fieldNumber < 0) {
      throw $S05().Construct("fieldNumber");
    }
    if (writer.packedFieldNumber === 0) {
      writer.fieldNumber = fieldNumber;
      writer.wireType = wireType;
      $thisType.WriteHeaderCore(fieldNumber, wireType, writer);
      return;
    }
    if (writer.packedFieldNumber === fieldNumber) {
      switch (wireType.valueOf()) {
        case 0: 
        case 1: 
          break;

        default: 
          if (!((wireType === $T08().Fixed32) || (wireType === $T08().SignedVariant))) {
            throw $S03().Construct(JSIL.ConcatString("Wire-type cannot be encoded as packed: ", wireType.toString()));
          }
          break;

      }
      writer.fieldNumber = fieldNumber;
      writer.wireType = wireType;
      return;
    }
    throw $S03().Construct(("Field mismatch during packed encoding; expected " + (writer.packedFieldNumber).toString() + " but received " + (fieldNumber).toString()));
  };

  function ProtoWriter_WriteHeaderCore (fieldNumber, wireType, writer) {
    var value = $T16().$Cast(((fieldNumber << 3) | ($T08().$Cast((wireType & $T08().$Cast(7)))).valueOf()));
    $thisType.WriteUInt32Variant(value, writer);
  };

  function ProtoWriter_WriteInt16 (value, writer) {
    $thisType.WriteInt32(value, writer);
  };

  function ProtoWriter_WriteInt32 (value, writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    switch (wireType.valueOf()) {
      case 0: 
        if (value >= 0) {
          $thisType.WriteUInt32Variant($T16().$Cast(value), writer);
          writer.wireType = $T08().None;
          return;
        }
        $thisType.DemandSpace(10, writer);
        var array = writer.ioBuffer;
        var num = writer.ioIndex;
        array[num] = $T17().$Cast((value | 128));
        array[((num + 1) | 0)] = $T17().$Cast(((value >> 7) | 128));
        array[((num + 2) | 0)] = $T17().$Cast(((value >> 14) | 128));
        array[((num + 3) | 0)] = $T17().$Cast(((value >> 21) | 128));
        array[((num + 4) | 0)] = $T17().$Cast(((value >> 28) | 128));
        array[((num + 5) | 0)] = (array[((num + 6) | 0)] = (array[((num + 7) | 0)] = (array[((num + 8) | 0)] = 255)));
        array[((num + 9) | 0)] = 1;
        $thisType.IncrementedAndReset(10, writer);
        return;

      case 1: 
        $thisType.DemandSpace(8, writer);
        array = writer.ioBuffer;
        num = writer.ioIndex;
        array[num] = $T17().$Cast(value);
        array[((num + 1) | 0)] = $T17().$Cast((value >> 8));
        array[((num + 2) | 0)] = $T17().$Cast((value >> 16));
        array[((num + 3) | 0)] = $T17().$Cast((value >> 24));
        array[((num + 4) | 0)] = (array[((num + 5) | 0)] = (array[((num + 6) | 0)] = (array[((num + 7) | 0)] = 0)));
        $thisType.IncrementedAndReset(8, writer);
        return;

      default: 
        if (wireType === $T08().Fixed32) {
          $thisType.DemandSpace(4, writer);
          $thisType.WriteInt32ToBuffer(value, writer.ioBuffer, writer.ioIndex);
          $thisType.IncrementedAndReset(4, writer);
          return;
        }
        if (wireType !== $T08().SignedVariant) {
          throw $thisType.CreateException(writer);
        }
        $thisType.WriteUInt32Variant($S0B().CallStatic($thisType, "Zig", null, value), writer);
        writer.wireType = $T08().None;
        return;

    }
  };

  function ProtoWriter_WriteInt32ToBuffer (value, buffer, index) {
    buffer[index] = $T17().$Cast(value);
    buffer[((index + 1) | 0)] = $T17().$Cast((value >> 8));
    buffer[((index + 2) | 0)] = $T17().$Cast((value >> 16));
    buffer[((index + 3) | 0)] = $T17().$Cast((value >> 24));
  };

  function ProtoWriter_WriteInt64 (value, writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    switch (wireType.valueOf()) {
      case 0: 
        if (!$T22().op_LessThan(
            value, 
            $T22().Create(0, 0, 0)
          )) {
          $thisType.WriteUInt64Variant((value).ToUInt64(), writer);
          writer.wireType = $T08().None;
          return;
        }
        $thisType.DemandSpace(10, writer);
        var array = writer.ioBuffer;
        var num = writer.ioIndex;
        array[num] = ($T22().op_BitwiseOr(
            value, 
            $T22().Create(128, 0, 0)
          )).ToNumber(255, false);
        array[((num + 1) | 0)] = $T17().$Cast((($T22().op_RightShift(value, 7)).ToNumber(4294967295, true) | 128));
        array[((num + 2) | 0)] = $T17().$Cast((($T22().op_RightShift(value, 14)).ToNumber(4294967295, true) | 128));
        array[((num + 3) | 0)] = $T17().$Cast((($T22().op_RightShift(value, 21)).ToNumber(4294967295, true) | 128));
        array[((num + 4) | 0)] = $T17().$Cast((($T22().op_RightShift(value, 28)).ToNumber(4294967295, true) | 128));
        array[((num + 5) | 0)] = $T17().$Cast((($T22().op_RightShift(value, 35)).ToNumber(4294967295, true) | 128));
        array[((num + 6) | 0)] = $T17().$Cast((($T22().op_RightShift(value, 42)).ToNumber(4294967295, true) | 128));
        array[((num + 7) | 0)] = $T17().$Cast((($T22().op_RightShift(value, 49)).ToNumber(4294967295, true) | 128));
        array[((num + 8) | 0)] = $T17().$Cast((($T22().op_RightShift(value, 56)).ToNumber(4294967295, true) | 128));
        array[((num + 9) | 0)] = 1;
        $thisType.IncrementedAndReset(10, writer);
        return;

      case 1: 
        $thisType.DemandSpace(8, writer);
        array = writer.ioBuffer;
        num = writer.ioIndex;
        array[num] = (value).ToNumber(255, false);
        array[((num + 1) | 0)] = ($T22().op_RightShift(value, 8)).ToNumber(255, false);
        array[((num + 2) | 0)] = ($T22().op_RightShift(value, 16)).ToNumber(255, false);
        array[((num + 3) | 0)] = ($T22().op_RightShift(value, 24)).ToNumber(255, false);
        array[((num + 4) | 0)] = ($T22().op_RightShift(value, 32)).ToNumber(255, false);
        array[((num + 5) | 0)] = ($T22().op_RightShift(value, 40)).ToNumber(255, false);
        array[((num + 6) | 0)] = ($T22().op_RightShift(value, 48)).ToNumber(255, false);
        array[((num + 7) | 0)] = ($T22().op_RightShift(value, 56)).ToNumber(255, false);
        $thisType.IncrementedAndReset(8, writer);
        return;

      default: 
        if (wireType === $T08().Fixed32) {
          $thisType.WriteInt32($T0B().$OverflowCheck((value).ToNumber(4294967295, true)), writer);
          return;
        }
        if (wireType !== $T08().SignedVariant) {
          throw $thisType.CreateException(writer);
        }
        $thisType.WriteUInt64Variant($S0C().CallStatic($thisType, "Zig", null, value), writer);
        writer.wireType = $T08().None;
        return;

    }
  };

  function ProtoWriter_WriteObject$06 (value, key, writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    if (writer.model === null) {
      throw $S03().Construct("Cannot serialize sub-objects unless a model is provided");
    }
    var token = $thisType.StartSubItem(value, writer);
    if (key >= 0) {
      $S0D().CallVirtual("Serialize", null, writer.model, key, value, writer);
    } else if (!((writer.model !== null) && writer.model.TrySerializeAuxiliaryType(
          writer, 
          JSIL.GetType(value), 
          $T23().Default, 
          1, 
          value, 
          false
        ))) {
      $T02().ThrowUnexpectedType(JSIL.GetType(value));
    }
    $thisType.EndSubItem(token, writer);
  };

  function ProtoWriter_WriteObject$07 (value, key, writer, style, fieldNumber) {
    if (writer.model === null) {
      throw $S03().Construct("Cannot serialize sub-objects unless a model is provided");
    }
    if (writer.wireType !== $T08().None) {
      throw $thisType.CreateException(writer);
    }
    switch (style.valueOf()) {
      case 1: 
        writer.wireType = $T08().String;
        writer.fieldNumber = fieldNumber;
        if (fieldNumber > 0) {
          $thisType.WriteHeaderCore(fieldNumber, $T08().String, writer);
        }
        break;

      case 2: 
      case 3: 
        writer.fieldNumber = 0;
        writer.wireType = $T08().Fixed32;
        break;

      default: 
        throw $S05().Construct("style");

    }
    var token = $thisType.StartSubItem(value, writer, true);
    if (key < 0) {
      if (!writer.model.TrySerializeAuxiliaryType(
          writer, 
          JSIL.GetType(value), 
          $T23().Default, 
          1, 
          value, 
          false
        )) {
        $T02().ThrowUnexpectedType(JSIL.GetType(value));
      }
    } else {
      $S0D().CallVirtual("Serialize", null, writer.model, key, value, writer);
    }
    $thisType.EndSubItem(token, writer, style);
  };

  function ProtoWriter_WriteRecursionSafeObject (value, key, writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    if (writer.model === null) {
      throw $S03().Construct("Cannot serialize sub-objects unless a model is provided");
    }
    var token = $thisType.StartSubItem(null, writer);
    $S0D().CallVirtual("Serialize", null, writer.model, key, value, writer);
    $thisType.EndSubItem(token, writer);
  };

  function ProtoWriter_WriteSByte (value, writer) {
    $thisType.WriteInt32(value, writer);
  };

  function ProtoWriter_WriteSingle (value, writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    if (wireType === $T08().Fixed64) {
      $thisType.WriteDouble(value, writer);
      return;
    }
    if (wireType === $T08().Fixed32) {
      $thisType.WriteInt32($T1D().ToInt32($S0E().CallStatic($T1D(), "GetBytes", null, value), 0), writer);
      return;
    }
    throw $thisType.CreateException(writer);
  };

  function ProtoWriter_WriteString (value, writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    if (writer.wireType !== $T08().String) {
      throw $thisType.CreateException(writer);
    }
    if (value === null) {
      throw $S01().Construct("value");
    }
    if (value.length === 0) {
      $thisType.WriteUInt32Variant(0, writer);
      writer.wireType = $T08().None;
      return;
    }
    var byteCount = $S0F().CallVirtual("GetByteCount", null, $thisType.encoding, value);
    $thisType.WriteUInt32Variant($T16().$Cast(byteCount), writer);
    $thisType.DemandSpace(byteCount, writer);
    var bytes = $S10().CallVirtual("GetBytes", null, $thisType.encoding, 
      value, 
      0, 
      value.length, 
      writer.ioBuffer, 
      writer.ioIndex
    );
    $thisType.IncrementedAndReset(bytes, writer);
  };

  function ProtoWriter_WriteType (value, writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    $thisType.WriteString(writer.SerializeType(value), writer);
  };

  function ProtoWriter_WriteUInt16 (value, writer) {
    $thisType.WriteUInt32(value, writer);
  };

  function ProtoWriter_WriteUInt32 (value, writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    switch (wireType.valueOf()) {
      case 0: 
        $thisType.WriteUInt32Variant(value, writer);
        writer.wireType = $T08().None;
        return;

      case 1: 
        $thisType.WriteInt64($T22().FromNumber(value), writer);
        return;

      default: 
        if (wireType === $T08().Fixed32) {
          $thisType.WriteInt32($T0B().$Cast(value), writer);
          return;
        }
        throw $thisType.CreateException(writer);

    }
  };

  function ProtoWriter_WriteUInt32Variant (value, writer) {
    var $temp00;
    $thisType.DemandSpace(5, writer);
    var num = 0;

    do {
      writer.ioBuffer[($temp00 = writer.ioIndex, 
        writer.ioIndex = ((writer.ioIndex + 1) | 0), 
        $temp00)] = $T17().$Cast(((value & 127) | 128));
      num = ((num + 1) | 0);
    } while ((value = (value >>> 7)) !== 0);
    var expr_4B_cp_0 = writer.ioBuffer;
    var expr_4B_cp_1 = ((writer.ioIndex - 1) | 0);
    expr_4B_cp_0[expr_4B_cp_1] = (expr_4B_cp_0[expr_4B_cp_1] & 127);
    writer.position = ((writer.position + num) | 0);
  };

  function ProtoWriter_WriteUInt64 (value, writer) {
    if (writer === null) {
      throw $S01().Construct("writer");
    }
    var wireType = writer.wireType;
    switch (wireType.valueOf()) {
      case 0: 
        $thisType.WriteUInt64Variant(value, writer);
        writer.wireType = $T08().None;
        return;

      case 1: 
        $thisType.WriteInt64((value).ToInt64(), writer);
        return;

      default: 
        if (wireType !== $T08().Fixed32) {
          throw $thisType.CreateException(writer);
        }
        $thisType.WriteUInt32($T16().$OverflowCheck((value).ToNumber(4294967295, false)), writer);
        return;

    }
  };

  function ProtoWriter_WriteUInt64Variant (value, writer) {
    var $temp00;
    $thisType.DemandSpace(10, writer);
    var num = 0;

    do {
      writer.ioBuffer[($temp00 = writer.ioIndex, 
        writer.ioIndex = ((writer.ioIndex + 1) | 0), 
        $temp00)] = ($T27().op_BitwiseOr(
          $T27().op_BitwiseAnd(
            value, 
            $T27().Create(127, 0, 0)
          ), 
          $T27().Create(128, 0, 0)
        )).ToNumber(255, false);
      num = ((num + 1) | 0);
    } while ($T27().op_Inequality(
        (value = $T27().op_RightShift(value, 7)), 
        $T27().Create(0, 0, 0)
      ));
    var expr_50_cp_0 = writer.ioBuffer;
    var expr_50_cp_1 = ((writer.ioIndex - 1) | 0);
    expr_50_cp_0[expr_50_cp_1] = (expr_50_cp_0[expr_50_cp_1] & 127);
    writer.position = ((writer.position + num) | 0);
  };

  function ProtoWriter_Zig$08 (value) {
    return $T16().$Cast(((value << 1) ^ (value >> 31)));
  };

  function ProtoWriter_Zig$09 (value) {
    return ($T22().op_ExclusiveOr(
        $T22().op_LeftShift(value, 1), 
        $T22().op_RightShift(value, 63)
      )).ToUInt64();
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.ProtoWriter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ], []), 
      ProtoWriter__ctor
    );

    $.Method({Static:true , Public:true }, "AppendExtensionData", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.IExtensible"), $.Type], []), 
      ProtoWriter_AppendExtensionData
    );

    $.Method({Static:false, Public:false}, "CheckDepthFlushlock", 
      new JSIL.MethodSignature(null, [], []), 
      ProtoWriter_CheckDepthFlushlock
    );

    $.Method({Static:false, Public:false}, "CheckRecursionStackAndPush", 
      new JSIL.MethodSignature(null, [$.Object], []), 
      ProtoWriter_CheckRecursionStackAndPush
    );

    $.Method({Static:false, Public:true }, "Close", 
      new JSIL.MethodSignature(null, [], []), 
      ProtoWriter_Close
    );

    $.Method({Static:true , Public:false}, "CopyRawFromStream", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.IO.Stream"), $.Type], []), 
      ProtoWriter_CopyRawFromStream
    );

    $.Method({Static:true , Public:false}, "CreateException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Type], []), 
      ProtoWriter_CreateException
    );

    $.Method({Static:true , Public:false}, "DemandSpace", 
      new JSIL.MethodSignature(null, [$.Int32, $.Type], []), 
      ProtoWriter_DemandSpace
    );

    $.Method({Static:false, Public:false}, "Dispose", 
      new JSIL.MethodSignature(null, [], []), 
      ProtoWriter_Dispose
    );

    $.Method({Static:true , Public:true }, "EndSubItem", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.SubItemToken"), $.Type], []), 
      ProtoWriter_EndSubItem$00
    );

    $.Method({Static:true , Public:false}, "EndSubItem", 
      new JSIL.MethodSignature(null, [
          $asm08.TypeRef("ProtoBuf.SubItemToken"), $.Type, 
          $asm08.TypeRef("ProtoBuf.PrefixStyle")
        ], []), 
      ProtoWriter_EndSubItem$01
    );

    $.Method({Static:true , Public:false}, "Flush", 
      new JSIL.MethodSignature(null, [$.Type], []), 
      ProtoWriter_Flush
    );

    $.Method({Static:false, Public:true }, "get_Context", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.SerializationContext"), [], []), 
      ProtoWriter_get_Context
    );

    $.Method({Static:false, Public:true }, "get_Model", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Meta.TypeModel"), [], []), 
      ProtoWriter_get_Model
    );

    $.Method({Static:false, Public:false}, "get_NetCache", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.NetObjectCache"), [], []), 
      ProtoWriter_get_NetCache
    );

    $.Method({Static:false, Public:false}, "get_WireType", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.WireType"), [], []), 
      ProtoWriter_get_WireType
    );

    $.Method({Static:true , Public:false}, "GetPosition", 
      new JSIL.MethodSignature($.Int32, [$.Type], []), 
      ProtoWriter_GetPosition
    );

    $.Method({Static:false, Public:false}, "GetTypeKey", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")])], []), 
      ProtoWriter_GetTypeKey
    );

    $.Method({Static:true , Public:false}, "IncrementedAndReset", 
      new JSIL.MethodSignature(null, [$.Int32, $.Type], []), 
      ProtoWriter_IncrementedAndReset
    );

    $.Method({Static:false, Public:false}, "PopRecursionStack", 
      new JSIL.MethodSignature(null, [], []), 
      ProtoWriter_PopRecursionStack
    );

    $.Method({Static:false, Public:false}, "SerializeType", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Type")], []), 
      ProtoWriter_SerializeType
    );

    $.Method({Static:true , Public:true }, "SetPackedField", 
      new JSIL.MethodSignature(null, [$.Int32, $.Type], []), 
      ProtoWriter_SetPackedField
    );

    $.Method({Static:false, Public:true }, "SetRootObject", 
      new JSIL.MethodSignature(null, [$.Object], []), 
      ProtoWriter_SetRootObject
    );

    $.Method({Static:true , Public:true }, "StartSubItem", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.SubItemToken"), [$.Object, $.Type], []), 
      ProtoWriter_StartSubItem$02
    );

    $.Method({Static:true , Public:false}, "StartSubItem", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.SubItemToken"), [
          $.Object, $.Type, 
          $.Boolean
        ], []), 
      ProtoWriter_StartSubItem$03
    );

    $.Method({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      new JSIL.MethodSignature(null, [], []), 
      ProtoWriter_System_IDisposable_Dispose
    )
      .Overrides(0, "Dispose");

    $.Method({Static:true , Public:true }, "ThrowEnumException", 
      new JSIL.MethodSignature(null, [$.Type, $.Object], []), 
      ProtoWriter_ThrowEnumException
    );

    $.Method({Static:true , Public:true }, "WriteBoolean", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Type], []), 
      ProtoWriter_WriteBoolean
    );

    $.Method({Static:true , Public:true }, "WriteByte", 
      new JSIL.MethodSignature(null, [$.Byte, $.Type], []), 
      ProtoWriter_WriteByte
    );

    $.Method({Static:true , Public:true }, "WriteBytes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Type], []), 
      ProtoWriter_WriteBytes$04
    );

    $.Method({Static:true , Public:true }, "WriteBytes", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Type
        ], []), 
      ProtoWriter_WriteBytes$05
    );

    $.Method({Static:true , Public:true }, "WriteDouble", 
      new JSIL.MethodSignature(null, [$.Double, $.Type], []), 
      ProtoWriter_WriteDouble
    );

    $.Method({Static:true , Public:true }, "WriteFieldHeader", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm08.TypeRef("ProtoBuf.WireType"), 
          $.Type
        ], []), 
      ProtoWriter_WriteFieldHeader
    );

    $.Method({Static:true , Public:false}, "WriteHeaderCore", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm08.TypeRef("ProtoBuf.WireType"), 
          $.Type
        ], []), 
      ProtoWriter_WriteHeaderCore
    );

    $.Method({Static:true , Public:true }, "WriteInt16", 
      new JSIL.MethodSignature(null, [$.Int16, $.Type], []), 
      ProtoWriter_WriteInt16
    );

    $.Method({Static:true , Public:true }, "WriteInt32", 
      new JSIL.MethodSignature(null, [$.Int32, $.Type], []), 
      ProtoWriter_WriteInt32
    );

    $.Method({Static:true , Public:false}, "WriteInt32ToBuffer", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ], []), 
      ProtoWriter_WriteInt32ToBuffer
    );

    $.Method({Static:true , Public:true }, "WriteInt64", 
      new JSIL.MethodSignature(null, [$.Int64, $.Type], []), 
      ProtoWriter_WriteInt64
    );

    $.Method({Static:true , Public:true }, "WriteObject", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Int32, 
          $.Type
        ], []), 
      ProtoWriter_WriteObject$06
    );

    $.Method({Static:true , Public:false}, "WriteObject", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Int32, 
          $.Type, $asm08.TypeRef("ProtoBuf.PrefixStyle"), 
          $.Int32
        ], []), 
      ProtoWriter_WriteObject$07
    );

    $.Method({Static:true , Public:true }, "WriteRecursionSafeObject", 
      new JSIL.MethodSignature(null, [
          $.Object, $.Int32, 
          $.Type
        ], []), 
      ProtoWriter_WriteRecursionSafeObject
    );

    $.Method({Static:true , Public:true }, "WriteSByte", 
      new JSIL.MethodSignature(null, [$.SByte, $.Type], []), 
      ProtoWriter_WriteSByte
    );

    $.Method({Static:true , Public:true }, "WriteSingle", 
      new JSIL.MethodSignature(null, [$.Single, $.Type], []), 
      ProtoWriter_WriteSingle
    );

    $.Method({Static:true , Public:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String, $.Type], []), 
      ProtoWriter_WriteString
    );

    $.Method({Static:true , Public:true }, "WriteType", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $.Type], []), 
      ProtoWriter_WriteType
    );

    $.Method({Static:true , Public:true }, "WriteUInt16", 
      new JSIL.MethodSignature(null, [$.UInt16, $.Type], []), 
      ProtoWriter_WriteUInt16
    );

    $.Method({Static:true , Public:true }, "WriteUInt32", 
      new JSIL.MethodSignature(null, [$.UInt32, $.Type], []), 
      ProtoWriter_WriteUInt32
    );

    $.Method({Static:true , Public:false}, "WriteUInt32Variant", 
      new JSIL.MethodSignature(null, [$.UInt32, $.Type], []), 
      ProtoWriter_WriteUInt32Variant
    );

    $.Method({Static:true , Public:true }, "WriteUInt64", 
      new JSIL.MethodSignature(null, [$.UInt64, $.Type], []), 
      ProtoWriter_WriteUInt64
    );

    $.Method({Static:true , Public:false}, "WriteUInt64Variant", 
      new JSIL.MethodSignature(null, [$.UInt64, $.Type], []), 
      ProtoWriter_WriteUInt64Variant
    );

    $.Method({Static:true , Public:false}, "Zig", 
      new JSIL.MethodSignature($.UInt32, [$.Int32], []), 
      ProtoWriter_Zig$08
    );

    $.Method({Static:true , Public:false}, "Zig", 
      new JSIL.MethodSignature($.UInt64, [$.Int64], []), 
      ProtoWriter_Zig$09
    );

    $.Constant({Static:true , Public:false}, "RecursionCheckDepth", 25); 
    $.Field({Static:false, Public:false}, "dest", $asm07.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "netCache", $asm08.TypeRef("ProtoBuf.NetObjectCache")); 
    $.Field({Static:false, Public:false}, "fieldNumber", $.Int32); 
    $.Field({Static:false, Public:false}, "flushLock", $.Int32); 
    $.Field({Static:false, Public:false}, "wireType", $asm08.TypeRef("ProtoBuf.WireType")); 
    $.Field({Static:false, Public:false}, "depth", $.Int32); 
    $.Field({Static:false, Public:false}, "recursionStack", $asm08.TypeRef("ProtoBuf.Meta.MutableList")); 
    $.Field({Static:false, Public:false, ReadOnly:true }, "context", $asm08.TypeRef("ProtoBuf.SerializationContext")); 
    $.Field({Static:false, Public:false}, "ioBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "ioIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "position", $.Int32); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "encoding", $asm07.TypeRef("System.Text.UTF8Encoding")); 
    $.Field({Static:false, Public:false}, "packedFieldNumber", $.Int32); 
    function ProtoWriter__cctor () {
      $thisType.encoding = $S00().Construct();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      ProtoWriter__cctor
    );

    $.Property({Static:false, Public:false}, "NetCache", $asm08.TypeRef("ProtoBuf.NetObjectCache"));

    $.Property({Static:false, Public:false}, "WireType", $asm08.TypeRef("ProtoBuf.WireType"));

    $.Property({Static:false, Public:true }, "Context", $asm08.TypeRef("ProtoBuf.SerializationContext"));

    $.Property({Static:false, Public:true }, "Model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ProtoReader */ 

(function ProtoReader$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Text.UTF8Encoding)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.IO.Stream)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Meta.TypeModel)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.ProtoBuf.SerializationContext)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.Exception)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.Collections.IDictionary)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm07.System.Byte))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm08.ProtoBuf.WireType)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm08.ProtoBuf.IExtensible)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm08.ProtoBuf.IExtension)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm07.System.IDisposable)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm08.ProtoBuf.SubItemToken)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm08.ProtoBuf.ProtoException)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm07.System.Text.Encoding)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm08.ProtoBuf.BufferPool)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm07.System.Collections.Generic.Dictionary$b2.Of($asm07.System.String, $asm07.System.String))) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm08.ProtoBuf.NetObjectCache)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm07.System.ArgumentException)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm07.System.IO.EndOfStreamException)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm07.System.IO.MemoryStream)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm07.System.BitConverter)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm07.System.Void)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm07.System.Int16)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm07.System.UInt64)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm08.ProtoBuf.PrefixStyle)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm07.System.SByte)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm07.System.Double)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm07.System.Single)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm07.System.OverflowException)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm08.ProtoBuf.DataFormat)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm07.System.UInt16)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm07.System.IO.SeekOrigin)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Text.UTF8Encoding"), []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentNullException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.TypeRef("ProtoBuf.ProtoException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.TypeRef("ProtoBuf.ProtoReader"), [
        $asm07.TypeRef("System.IO.Stream"), $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), 
        $asm08.TypeRef("ProtoBuf.SerializationContext"), $asm07.TypeRef("System.Int32")
      ]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.IO.EndOfStreamException"), []))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentException"), [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.String")]), []))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.InvalidOperationException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.IO.MemoryStream"), []))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm07.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Object"), 
        $asm08.TypeRef("ProtoBuf.SerializationContext")
      ], []))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Object"), [
        $asm07.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Object"), 
        $asm07.TypeRef("System.Type")
      ], []))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Byte")]), [$asm07.TypeRef("System.Int64")], []))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [$asm07.TypeRef("System.UInt32")], []))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Int64"), [$asm07.TypeRef("System.UInt64")], []))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.InvalidOperationException"), []))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Byte")]), [$asm07.TypeRef("System.Int32")], []))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Single")], []))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Double")], []))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.OverflowException"), []))) ();
  };
  var $S15 = function () {
    return ($S15 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Object"), [
        $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Object"), 
        $asm08.TypeRef("ProtoBuf.ProtoReader")
      ], []))) ();
  };
  var $S16 = function () {
    return ($S16 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")], []))) ();
  };
  var $S17 = function () {
    return ($S17 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")], []))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm07.System.Collections.IDictionary.Contains)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm07.System.Collections.IDictionary.Add)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm08.ProtoBuf.IExtensible.GetExtensionObject)) ();
  };
  var $IM03 = function () {
    return ($IM03 = JSIL.Memoize($asm08.ProtoBuf.IExtension.BeginAppend)) ();
  };
  var $IM04 = function () {
    return ($IM04 = JSIL.Memoize($asm07.System.IDisposable.Dispose)) ();
  };
  var $IM05 = function () {
    return ($IM05 = JSIL.Memoize($asm08.ProtoBuf.IExtension.EndAppend)) ();
  };

  function ProtoReader__ctor$00 (source, model, context) {
    $thisType.Init(
      this, 
      source, 
      model, 
      context, 
      -1
    );
  };

  function ProtoReader__ctor$01 (source, model, context, length) {
    $thisType.Init(
      this, 
      source, 
      model, 
      context, 
      length
    );
  };

  function ProtoReader_AddErrorData (exception, source) {
    if (!((exception === null) || 
        (source === null) || $IM00().Call(exception.get_Data(), null, "protoSource"))) {
      $IM01().Call(exception.get_Data(), null, "protoSource", $T08().Format("tag={0}; wire-type={1}; offset={2}; depth={3}", JSIL.Array.New($T09(), [source.fieldNumber, source.wireType, source.position, source.depth])));
    }
    return exception;
  };

  function ProtoReader_AppendBytes (value, reader) {
    if (reader === null) {
      throw $S01().Construct("reader");
    }
    var wireType = reader.wireType;
    if (wireType !== $T0C().String) {
      throw reader.CreateWireTypeException();
    }
    var i = $T05().$Cast(reader.ReadUInt32Variant(false));
    reader.wireType = $T0C().None;
    if (i !== 0) {
      if (!((value !== null) && (value.length !== 0))) {
        var num = 0;
        value = JSIL.Array.New($T01(), i);
      } else {
        num = value.length;
        var array = JSIL.Array.New($T01(), ((value.length + i) | 0));
        $T0D().BlockCopy(
          value, 
          0, 
          array, 
          0, 
          value.length
        );
        value = array;
      }
      reader.position = ((reader.position + i) | 0);

      while (i > reader.available) {
        if (reader.available > 0) {
          $T0D().BlockCopy(
            reader.ioBuffer, 
            reader.ioIndex, 
            value, 
            num, 
            reader.available
          );
          i = ((i - reader.available) | 0);
          num = ((num + reader.available) | 0);
          reader.ioIndex = (reader.available = 0);
        }
        var num2 = ((i > reader.ioBuffer.length) ? reader.ioBuffer.length : i);
        if (num2 > 0) {
          reader.Ensure(num2, true);
        }
      }
      if (i > 0) {
        $T0D().BlockCopy(
          reader.ioBuffer, 
          reader.ioIndex, 
          value, 
          num, 
          i
        );
        reader.ioIndex = ((reader.ioIndex + i) | 0);
        reader.available = ((reader.available - i) | 0);
      }
      return value;
    }
    if (value !== null) {
      return value;
    }
    return $thisType.EmptyBlob;
  };

  function ProtoReader_AppendExtensionData (instance) {
    if (instance === null) {
      throw $S01().Construct("instance");
    }
    var extensionObject = $IM02().Call(instance, null, true);
    var commit = false;
    var stream = $IM03().Call(extensionObject, null);
    try {
      var protoWriter = new ($T11())(stream, this.model, null);
      try {
        this.AppendExtensionField(protoWriter);
        protoWriter.Close();
      } finally {
        if (protoWriter !== null) {
          $IM04().Call(protoWriter, null);
        }
      }
      commit = true;
    } finally {
      $IM05().Call(extensionObject, null, stream, commit);
    }
  };

  function ProtoReader_AppendExtensionField (writer) {
    $T11().WriteFieldHeader(this.fieldNumber, this.wireType, writer);
    switch (this.wireType.valueOf()) {
      case 0: 
      case 1: 
      case 8: 
        $T11().WriteInt64(this.ReadInt64(), writer);
        return;

      case 2: 
        $T11().WriteBytes($thisType.AppendBytes(null, this), writer);
        return;

      case 3: 
        var token = $thisType.StartSubItem(this);
        var token2 = $T11().StartSubItem(null, writer);

        while (this.ReadFieldHeader() > 0) {
          this.AppendExtensionField(writer);
        }
        $thisType.EndSubItem(token, this);
        $T11().EndSubItem(token2, writer);
        return;

      case 5: 
        $T11().WriteInt32(this.ReadInt32(), writer);
        return;

    }
    throw this.CreateWireTypeException();
  };

  function ProtoReader_Assert (wireType) {
    if (this.wireType === wireType) {
      return;
    }
    if ($T0C().$Cast((wireType & $T0C().$Cast(7))) === this.wireType) {
      this.wireType = wireType;
      return;
    }
    throw this.CreateWireTypeException();
  };

  function ProtoReader_CheckFullyConsumed () {
    if (this.isFixedLength) {
      if (this.dataRemaining !== 0) {
        throw $S02().Construct("Incorrect number of bytes consumed");
      }
    } else if (this.available !== 0) {
      throw $S02().Construct("Unconsumed data left in the buffer; this suggests corrupt input");
    }
  };

  function ProtoReader_Create (source, model, context, len) {
    var recycled = $thisType.GetRecycled();
    if (recycled === null) {
      return $S03().Construct(source, model, context, len);
    }
    $thisType.Init(
      recycled, 
      source, 
      model, 
      context, 
      len
    );
    return recycled;
  };

  function ProtoReader_CreateException (message) {
    return $thisType.AddErrorData($S02().Construct(message), this);
  };

  function ProtoReader_CreateWireTypeException () {
    return this.CreateException("Invalid wire-type; this usually means you have over-written a file without truncating or setting the length; see http://stackoverflow.com/q/2152978/23354");
  };

  function ProtoReader_DeserializeType (value) {
    return $T03().DeserializeType(this.model, value);
  };

  function ProtoReader_DirectReadBigEndianInt32 (source) {
    return (((($thisType.ReadByteOrThrow(source) << 24) | ($thisType.ReadByteOrThrow(source) << 16)) | ($thisType.ReadByteOrThrow(source) << 8)) | $thisType.ReadByteOrThrow(source));
  };

  function ProtoReader_DirectReadBytes$02 (source, buffer, offset, count) {
    var num = 0;
    if (source === null) {
      throw $S01().Construct("source");
    }

    for (; (count > 0) && ((num = source.Read(buffer, offset, count)) > 0); offset = ((offset + num) | 0)) {
      count = ((count - num) | 0);
    }
    if (count > 0) {
      throw $thisType.EoF(null);
    }
  };

  function ProtoReader_DirectReadBytes$03 (source, count) {
    var array = JSIL.Array.New($T01(), count);
    $thisType.DirectReadBytes(source, array, 0, count);
    return array;
  };

  function ProtoReader_DirectReadLittleEndianInt32 (source) {
    return ((($thisType.ReadByteOrThrow(source) | ($thisType.ReadByteOrThrow(source) << 8)) | ($thisType.ReadByteOrThrow(source) << 16)) | ($thisType.ReadByteOrThrow(source) << 24));
  };

  function ProtoReader_DirectReadString (source, length) {
    var array = JSIL.Array.New($T01(), length);
    $thisType.DirectReadBytes(source, array, 0, length);
    return $T15().get_UTF8().GetString(array, 0, length);
  };

  function ProtoReader_DirectReadVarintInt32 (source) {
    var result = new JSIL.BoxedVariable(0);
    var num = $thisType.TryReadUInt32Variant(source, /* ref */ result);
    if (num <= 0) {
      throw $thisType.EoF(null);
    }
    return $T05().$Cast(result.get());
  };

  function ProtoReader_Dispose () {
    this.source = null;
    this.model = null;
    $T17().ReleaseBufferToPool(/* ref */ new JSIL.MemberReference(this, "ioBuffer"));
    if (this.stringInterner !== null) {
      this.stringInterner.Clear();
    }
    if (this.netCache !== null) {
      this.netCache.Clear();
    }
  };

  function ProtoReader_EndSubItem (token, reader) {
    if (reader === null) {
      throw $S01().Construct("reader");
    }
    var value = token.value;
    var wireType = reader.wireType;
    if (wireType === $T0C().EndGroup) {
      if (value >= 0) {
        throw $thisType.AddErrorData($S04().Construct("token"), reader);
      }
      if ((-value | 0) !== reader.fieldNumber) {
        throw reader.CreateException("Wrong group was ended");
      }
      reader.wireType = $T0C().None;
      reader.depth = ((reader.depth - 1) | 0);
      return;
    } else {
      if (value < reader.position) {
        throw reader.CreateException("Sub-message not read entirely");
      }
      if (!((reader.blockEnd === reader.position) || (reader.blockEnd === 2147483647))) {
        throw reader.CreateException("Sub-message not read correctly");
      }
      reader.blockEnd = value;
      reader.depth = ((reader.depth - 1) | 0);
      return;
    }
  };

  function ProtoReader_Ensure (count, strict) {
    var num3 = 0;
    if (count > this.ioBuffer.length) {
      $T17().ResizeAndFlushLeft(/* ref */ new JSIL.MemberReference(this, "ioBuffer"), count, this.ioIndex, this.available);
      this.ioIndex = 0;
    } else if (((this.ioIndex + count) | 0) >= this.ioBuffer.length) {
      $T0D().BlockCopy(
        this.ioBuffer, 
        this.ioIndex, 
        this.ioBuffer, 
        0, 
        this.available
      );
      this.ioIndex = 0;
    }
    count = ((count - this.available) | 0);
    var num = ((this.ioIndex + this.available) | 0);
    var num2 = ((this.ioBuffer.length - num) | 0);
    if (!(!this.isFixedLength || (this.dataRemaining >= num2))) {
      num2 = this.dataRemaining;
    }

    while (!((count <= 0) || 
        (num2 <= 0)) && ((num3 = this.source.Read(this.ioBuffer, num, num2)) > 0)) {
      this.available = ((this.available + num3) | 0);
      count = ((count - num3) | 0);
      num2 = ((num2 - num3) | 0);
      num = ((num + num3) | 0);
      if (this.isFixedLength) {
        this.dataRemaining = ((this.dataRemaining - num3) | 0);
      }
    }
    if (!(!strict || (count <= 0))) {
      throw $thisType.EoF(this);
    }
  };

  function ProtoReader_EoF (source) {
    return $thisType.AddErrorData($S05().Construct(), source);
  };

  function ProtoReader_get_Context () {
    return this.context;
  };

  function ProtoReader_get_FieldNumber () {
    return this.fieldNumber;
  };

  function ProtoReader_get_InternStrings () {
    return this.internStrings;
  };

  function ProtoReader_get_Model () {
    return this.model;
  };

  function ProtoReader_get_NetCache () {
    return this.netCache;
  };

  function ProtoReader_get_Position () {
    return this.position;
  };

  function ProtoReader_get_WireType () {
    return this.wireType;
  };

  function ProtoReader_GetRecycled () {
    var result = $thisType.lastReader;
    $thisType.lastReader = null;
    return result;
  };

  function ProtoReader_GetTypeKey (/* ref */ type) {
    return this.model.GetKey(/* ref */ type);
  };

  function ProtoReader_HasSubValue (wireType, source) {
    if (source === null) {
      throw $S01().Construct("source");
    }
    if (!((source.blockEnd > source.position) && (wireType !== $T0C().EndGroup))) {
      return false;
    }
    source.wireType = wireType;
    return true;
  };

  function ProtoReader_Hint (wireType) {
    if (this.wireType === wireType) {
      return;
    }
    if ($T0C().$Cast((wireType & $T0C().$Cast(7))) === this.wireType) {
      this.wireType = wireType;
    }
  };

  function ProtoReader_Init (reader, source, model, context, length) {
    if (source === null) {
      throw $S01().Construct("source");
    }
    if (!source.get_CanRead()) {
      throw $S06().Construct("Cannot read from stream", "source");
    }
    reader.source = source;
    reader.ioBuffer = $T17().GetBuffer();
    reader.model = model;
    var flag = (length >= 0);
    reader.isFixedLength = flag;
    reader.dataRemaining = (flag ? length : 0);
    if (context === null) {
      context = $T04().get_Default();
    } else {
      context.Freeze();
    }
    reader.context = context;
    reader.position = (reader.available = (reader.depth = (reader.fieldNumber = (reader.ioIndex = 0))));
    reader.blockEnd = 2147483647;
    reader.internStrings = true;
    reader.wireType = $T0C().None;
    reader.trapCount = 1;
    if (reader.netCache === null) {
      reader.netCache = new ($T19())();
    }
  };

  function ProtoReader_Intern (value) {
    var text = new JSIL.BoxedVariable(null);
    if (value === null) {
      return null;
    }
    if (value.length === 0) {
      return "";
    }
    if (this.stringInterner === null) {
      this.stringInterner = $S07().Construct();
      this.stringInterner.Add(value, value);
    } else if (this.stringInterner.TryGetValue(value, /* ref */ text)) {
      value = text.get();
    } else {
      this.stringInterner.Add(value, value);
    }
    return value;
  };

  function ProtoReader_Merge (parent, from, to) {
    if (parent === null) {
      throw $S01().Construct("parent");
    }
    var typeModel = parent.get_Model();
    var serializationContext = parent.get_Context();
    if (typeModel === null) {
      throw $S08().Construct("Types cannot be merged unless a type-model has been specified");
    }
    var memoryStream = $S09().Construct();
    try {
      $S0A().CallVirtual("Serialize", null, typeModel, memoryStream, from, serializationContext);
      memoryStream.set_Position($T1F().Create(0, 0, 0));
      var result = $S0B().CallVirtual("Deserialize", null, typeModel, memoryStream, to, null);
    } finally {
      if (memoryStream !== null) {
        $IM04().Call(memoryStream, null);
      }
    }
    return result;
  };

  function ProtoReader_NoteObject (value, reader) {
    if (reader === null) {
      throw $S01().Construct("reader");
    }
    if (reader.trapCount !== 0) {
      reader.netCache.RegisterTrappedObject(value);
      reader.trapCount = ((reader.trapCount - 1) >>> 0);
    }
  };

  function ProtoReader_ReadBoolean () {
    switch (this.ReadUInt32()) {
      case 0: 
        return false;

      case 1: 
        return true;

      default: 
        throw this.CreateException("Unexpected boolean value");

    }
  };

  function ProtoReader_ReadByte () {
    return $T01().$OverflowCheck($T01().$Cast(this.ReadUInt32()));
  };

  function ProtoReader_ReadByteOrThrow (source) {
    var num = source.ReadByte();
    if (num < 0) {
      throw $thisType.EoF(null);
    }
    return num;
  };

  function ProtoReader_ReadDouble () {
    var wireType = this.wireType;
    if (wireType === $T0C().Fixed64) {
      var value = this.ReadInt64();
      return +$T20().ToDouble($S0C().CallStatic($T20(), "GetBytes", null, value), 0);
    }
    if (wireType === $T0C().Fixed32) {
      return +this.ReadSingle();
    }
    throw this.CreateWireTypeException();
  };

  function ProtoReader_ReadFieldHeader () {
    var num = new JSIL.BoxedVariable(0);
    if (!((this.blockEnd > this.position) && (this.wireType !== $T0C().EndGroup))) {
      return 0;
    }
    if (this.TryReadUInt32Variant(/* ref */ num)) {
      this.wireType = $T0C().$Cast((num.get() & 7));
      this.fieldNumber = $T05().$Cast((num.get() >>> 3));
      if (this.fieldNumber < 1) {
        throw $S02().Construct(JSIL.ConcatString("Invalid field in source data: ", (this.fieldNumber).toString()));
      }
    } else {
      this.wireType = $T0C().None;
      this.fieldNumber = 0;
    }
    if (this.wireType !== $T0C().EndGroup) {
      return this.fieldNumber;
    }
    if (this.depth > 0) {
      return 0;
    }
    throw $S02().Construct("Unexpected end-group in source data; this usually means the source data is corrupt");
  };

  function ProtoReader_ReadInt16 () {
    return $T22().$OverflowCheck($T22().$Cast(this.ReadInt32()));
  };

  function ProtoReader_ReadInt32 () {
    var $temp00, $temp01, $temp02, $temp03;
    var wireType = this.wireType;
    switch (wireType.valueOf()) {
      case 0: 
        return $T05().$Cast(this.ReadUInt32Variant(true));

      case 1: 
        var num = this.ReadInt64();
        return $T05().$OverflowCheck((num).ToNumber(4294967295, true));

      default: 
        if (wireType === $T0C().Fixed32) {
          if (this.available < 4) {
            this.Ensure(4, true);
          }
          this.position = ((this.position + 4) | 0);
          this.available = ((this.available - 4) | 0);
          return (((this.ioBuffer[($temp00 = this.ioIndex, 
                  this.ioIndex = ((this.ioIndex + 1) | 0), 
                  $temp00)] | (this.ioBuffer[($temp01 = this.ioIndex, 
                    this.ioIndex = ((this.ioIndex + 1) | 0), 
                    $temp01)] << 8)) | (this.ioBuffer[($temp02 = this.ioIndex, 
                  this.ioIndex = ((this.ioIndex + 1) | 0), 
                  $temp02)] << 16)) | (this.ioBuffer[($temp03 = this.ioIndex, 
                this.ioIndex = ((this.ioIndex + 1) | 0), 
                $temp03)] << 24));
        }
        if (wireType !== $T0C().SignedVariant) {
          throw this.CreateWireTypeException();
        }
        return $S0D().CallStatic($thisType, "Zag", null, this.ReadUInt32Variant(true));

    }
  };

  function ProtoReader_ReadInt64 () {
    var $temp00, $temp01, $temp02, $temp03, $temp04, $temp05, $temp06, $temp07;
    var wireType = this.wireType;
    switch (wireType.valueOf()) {
      case 0: 
        return this.ReadUInt64Variant().ToInt64();

      case 1: 
        if (this.available < 8) {
          this.Ensure(8, true);
        }
        this.position = ((this.position + 8) | 0);
        this.available = ((this.available - 8) | 0);
        return ($T23().op_BitwiseOr(
            $T23().op_BitwiseOr(
              $T23().op_BitwiseOr(
                $T23().op_BitwiseOr(
                  $T23().op_BitwiseOr(
                    $T23().op_BitwiseOr(
                      $T23().op_BitwiseOr(
                        $T23().FromNumber(this.ioBuffer[($temp00 = this.ioIndex, 
                            this.ioIndex = ((this.ioIndex + 1) | 0), 
                            $temp00)]), 
                        $T23().op_LeftShift($T23().FromNumber(this.ioBuffer[($temp01 = this.ioIndex, 
                              this.ioIndex = ((this.ioIndex + 1) | 0), 
                              $temp01)]), 8)
                      ), 
                      $T23().op_LeftShift($T23().FromNumber(this.ioBuffer[($temp02 = this.ioIndex, 
                            this.ioIndex = ((this.ioIndex + 1) | 0), 
                            $temp02)]), 16)
                    ), 
                    $T23().op_LeftShift($T23().FromNumber(this.ioBuffer[($temp03 = this.ioIndex, 
                          this.ioIndex = ((this.ioIndex + 1) | 0), 
                          $temp03)]), 24)
                  ), 
                  $T23().op_LeftShift($T23().FromNumber(this.ioBuffer[($temp04 = this.ioIndex, 
                        this.ioIndex = ((this.ioIndex + 1) | 0), 
                        $temp04)]), 32)
                ), 
                $T23().op_LeftShift($T23().FromNumber(this.ioBuffer[($temp05 = this.ioIndex, 
                      this.ioIndex = ((this.ioIndex + 1) | 0), 
                      $temp05)]), 40)
              ), 
              $T23().op_LeftShift($T23().FromNumber(this.ioBuffer[($temp06 = this.ioIndex, 
                    this.ioIndex = ((this.ioIndex + 1) | 0), 
                    $temp06)]), 48)
            ), 
            $T23().op_LeftShift($T23().FromNumber(this.ioBuffer[($temp07 = this.ioIndex, 
                  this.ioIndex = ((this.ioIndex + 1) | 0), 
                  $temp07)]), 56)
          )).ToInt64();

      default: 
        if (wireType === $T0C().Fixed32) {
          return $T1F().FromNumber(this.ReadInt32());
        }
        if (wireType !== $T0C().SignedVariant) {
          throw this.CreateWireTypeException();
        }
        return $S0E().CallStatic($thisType, "Zag", null, this.ReadUInt64Variant());

    }
  };

  function ProtoReader_ReadLengthPrefix$04 (source, expectHeader, style, /* ref */ fieldNumber) {
    var num = new JSIL.BoxedVariable(0);
    return $thisType.ReadLengthPrefix(
      source, 
      expectHeader, 
      style, 
      /* ref */ fieldNumber, 
      /* ref */ num
    );
  };

  function ProtoReader_ReadLengthPrefix$05 (source, expectHeader, style, /* ref */ fieldNumber, /* ref */ bytesRead) {
    var num2 = new JSIL.BoxedVariable(0);
    fieldNumber.set(0);
    switch (style.valueOf()) {
      case 0: 
        bytesRead.set(0);
        return 2147483647;

      case 1: 
        bytesRead.set(0);
        if (expectHeader) {
          var num = $thisType.TryReadUInt32Variant(source, /* ref */ num2);
          bytesRead.set(((bytesRead.get() + num) | 0));
          if (num <= 0) {
            bytesRead.set(0);
            return -1;
          }
          if ((num2.get() & 7) !== 2) {
            throw $S0F().Construct();
          }
          fieldNumber.set($T05().$Cast((num2.get() >>> 3)));
          num = $thisType.TryReadUInt32Variant(source, /* ref */ num2);
          bytesRead.set(((bytesRead.get() + num) | 0));
          if (bytesRead.get() === 0) {
            throw $thisType.EoF(null);
          }
          return $T05().$Cast(num2.get());
        } else {
          num = $thisType.TryReadUInt32Variant(source, /* ref */ num2);
          bytesRead.set(((bytesRead.get() + num) | 0));
          if (bytesRead.get() >= 0) {
            return $T05().$Cast(num2.get());
          }
          return -1;
        }
        break;

      case 2: 
        var num3 = source.ReadByte();
        if (num3 < 0) {
          bytesRead.set(0);
          return -1;
        }
        bytesRead.set(4);
        return (((num3 | ($thisType.ReadByteOrThrow(source) << 8)) | ($thisType.ReadByteOrThrow(source) << 16)) | ($thisType.ReadByteOrThrow(source) << 24));

      case 3: 
        var num4 = source.ReadByte();
        if (num4 < 0) {
          bytesRead.set(0);
          return -1;
        }
        bytesRead.set(4);
        return ((((num4 << 24) | ($thisType.ReadByteOrThrow(source) << 16)) | ($thisType.ReadByteOrThrow(source) << 8)) | $thisType.ReadByteOrThrow(source));

      default: 
        throw $S10().Construct("style");

    }
  };

  function ProtoReader_ReadObject (value, key, reader) {
    return $thisType.ReadTypedObject(value, key, reader, null);
  };

  function ProtoReader_ReadSByte () {
    return $T26().$OverflowCheck($T26().$Cast(this.ReadInt32()));
  };

  function ProtoReader_ReadSingle () {
    var wireType = this.wireType;
    if (wireType !== $T0C().Fixed64) {
      if (wireType === $T0C().Fixed32) {
        var value = this.ReadInt32();
        return +$T20().ToSingle($S11().CallStatic($T20(), "GetBytes", null, value), 0);
      }
      throw this.CreateWireTypeException();
    } else {
      var num = +this.ReadDouble();
      var num2 = +$T28().$Cast(num);
      if (!(!$S12().CallStatic($T0D(), "IsInfinity", null, num2) || $S13().CallStatic($T0D(), "IsInfinity", null, num))) {
        throw $thisType.AddErrorData($S14().Construct(), this);
      }
      return +num2;
    }
  };

  function ProtoReader_ReadString () {
    if (this.wireType !== $T0C().String) {
      throw this.CreateWireTypeException();
    }
    var num = $T05().$Cast(this.ReadUInt32Variant(false));
    if (num === 0) {
      return "";
    }
    if (this.available < num) {
      this.Ensure(num, true);
    }
    var text = $thisType.encoding.GetString(this.ioBuffer, this.ioIndex, num);
    if (this.internStrings) {
      text = this.Intern(text);
    }
    this.available = ((this.available - num) | 0);
    this.position = ((this.position + num) | 0);
    this.ioIndex = ((this.ioIndex + num) | 0);
    return text;
  };

  function ProtoReader_ReadType () {
    return $T03().DeserializeType(this.model, this.ReadString());
  };

  function ProtoReader_ReadTypedObject ($value, key, reader, type) {
    var value = new JSIL.BoxedVariable($value);
    if (reader.model === null) {
      throw $thisType.AddErrorData($S08().Construct("Cannot deserialize sub-objects unless a model is provided"), reader);
    }
    var token = $thisType.StartSubItem(reader);
    if (key >= 0) {
      value.set($S15().CallVirtual("Deserialize", null, reader.model, key, value.get(), reader));
    } else if (!($S16().CallStatic($T1C(), "op_Inequality", null, type, null) && reader.model.TryDeserializeAuxiliaryType(
          reader, 
          $T2A().Default, 
          1, 
          type, 
          /* ref */ value, 
          true, 
          false, 
          true, 
          false
        ))) {
      $T03().ThrowUnexpectedType(type);
    }
    $thisType.EndSubItem(token, reader);
    return value.get();
  };

  function ProtoReader_ReadUInt16 () {
    return $T2B().$OverflowCheck($T2B().$Cast(this.ReadUInt32()));
  };

  function ProtoReader_ReadUInt32 () {
    var $temp00, $temp01, $temp02, $temp03;
    var wireType = this.wireType;
    switch (wireType.valueOf()) {
      case 0: 
        return this.ReadUInt32Variant(false);

      case 1: 
        var num = this.ReadUInt64();
        return $T16().$OverflowCheck((num).ToNumber(4294967295, false));

      default: 
        if (wireType !== $T0C().Fixed32) {
          throw this.CreateWireTypeException();
        }
        if (this.available < 4) {
          this.Ensure(4, true);
        }
        this.position = ((this.position + 4) | 0);
        this.available = ((this.available - 4) | 0);
        return $T16().$Cast((((this.ioBuffer[($temp00 = this.ioIndex, 
                  this.ioIndex = ((this.ioIndex + 1) | 0), 
                  $temp00)] | (this.ioBuffer[($temp01 = this.ioIndex, 
                    this.ioIndex = ((this.ioIndex + 1) | 0), 
                    $temp01)] << 8)) | (this.ioBuffer[($temp02 = this.ioIndex, 
                  this.ioIndex = ((this.ioIndex + 1) | 0), 
                  $temp02)] << 16)) | (this.ioBuffer[($temp03 = this.ioIndex, 
                this.ioIndex = ((this.ioIndex + 1) | 0), 
                $temp03)] << 24)));

    }
  };

  function ProtoReader_ReadUInt32Variant (trimNegative) {
    var result = new JSIL.BoxedVariable(0);
    var num = this.TryReadUInt32VariantWithoutMoving(trimNegative, /* ref */ result);
    if (num > 0) {
      this.ioIndex = ((this.ioIndex + num) | 0);
      this.available = ((this.available - num) | 0);
      this.position = ((this.position + num) | 0);
      return result.get();
    }
    throw $thisType.EoF(this);
  };

  function ProtoReader_ReadUInt64 () {
    var $temp00, $temp01, $temp02, $temp03, $temp04, $temp05, $temp06, $temp07;
    var wireType = this.wireType;
    switch (wireType.valueOf()) {
      case 0: 
        return this.ReadUInt64Variant();

      case 1: 
        if (this.available < 8) {
          this.Ensure(8, true);
        }
        this.position = ((this.position + 8) | 0);
        this.available = ((this.available - 8) | 0);
        return $T23().op_BitwiseOr(
          $T23().op_BitwiseOr(
            $T23().op_BitwiseOr(
              $T23().op_BitwiseOr(
                $T23().op_BitwiseOr(
                  $T23().op_BitwiseOr(
                    $T23().op_BitwiseOr(
                      $T23().FromNumber(this.ioBuffer[($temp00 = this.ioIndex, 
                          this.ioIndex = ((this.ioIndex + 1) | 0), 
                          $temp00)]), 
                      $T23().op_LeftShift($T23().FromNumber(this.ioBuffer[($temp01 = this.ioIndex, 
                            this.ioIndex = ((this.ioIndex + 1) | 0), 
                            $temp01)]), 8)
                    ), 
                    $T23().op_LeftShift($T23().FromNumber(this.ioBuffer[($temp02 = this.ioIndex, 
                          this.ioIndex = ((this.ioIndex + 1) | 0), 
                          $temp02)]), 16)
                  ), 
                  $T23().op_LeftShift($T23().FromNumber(this.ioBuffer[($temp03 = this.ioIndex, 
                        this.ioIndex = ((this.ioIndex + 1) | 0), 
                        $temp03)]), 24)
                ), 
                $T23().op_LeftShift($T23().FromNumber(this.ioBuffer[($temp04 = this.ioIndex, 
                      this.ioIndex = ((this.ioIndex + 1) | 0), 
                      $temp04)]), 32)
              ), 
              $T23().op_LeftShift($T23().FromNumber(this.ioBuffer[($temp05 = this.ioIndex, 
                    this.ioIndex = ((this.ioIndex + 1) | 0), 
                    $temp05)]), 40)
            ), 
            $T23().op_LeftShift($T23().FromNumber(this.ioBuffer[($temp06 = this.ioIndex, 
                  this.ioIndex = ((this.ioIndex + 1) | 0), 
                  $temp06)]), 48)
          ), 
          $T23().op_LeftShift($T23().FromNumber(this.ioBuffer[($temp07 = this.ioIndex, 
                this.ioIndex = ((this.ioIndex + 1) | 0), 
                $temp07)]), 56)
        );

      default: 
        if (wireType !== $T0C().Fixed32) {
          throw this.CreateWireTypeException();
        }
        return $T23().FromNumber(this.ReadUInt32());

    }
  };

  function ProtoReader_ReadUInt64Variant () {
    var result = new JSIL.BoxedVariable($T23().Create(0, 0, 0));
    var num = this.TryReadUInt64VariantWithoutMoving(/* ref */ result);
    if (num > 0) {
      this.ioIndex = ((this.ioIndex + num) | 0);
      this.available = ((this.available - num) | 0);
      this.position = ((this.position + num) | 0);
      return result.get();
    }
    throw $thisType.EoF(this);
  };

  function ProtoReader_Recycle (reader) {
    if (reader !== null) {
      reader.Dispose();
      $thisType.lastReader = reader;
    }
  };

  function ProtoReader_Seek (source, count, $buffer) {
    var buffer = new JSIL.BoxedVariable($buffer);
    var num = 0, num2 = 0;
    if (source.get_CanSeek()) {
      source.Seek($T1F().FromNumber(count), $T2C().Current);
      count = 0;
    } else if (buffer.get() !== null) {

    $loop2: 
      for (; count > buffer.get().length; count = ((count - num) | 0)) {
        if ((num = source.Read(buffer.get(), 0, buffer.get().length)) <= 0) {
          break $loop2;
        }
      }

    $loop3: 
      for (; count > 0; count = ((count - num) | 0)) {
        if ((num = source.Read(buffer.get(), 0, count)) <= 0) {
          break $loop3;
        }
      }
    } else {
      buffer.set($T17().GetBuffer());
      try {

      $loop0: 
        for (; count > buffer.get().length; count = ((count - num2) | 0)) {
          if ((num2 = source.Read(buffer.get(), 0, buffer.get().length)) <= 0) {
            break $loop0;
          }
        }

        for (; (count > 0) && ((num2 = source.Read(buffer.get(), 0, count)) > 0); count = ((count - num2) | 0)) {
        }
      } finally {
        $T17().ReleaseBufferToPool(/* ref */ buffer);
      }
    }
    if (count > 0) {
      throw $thisType.EoF(null);
    }
  };

  function ProtoReader_set_InternStrings (value) {
    this.internStrings = value;
  };

  function ProtoReader_SetRootObject (value) {
    this.netCache.SetKeyedObject(0, value);
    this.trapCount = ((this.trapCount - 1) >>> 0);
  };

  function ProtoReader_SkipField () {
    switch (this.wireType.valueOf()) {
      case 0: 
      case 8: 
        this.ReadUInt64Variant();
        return;

      case 1: 
        if (this.available < 8) {
          this.Ensure(8, true);
        }
        this.available = ((this.available - 8) | 0);
        this.ioIndex = ((this.ioIndex + 8) | 0);
        this.position = ((this.position + 8) | 0);
        return;

      case 2: 
        var num = $T05().$Cast(this.ReadUInt32Variant(false));
        if (num <= this.available) {
          this.available = ((this.available - num) | 0);
          this.ioIndex = ((this.ioIndex + num) | 0);
          this.position = ((this.position + num) | 0);
          return;
        }
        this.position = ((this.position + num) | 0);
        num = ((num - this.available) | 0);
        this.ioIndex = (this.available = 0);
        if (this.isFixedLength) {
          if (num > this.dataRemaining) {
            throw $thisType.EoF(this);
          }
          this.dataRemaining = ((this.dataRemaining - num) | 0);
        }
        $thisType.Seek(this.source, num, this.ioBuffer);
        return;

      case 3: 
        this.depth = ((this.depth + 1) | 0);

        while (this.ReadFieldHeader() > 0) {
          this.SkipField();
        }
        this.depth = ((this.depth - 1) | 0);
        if (!((this.wireType !== $T0C().EndGroup) || (this.fieldNumber !== this.fieldNumber))) {
          this.wireType = $T0C().None;
          return;
        }
        throw this.CreateWireTypeException();

      case 5: 
        if (this.available < 4) {
          this.Ensure(4, true);
        }
        this.available = ((this.available - 4) | 0);
        this.ioIndex = ((this.ioIndex + 4) | 0);
        this.position = ((this.position + 4) | 0);
        return;

    }
    throw this.CreateWireTypeException();
  };

  function ProtoReader_StartSubItem (reader) {
    if (reader === null) {
      throw $S01().Construct("reader");
    }
    switch (reader.wireType.valueOf()) {
      case 2: 
        var num = $T05().$Cast(reader.ReadUInt32Variant(false));
        if (num < 0) {
          throw $thisType.AddErrorData($S0F().Construct(), reader);
        }
        var value = reader.blockEnd;
        reader.blockEnd = ((reader.position + num) | 0);
        reader.depth = ((reader.depth + 1) | 0);
        return new ($T13())(value);

      case 3: 
        reader.wireType = $T0C().None;
        reader.depth = ((reader.depth + 1) | 0);
        return new ($T13())((-reader.fieldNumber | 0));

      default: 
        throw reader.CreateWireTypeException();

    }
  };

  function ProtoReader_ThrowEnumException (type, value) {
    var str = ($S17().CallStatic($T1C(), "op_Equality", null, type, null) ? "<null>" : type.get_FullName());
    throw $thisType.AddErrorData($S02().Construct(("No " + str + " enum is mapped to the wire-value " + (value).toString())), this);
  };

  function ProtoReader_TrapNextObject (newObjectKey) {
    this.trapCount = ((this.trapCount + 1) >>> 0);
    this.netCache.SetKeyedObject(newObjectKey, null);
  };

  function ProtoReader_TryReadFieldHeader (field) {
    var num2 = new JSIL.BoxedVariable(0);
    var wireType = $asm08.ProtoBuf.WireType.None;
    if (!((this.blockEnd > this.position) && (this.wireType !== $T0C().EndGroup))) {
      return false;
    }
    var num = this.TryReadUInt32VariantWithoutMoving(false, /* ref */ num2);
    if (!((num <= 0) || 
        (($T05().$Cast(num2.get()) >> 3) !== field) || ((wireType = $T0C().$Cast((num2.get() & 7))) === $T0C().EndGroup))) {
      this.wireType = wireType;
      this.fieldNumber = field;
      this.position = ((this.position + num) | 0);
      this.ioIndex = ((this.ioIndex + num) | 0);
      this.available = ((this.available - num) | 0);
      return true;
    }
    return false;
  };

  function ProtoReader_TryReadUInt32Variant$06 (/* ref */ value) {
    var num = this.TryReadUInt32VariantWithoutMoving(false, /* ref */ value);
    if (num > 0) {
      this.ioIndex = ((this.ioIndex + num) | 0);
      this.available = ((this.available - num) | 0);
      this.position = ((this.position + num) | 0);
      return true;
    }
    return false;
  };

  function ProtoReader_TryReadUInt32Variant$07 (source, /* ref */ value) {
    value.set(0);
    var num = source.ReadByte();
    if (num < 0) {
      return 0;
    }
    value.set($T16().$Cast(num));
    if ((value.get() & 128) === 0) {
      return 1;
    }
    value.set((value.get() & 127));
    num = source.ReadByte();
    if (num < 0) {
      throw $thisType.EoF(null);
    }
    value.set((value.get() | $T16().$Cast(($T16().$Cast((num & 127)) << 7))));
    if ((num & 128) === 0) {
      return 2;
    }
    num = source.ReadByte();
    if (num < 0) {
      throw $thisType.EoF(null);
    }
    value.set((value.get() | $T16().$Cast(($T16().$Cast((num & 127)) << 14))));
    if ((num & 128) === 0) {
      return 3;
    }
    num = source.ReadByte();
    if (num < 0) {
      throw $thisType.EoF(null);
    }
    value.set((value.get() | $T16().$Cast(($T16().$Cast((num & 127)) << 21))));
    if ((num & 128) === 0) {
      return 4;
    }
    num = source.ReadByte();
    if (num < 0) {
      throw $thisType.EoF(null);
    }
    value.set((value.get() | $T16().$Cast(($T16().$Cast(num) << 28))));
    if ((num & 240) === 0) {
      return 5;
    }
    throw $S14().Construct();
  };

  function ProtoReader_TryReadUInt32VariantWithoutMoving (trimNegative, /* ref */ value) {
    var $temp00, $temp01, $temp02, $temp03;
    if (this.available < 10) {
      this.Ensure(10, false);
    }
    if (this.available === 0) {
      value.set(0);
      return 0;
    }
    var num = this.ioIndex;
    value.set(this.ioBuffer[($temp00 = num, 
        num = ((num + 1) | 0), 
        $temp00)]);
    if ((value.get() & 128) === 0) {
      return 1;
    }
    value.set((value.get() & 127));
    if (this.available === 1) {
      throw $thisType.EoF(this);
    }
    var num2 = this.ioBuffer[($temp01 = num, 
      num = ((num + 1) | 0), 
      $temp01)];
    value.set((value.get() | ((num2 & 127) << 7)));
    if ((num2 & 128) === 0) {
      return 2;
    }
    if (this.available === 2) {
      throw $thisType.EoF(this);
    }
    num2 = this.ioBuffer[($temp02 = num, 
      num = ((num + 1) | 0), 
      $temp02)];
    value.set((value.get() | ((num2 & 127) << 14)));
    if ((num2 & 128) === 0) {
      return 3;
    }
    if (this.available === 3) {
      throw $thisType.EoF(this);
    }
    num2 = this.ioBuffer[($temp03 = num, 
      num = ((num + 1) | 0), 
      $temp03)];
    value.set((value.get() | ((num2 & 127) << 21)));
    if ((num2 & 128) === 0) {
      return 4;
    }
    if (this.available === 4) {
      throw $thisType.EoF(this);
    }
    num2 = this.ioBuffer[num];
    value.set((value.get() | (num2 << 28)));
    if ((num2 & 240) === 0) {
      return 5;
    }
    if (!(!trimNegative || 
        ((num2 & 240) !== 240) || 
        (this.available < 10) || 
        (this.ioBuffer[(num = ((num + 1) | 0))] !== 255) || 
        (this.ioBuffer[(num = ((num + 1) | 0))] !== 255) || 
        (this.ioBuffer[(num = ((num + 1) | 0))] !== 255) || 
        (this.ioBuffer[(num = ((num + 1) | 0))] !== 255) || (this.ioBuffer[((num + 1) | 0)] !== 1))) {
      return 10;
    }
    throw $thisType.AddErrorData($S14().Construct(), this);
  };

  function ProtoReader_TryReadUInt64VariantWithoutMoving (/* ref */ value) {
    var $temp00, $temp01, $temp02, $temp03, $temp04, $temp05, $temp06, $temp07, $temp08;
    if (this.available < 10) {
      this.Ensure(10, false);
    }
    if (this.available === 0) {
      value.set($T23().Create(0, 0, 0));
      return 0;
    }
    var num = this.ioIndex;
    value.set($T23().FromNumber(this.ioBuffer[($temp00 = num, 
          num = ((num + 1) | 0), 
          $temp00)]));
    if (!$T23().op_Inequality(
        $T23().op_BitwiseAnd(
          value.get(), 
          $T23().Create(128, 0, 0)
        ), 
        $T23().Create(0, 0, 0)
      )) {
      return 1;
    }
    value.set($T23().op_BitwiseAnd(
        value.get(), 
        $T23().Create(127, 0, 0)
      ));
    if (this.available === 1) {
      throw $thisType.EoF(this);
    }
    var num2 = $T23().FromNumber(this.ioBuffer[($temp01 = num, 
        num = ((num + 1) | 0), 
        $temp01)]);
    value.set($T23().op_BitwiseOr(
        value.get(), 
        $T23().op_LeftShift($T23().op_BitwiseAnd(
            num2, 
            $T23().Create(127, 0, 0)
          ), 7)
      ));
    if (!$T23().op_Inequality(
        $T23().op_BitwiseAnd(
          num2, 
          $T23().Create(128, 0, 0)
        ), 
        $T23().Create(0, 0, 0)
      )) {
      return 2;
    }
    if (this.available === 2) {
      throw $thisType.EoF(this);
    }
    num2 = $T23().FromNumber(this.ioBuffer[($temp02 = num, 
        num = ((num + 1) | 0), 
        $temp02)]);
    value.set($T23().op_BitwiseOr(
        value.get(), 
        $T23().op_LeftShift($T23().op_BitwiseAnd(
            num2, 
            $T23().Create(127, 0, 0)
          ), 14)
      ));
    if (!$T23().op_Inequality(
        $T23().op_BitwiseAnd(
          num2, 
          $T23().Create(128, 0, 0)
        ), 
        $T23().Create(0, 0, 0)
      )) {
      return 3;
    }
    if (this.available === 3) {
      throw $thisType.EoF(this);
    }
    num2 = $T23().FromNumber(this.ioBuffer[($temp03 = num, 
        num = ((num + 1) | 0), 
        $temp03)]);
    value.set($T23().op_BitwiseOr(
        value.get(), 
        $T23().op_LeftShift($T23().op_BitwiseAnd(
            num2, 
            $T23().Create(127, 0, 0)
          ), 21)
      ));
    if (!$T23().op_Inequality(
        $T23().op_BitwiseAnd(
          num2, 
          $T23().Create(128, 0, 0)
        ), 
        $T23().Create(0, 0, 0)
      )) {
      return 4;
    }
    if (this.available === 4) {
      throw $thisType.EoF(this);
    }
    num2 = $T23().FromNumber(this.ioBuffer[($temp04 = num, 
        num = ((num + 1) | 0), 
        $temp04)]);
    value.set($T23().op_BitwiseOr(
        value.get(), 
        $T23().op_LeftShift($T23().op_BitwiseAnd(
            num2, 
            $T23().Create(127, 0, 0)
          ), 28)
      ));
    if (!$T23().op_Inequality(
        $T23().op_BitwiseAnd(
          num2, 
          $T23().Create(128, 0, 0)
        ), 
        $T23().Create(0, 0, 0)
      )) {
      return 5;
    }
    if (this.available === 5) {
      throw $thisType.EoF(this);
    }
    num2 = $T23().FromNumber(this.ioBuffer[($temp05 = num, 
        num = ((num + 1) | 0), 
        $temp05)]);
    value.set($T23().op_BitwiseOr(
        value.get(), 
        $T23().op_LeftShift($T23().op_BitwiseAnd(
            num2, 
            $T23().Create(127, 0, 0)
          ), 35)
      ));
    if (!$T23().op_Inequality(
        $T23().op_BitwiseAnd(
          num2, 
          $T23().Create(128, 0, 0)
        ), 
        $T23().Create(0, 0, 0)
      )) {
      return 6;
    }
    if (this.available === 6) {
      throw $thisType.EoF(this);
    }
    num2 = $T23().FromNumber(this.ioBuffer[($temp06 = num, 
        num = ((num + 1) | 0), 
        $temp06)]);
    value.set($T23().op_BitwiseOr(
        value.get(), 
        $T23().op_LeftShift($T23().op_BitwiseAnd(
            num2, 
            $T23().Create(127, 0, 0)
          ), 42)
      ));
    if (!$T23().op_Inequality(
        $T23().op_BitwiseAnd(
          num2, 
          $T23().Create(128, 0, 0)
        ), 
        $T23().Create(0, 0, 0)
      )) {
      return 7;
    }
    if (this.available === 7) {
      throw $thisType.EoF(this);
    }
    num2 = $T23().FromNumber(this.ioBuffer[($temp07 = num, 
        num = ((num + 1) | 0), 
        $temp07)]);
    value.set($T23().op_BitwiseOr(
        value.get(), 
        $T23().op_LeftShift($T23().op_BitwiseAnd(
            num2, 
            $T23().Create(127, 0, 0)
          ), 49)
      ));
    if (!$T23().op_Inequality(
        $T23().op_BitwiseAnd(
          num2, 
          $T23().Create(128, 0, 0)
        ), 
        $T23().Create(0, 0, 0)
      )) {
      return 8;
    }
    if (this.available === 8) {
      throw $thisType.EoF(this);
    }
    num2 = $T23().FromNumber(this.ioBuffer[($temp08 = num, 
        num = ((num + 1) | 0), 
        $temp08)]);
    value.set($T23().op_BitwiseOr(
        value.get(), 
        $T23().op_LeftShift($T23().op_BitwiseAnd(
            num2, 
            $T23().Create(127, 0, 0)
          ), 56)
      ));
    if (!$T23().op_Inequality(
        $T23().op_BitwiseAnd(
          num2, 
          $T23().Create(128, 0, 0)
        ), 
        $T23().Create(0, 0, 0)
      )) {
      return 9;
    }
    if (this.available === 9) {
      throw $thisType.EoF(this);
    }
    num2 = $T23().FromNumber(this.ioBuffer[num]);
    value.set($T23().op_BitwiseOr(
        value.get(), 
        $T23().op_LeftShift(num2, 63)
      ));
    if (!$T23().op_Equality(
        $T23().op_BitwiseAnd(
          num2, 
          $T23().Create(16777214, 16777215, 65535)
        ), 
        $T23().Create(0, 0, 0)
      )) {
      throw $thisType.AddErrorData($S14().Construct(), this);
    }
    return 10;
  };

  function ProtoReader_Zag$08 (ziggedValue) {
    return $T05().$Cast(((-(ziggedValue & 1) >>> 0) ^ $T16().$Cast((($T05().$Cast(ziggedValue) >> 1) & 2147483647))));
  };

  function ProtoReader_Zag$09 (ziggedValue) {
    return ($T23().op_ExclusiveOr(
        $T1F().op_UnaryNegation(($T23().op_BitwiseAnd(
              ziggedValue, 
              $T23().Create(1, 0, 0)
            )).ToInt64()), 
        $T23().op_BitwiseAnd(
          $T23().op_RightShift(ziggedValue, 1), 
          $T23().Create(16777215, 16777215, 32767)
        )
      )).ToInt64();
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.ProtoReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), 
          $asm08.TypeRef("ProtoBuf.SerializationContext")
        ], []), 
      ProtoReader__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), 
          $asm08.TypeRef("ProtoBuf.SerializationContext"), $.Int32
        ], []), 
      ProtoReader__ctor$01
    );

    $.Method({Static:true , Public:false}, "AddErrorData", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$asm07.TypeRef("System.Exception"), $.Type], []), 
      ProtoReader_AddErrorData
    );

    $.Method({Static:true , Public:true }, "AppendBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Type], []), 
      ProtoReader_AppendBytes
    );

    $.Method({Static:false, Public:true }, "AppendExtensionData", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.IExtensible")], []), 
      ProtoReader_AppendExtensionData
    );

    $.Method({Static:false, Public:false}, "AppendExtensionField", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.ProtoWriter")], []), 
      ProtoReader_AppendExtensionField
    );

    $.Method({Static:false, Public:true }, "Assert", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.WireType")], []), 
      ProtoReader_Assert
    );

    $.Method({Static:false, Public:false}, "CheckFullyConsumed", 
      new JSIL.MethodSignature(null, [], []), 
      ProtoReader_CheckFullyConsumed
    );

    $.Method({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.IO.Stream"), $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), 
          $asm08.TypeRef("ProtoBuf.SerializationContext"), $.Int32
        ], []), 
      ProtoReader_Create
    );

    $.Method({Static:false, Public:false}, "CreateException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.String], []), 
      ProtoReader_CreateException
    );

    $.Method({Static:false, Public:false}, "CreateWireTypeException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [], []), 
      ProtoReader_CreateWireTypeException
    );

    $.Method({Static:false, Public:false}, "DeserializeType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [$.String], []), 
      ProtoReader_DeserializeType
    );

    $.Method({Static:true , Public:true }, "DirectReadBigEndianInt32", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IO.Stream")], []), 
      ProtoReader_DirectReadBigEndianInt32
    );

    $.Method({Static:true , Public:true }, "DirectReadBytes", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ], []), 
      ProtoReader_DirectReadBytes$02
    );

    $.Method({Static:true , Public:true }, "DirectReadBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm07.TypeRef("System.IO.Stream"), $.Int32], []), 
      ProtoReader_DirectReadBytes$03
    );

    $.Method({Static:true , Public:true }, "DirectReadLittleEndianInt32", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IO.Stream")], []), 
      ProtoReader_DirectReadLittleEndianInt32
    );

    $.Method({Static:true , Public:true }, "DirectReadString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.IO.Stream"), $.Int32], []), 
      ProtoReader_DirectReadString
    );

    $.Method({Static:true , Public:true }, "DirectReadVarintInt32", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IO.Stream")], []), 
      ProtoReader_DirectReadVarintInt32
    );

    $.Method({Static:false, Public:true , Virtual:true }, "Dispose", 
      new JSIL.MethodSignature(null, [], []), 
      ProtoReader_Dispose
    );

    $.Method({Static:true , Public:true }, "EndSubItem", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.SubItemToken"), $.Type], []), 
      ProtoReader_EndSubItem
    );

    $.Method({Static:false, Public:false}, "Ensure", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean], []), 
      ProtoReader_Ensure
    );

    $.Method({Static:true , Public:false}, "EoF", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Exception"), [$.Type], []), 
      ProtoReader_EoF
    );

    $.Method({Static:false, Public:true }, "get_Context", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.SerializationContext"), [], []), 
      ProtoReader_get_Context
    );

    $.Method({Static:false, Public:true }, "get_FieldNumber", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ProtoReader_get_FieldNumber
    );

    $.Method({Static:false, Public:true }, "get_InternStrings", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ProtoReader_get_InternStrings
    );

    $.Method({Static:false, Public:true }, "get_Model", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.Meta.TypeModel"), [], []), 
      ProtoReader_get_Model
    );

    $.Method({Static:false, Public:false}, "get_NetCache", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.NetObjectCache"), [], []), 
      ProtoReader_get_NetCache
    );

    $.Method({Static:false, Public:true }, "get_Position", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ProtoReader_get_Position
    );

    $.Method({Static:false, Public:true }, "get_WireType", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.WireType"), [], []), 
      ProtoReader_get_WireType
    );

    $.Method({Static:true , Public:false}, "GetRecycled", 
      new JSIL.MethodSignature($.Type, [], []), 
      ProtoReader_GetRecycled
    );

    $.Method({Static:false, Public:false}, "GetTypeKey", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Type")])], []), 
      ProtoReader_GetTypeKey
    );

    $.Method({Static:true , Public:true }, "HasSubValue", 
      new JSIL.MethodSignature($.Boolean, [$asm08.TypeRef("ProtoBuf.WireType"), $.Type], []), 
      ProtoReader_HasSubValue
    );

    $.Method({Static:false, Public:true }, "Hint", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.WireType")], []), 
      ProtoReader_Hint
    );

    $.Method({Static:true , Public:false}, "Init", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm07.TypeRef("System.IO.Stream"), 
          $asm08.TypeRef("ProtoBuf.Meta.TypeModel"), $asm08.TypeRef("ProtoBuf.SerializationContext"), 
          $.Int32
        ], []), 
      ProtoReader_Init
    );

    $.Method({Static:false, Public:false}, "Intern", 
      new JSIL.MethodSignature($.String, [$.String], []), 
      ProtoReader_Intern
    );

    $.Method({Static:true , Public:true }, "Merge", 
      new JSIL.MethodSignature($.Object, [
          $.Type, $.Object, 
          $.Object
        ], []), 
      ProtoReader_Merge
    );

    $.Method({Static:true , Public:true }, "NoteObject", 
      new JSIL.MethodSignature(null, [$.Object, $.Type], []), 
      ProtoReader_NoteObject
    );

    $.Method({Static:false, Public:true }, "ReadBoolean", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ProtoReader_ReadBoolean
    );

    $.Method({Static:false, Public:true }, "ReadByte", 
      new JSIL.MethodSignature($.Byte, [], []), 
      ProtoReader_ReadByte
    );

    $.Method({Static:true , Public:false}, "ReadByteOrThrow", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IO.Stream")], []), 
      ProtoReader_ReadByteOrThrow
    );

    $.Method({Static:false, Public:true }, "ReadDouble", 
      new JSIL.MethodSignature($.Double, [], []), 
      ProtoReader_ReadDouble
    );

    $.Method({Static:false, Public:true }, "ReadFieldHeader", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ProtoReader_ReadFieldHeader
    );

    $.Method({Static:false, Public:true }, "ReadInt16", 
      new JSIL.MethodSignature($.Int16, [], []), 
      ProtoReader_ReadInt16
    );

    $.Method({Static:false, Public:true }, "ReadInt32", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ProtoReader_ReadInt32
    );

    $.Method({Static:false, Public:true }, "ReadInt64", 
      new JSIL.MethodSignature($.Int64, [], []), 
      ProtoReader_ReadInt64
    );

    $.Method({Static:true , Public:true }, "ReadLengthPrefix", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("System.IO.Stream"), $.Boolean, 
          $asm08.TypeRef("ProtoBuf.PrefixStyle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], []), 
      ProtoReader_ReadLengthPrefix$04
    );

    $.Method({Static:true , Public:true }, "ReadLengthPrefix", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("System.IO.Stream"), $.Boolean, 
          $asm08.TypeRef("ProtoBuf.PrefixStyle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ], []), 
      ProtoReader_ReadLengthPrefix$05
    );

    $.Method({Static:true , Public:true }, "ReadObject", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Int32, 
          $.Type
        ], []), 
      ProtoReader_ReadObject
    );

    $.Method({Static:false, Public:true }, "ReadSByte", 
      new JSIL.MethodSignature($.SByte, [], []), 
      ProtoReader_ReadSByte
    );

    $.Method({Static:false, Public:true }, "ReadSingle", 
      new JSIL.MethodSignature($.Single, [], []), 
      ProtoReader_ReadSingle
    );

    $.Method({Static:false, Public:true }, "ReadString", 
      new JSIL.MethodSignature($.String, [], []), 
      ProtoReader_ReadString
    );

    $.Method({Static:false, Public:true }, "ReadType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Type"), [], []), 
      ProtoReader_ReadType
    );

    $.Method({Static:true , Public:false}, "ReadTypedObject", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $.Int32, 
          $.Type, $asm07.TypeRef("System.Type")
        ], []), 
      ProtoReader_ReadTypedObject
    );

    $.Method({Static:false, Public:true }, "ReadUInt16", 
      new JSIL.MethodSignature($.UInt16, [], []), 
      ProtoReader_ReadUInt16
    );

    $.Method({Static:false, Public:true }, "ReadUInt32", 
      new JSIL.MethodSignature($.UInt32, [], []), 
      ProtoReader_ReadUInt32
    );

    $.Method({Static:false, Public:false}, "ReadUInt32Variant", 
      new JSIL.MethodSignature($.UInt32, [$.Boolean], []), 
      ProtoReader_ReadUInt32Variant
    );

    $.Method({Static:false, Public:true }, "ReadUInt64", 
      new JSIL.MethodSignature($.UInt64, [], []), 
      ProtoReader_ReadUInt64
    );

    $.Method({Static:false, Public:false}, "ReadUInt64Variant", 
      new JSIL.MethodSignature($.UInt64, [], []), 
      ProtoReader_ReadUInt64Variant
    );

    $.Method({Static:true , Public:false}, "Recycle", 
      new JSIL.MethodSignature(null, [$.Type], []), 
      ProtoReader_Recycle
    );

    $.Method({Static:true , Public:false}, "Seek", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.IO.Stream"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ], []), 
      ProtoReader_Seek
    );

    $.Method({Static:false, Public:true }, "set_InternStrings", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      ProtoReader_set_InternStrings
    );

    $.Method({Static:false, Public:false}, "SetRootObject", 
      new JSIL.MethodSignature(null, [$.Object], []), 
      ProtoReader_SetRootObject
    );

    $.Method({Static:false, Public:true }, "SkipField", 
      new JSIL.MethodSignature(null, [], []), 
      ProtoReader_SkipField
    );

    $.Method({Static:true , Public:true }, "StartSubItem", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.SubItemToken"), [$.Type], []), 
      ProtoReader_StartSubItem
    );

    $.Method({Static:false, Public:true }, "ThrowEnumException", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Type"), $.Int32], []), 
      ProtoReader_ThrowEnumException
    );

    $.Method({Static:false, Public:false}, "TrapNextObject", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      ProtoReader_TrapNextObject
    );

    $.Method({Static:false, Public:true }, "TryReadFieldHeader", 
      new JSIL.MethodSignature($.Boolean, [$.Int32], []), 
      ProtoReader_TryReadFieldHeader
    );

    $.Method({Static:false, Public:false}, "TryReadUInt32Variant", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], []), 
      ProtoReader_TryReadUInt32Variant$06
    );

    $.Method({Static:true , Public:false}, "TryReadUInt32Variant", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], []), 
      ProtoReader_TryReadUInt32Variant$07
    );

    $.Method({Static:false, Public:false}, "TryReadUInt32VariantWithoutMoving", 
      new JSIL.MethodSignature($.Int32, [$.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])], []), 
      ProtoReader_TryReadUInt32VariantWithoutMoving
    );

    $.Method({Static:false, Public:false}, "TryReadUInt64VariantWithoutMoving", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.UInt64])], []), 
      ProtoReader_TryReadUInt64VariantWithoutMoving
    );

    $.Method({Static:true , Public:false}, "Zag", 
      new JSIL.MethodSignature($.Int32, [$.UInt32], []), 
      ProtoReader_Zag$08
    );

    $.Method({Static:true , Public:false}, "Zag", 
      new JSIL.MethodSignature($.Int64, [$.UInt64], []), 
      ProtoReader_Zag$09
    );

    $.Constant({Static:true , Public:false}, "TO_EOF", -1); 
    $.Constant({Static:true , Public:false}, "Int64Msb", -9223372036854775808); 
    $.Constant({Static:true , Public:false}, "Int32Msb", -2147483648); 
    $.Field({Static:false, Public:false}, "source", $asm07.TypeRef("System.IO.Stream")); 
    $.Field({Static:false, Public:false}, "ioBuffer", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Field({Static:false, Public:false}, "model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel")); 
    $.Field({Static:false, Public:false}, "fieldNumber", $.Int32); 
    $.Field({Static:false, Public:false}, "depth", $.Int32); 
    $.Field({Static:false, Public:false}, "dataRemaining", $.Int32); 
    $.Field({Static:false, Public:false}, "ioIndex", $.Int32); 
    $.Field({Static:false, Public:false}, "position", $.Int32); 
    $.Field({Static:false, Public:false}, "available", $.Int32); 
    $.Field({Static:false, Public:false}, "blockEnd", $.Int32); 
    $.Field({Static:false, Public:false}, "wireType", $asm08.TypeRef("ProtoBuf.WireType")); 
    $.Field({Static:false, Public:false}, "isFixedLength", $.Boolean); 
    $.Field({Static:false, Public:false}, "internStrings", $.Boolean); 
    $.Field({Static:false, Public:false}, "netCache", $asm08.TypeRef("ProtoBuf.NetObjectCache")); 
    $.Field({Static:false, Public:false}, "trapCount", $.UInt32); 
    $.Field({Static:false, Public:false}, "context", $asm08.TypeRef("ProtoBuf.SerializationContext")); 
    $.Field({Static:false, Public:false}, "stringInterner", $asm07.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.String])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "encoding", $asm07.TypeRef("System.Text.UTF8Encoding")); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "EmptyBlob", $jsilcore.TypeRef("System.Array", [$.Byte]), function ($pi) {
        return JSIL.Array.New($asm07.System.Byte, 0);
      }); 
    $.Field({Static:true , Public:false}, "lastReader", $.Type)
      .Attribute($asm07.TypeRef("System.ThreadStaticAttribute")); 
    function ProtoReader__cctor () {
      $thisType.encoding = $S00().Construct();
      $thisType.EmptyBlob = JSIL.Array.New($T01(), 0);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      ProtoReader__cctor
    );

    $.Property({Static:false, Public:true }, "FieldNumber", $.Int32);

    $.Property({Static:false, Public:true }, "WireType", $asm08.TypeRef("ProtoBuf.WireType"));

    $.Property({Static:false, Public:true }, "InternStrings", $.Boolean);

    $.Property({Static:false, Public:true }, "Context", $asm08.TypeRef("ProtoBuf.SerializationContext"));

    $.Property({Static:false, Public:true }, "Position", $.Int32);

    $.Property({Static:false, Public:true }, "Model", $asm08.TypeRef("ProtoBuf.Meta.TypeModel"));

    $.Property({Static:false, Public:false}, "NetCache", $asm08.TypeRef("ProtoBuf.NetObjectCache"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.IDisposable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.SerializationContext */ 

(function SerializationContext$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Runtime.Serialization.StreamingContextStates)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Runtime.Serialization.StreamingContext)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Runtime.Serialization.StreamingContext"), [$asm07.TypeRef("System.Runtime.Serialization.StreamingContextStates")]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Runtime.Serialization.StreamingContext"), [$asm07.TypeRef("System.Runtime.Serialization.StreamingContextStates"), $asm07.TypeRef("System.Object")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.InvalidOperationException"), [$asm07.TypeRef("System.String")]))) ();
  };

  function SerializationContext__ctor () {
    this.state = $T00().Persistence;
  };

  function SerializationContext_Freeze () {
    this.frozen = true;
  };

  function SerializationContext_get_Context () {
    return this.context;
  };

  function SerializationContext_get_Default () {
    return $thisType.$default;
  };

  function SerializationContext_get_State () {
    return this.state;
  };

  function SerializationContext_op_Implicit$00 (ctx) {
    if (ctx === null) {
      return $S00().Construct($T00().Persistence);
    }
    return $S01().Construct(ctx.state, ctx.context);
  };

  function SerializationContext_op_Implicit$01 (ctx) {
    return (new $thisType()).__Initialize__({
        Context: ctx.get_Context(), 
        State: ctx.get_State()}
    );
  };

  function SerializationContext_set_Context (value) {
    if (this.context !== value) {
      this.ThrowIfFrozen();
      this.context = value;
    }
  };

  function SerializationContext_set_State (value) {
    if (this.state !== value) {
      this.ThrowIfFrozen();
      this.state = value;
    }
  };

  function SerializationContext_ThrowIfFrozen () {
    if (this.frozen) {
      throw $S02().Construct("The serialization-context cannot be changed once it is in use");
    }
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Object"), 
      Name: "ProtoBuf.SerializationContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      SerializationContext__ctor
    );

    $.Method({Static:false, Public:false}, "Freeze", 
      new JSIL.MethodSignature(null, [], []), 
      SerializationContext_Freeze
    );

    $.Method({Static:false, Public:true }, "get_Context", 
      new JSIL.MethodSignature($.Object, [], []), 
      SerializationContext_get_Context
    );

    $.Method({Static:true , Public:false}, "get_Default", 
      new JSIL.MethodSignature($.Type, [], []), 
      SerializationContext_get_Default
    );

    $.Method({Static:false, Public:true }, "get_State", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.Serialization.StreamingContextStates"), [], []), 
      SerializationContext_get_State
    );

    $.Method({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Runtime.Serialization.StreamingContext"), [$.Type], []), 
      SerializationContext_op_Implicit$00
    );

    $.Method({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Runtime.Serialization.StreamingContext")], []), 
      SerializationContext_op_Implicit$01
    );

    $.Method({Static:false, Public:true }, "set_Context", 
      new JSIL.MethodSignature(null, [$.Object], []), 
      SerializationContext_set_Context
    );

    $.Method({Static:false, Public:true }, "set_State", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.StreamingContextStates")], []), 
      SerializationContext_set_State
    );

    $.Method({Static:false, Public:false}, "ThrowIfFrozen", 
      new JSIL.MethodSignature(null, [], []), 
      SerializationContext_ThrowIfFrozen
    );

    $.Field({Static:false, Public:false}, "frozen", $.Boolean); 
    $.Field({Static:false, Public:false}, "context", $.Object); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "$default", $.Type); 
    $.Field({Static:false, Public:false}, "state", $asm07.TypeRef("System.Runtime.Serialization.StreamingContextStates")); 
    function SerializationContext__cctor () {
      $thisType.$default = new $thisType();
      $thisType.$default.Freeze();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      SerializationContext__cctor
    );

    $.Property({Static:false, Public:true }, "Context", $.Object);

    $.Property({Static:true , Public:false}, "Default", $.Type);

    $.Property({Static:false, Public:true }, "State", $asm07.TypeRef("System.Runtime.Serialization.StreamingContextStates"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ProtoMemberAttribute */ 

(function ProtoMemberAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Attribute)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.ArgumentOutOfRangeException)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm08.ProtoBuf.MemberSerializationOptions)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.ProtoBuf.DataFormat)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Boolean")], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentOutOfRangeException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Int32"), [$asm08.TypeRef("ProtoBuf.ProtoMemberAttribute")], []))) ();
  };

  function ProtoMemberAttribute__ctor$00 (tag) {
    $S00().Call($thisType.prototype, "_ctor", null, this, tag, false);
  };

  function ProtoMemberAttribute__ctor$01 (tag, forced) {
    $T02().prototype._ctor.call(this);
    if (!((tag > 0) || forced)) {
      throw $S01().Construct("tag");
    }
    this.tag = tag;
  };

  function ProtoMemberAttribute_CompareTo$02 (other) {
    return $S02().CallVirtual("CompareTo", null, this, $thisType.$As(other));
  };

  function ProtoMemberAttribute_CompareTo$03 (other) {
    if (other === null) {
      return -1;
    }
    if (this === other) {
      return 0;
    }
    var num = (JSIL.CompareValues(this.tag, other.tag));
    if (num === 0) {
      num = $T05().CompareOrdinal(this.$name, other.$name);
    }
    return num;
  };

  function ProtoMemberAttribute_get_AsReference () {
    return ($T06().$Cast((this.options & $T06().AsReference)) === $T06().AsReference);
  };

  function ProtoMemberAttribute_get_AsReferenceHasValue () {
    return ($T06().$Cast((this.options & $T06().AsReferenceHasValue)) === $T06().AsReferenceHasValue);
  };

  function ProtoMemberAttribute_get_DataFormat () {
    return this.dataFormat;
  };

  function ProtoMemberAttribute_get_DynamicType () {
    return ($T06().$Cast((this.options & $T06().DynamicType)) === $T06().DynamicType);
  };

  function ProtoMemberAttribute_get_IsPacked () {
    return ($T06().$Cast((this.options & $T06().Packed)) === $T06().Packed);
  };

  function ProtoMemberAttribute_get_IsRequired () {
    return ($T06().$Cast((this.options & $T06().Required)) === $T06().Required);
  };

  function ProtoMemberAttribute_get_Name () {
    return this.$name;
  };

  function ProtoMemberAttribute_get_Options () {
    return this.options;
  };

  function ProtoMemberAttribute_get_OverwriteList () {
    return ($T06().$Cast((this.options & $T06().OverwriteList)) === $T06().OverwriteList);
  };

  function ProtoMemberAttribute_get_Tag () {
    return this.tag;
  };

  function ProtoMemberAttribute_Rebase (tag) {
    this.tag = tag;
  };

  function ProtoMemberAttribute_set_AsReference (value) {
    if (value) {
      this.options = $T06().$Cast((this.options | $T06().AsReference));
    } else {
      this.options = $T06().$Cast((this.options & $T06().$Flags(
              "AsReferenceHasValue", "DynamicType", "OverwriteList", "Packed", 
              "Required"
          )));
    }
    this.options = $T06().$Cast((this.options | $T06().AsReferenceHasValue));
  };

  function ProtoMemberAttribute_set_AsReferenceHasValue (value) {
    if (value) {
      this.options = $T06().$Cast((this.options | $T06().AsReferenceHasValue));
      return;
    }
    this.options = $T06().$Cast((this.options & $T06().$Flags(
            "AsReference", "DynamicType", "OverwriteList", "Packed", 
            "Required"
        )));
  };

  function ProtoMemberAttribute_set_DataFormat (value) {
    this.dataFormat = value;
  };

  function ProtoMemberAttribute_set_DynamicType (value) {
    if (value) {
      this.options = $T06().$Cast((this.options | $T06().DynamicType));
      return;
    }
    this.options = $T06().$Cast((this.options & $T06().$Flags(
            "AsReference", "AsReferenceHasValue", "OverwriteList", "Packed", 
            "Required"
        )));
  };

  function ProtoMemberAttribute_set_IsPacked (value) {
    if (value) {
      this.options = $T06().$Cast((this.options | $T06().Packed));
      return;
    }
    this.options = $T06().$Cast((this.options & $T06().$Flags(
            "AsReference", "AsReferenceHasValue", "DynamicType", "OverwriteList", 
            "Required"
        )));
  };

  function ProtoMemberAttribute_set_IsRequired (value) {
    if (value) {
      this.options = $T06().$Cast((this.options | $T06().Required));
      return;
    }
    this.options = $T06().$Cast((this.options & $T06().$Flags(
            "AsReference", "AsReferenceHasValue", "DynamicType", "OverwriteList", 
            "Packed"
        )));
  };

  function ProtoMemberAttribute_set_Name (value) {
    this.$name = value;
  };

  function ProtoMemberAttribute_set_Options (value) {
    this.options = value;
  };

  function ProtoMemberAttribute_set_OverwriteList (value) {
    if (value) {
      this.options = $T06().$Cast((this.options | $T06().OverwriteList));
      return;
    }
    this.options = $T06().$Cast((this.options & $T06().$Flags(
            "AsReference", "AsReferenceHasValue", "DynamicType", "Packed", 
            "Required"
        )));
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoMemberAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      ProtoMemberAttribute__ctor$00
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean], []), 
      ProtoMemberAttribute__ctor$01
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object], []), 
      ProtoMemberAttribute_CompareTo$02
    );

    $.Method({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type], []), 
      ProtoMemberAttribute_CompareTo$03
    );

    $.Method({Static:false, Public:true }, "get_AsReference", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ProtoMemberAttribute_get_AsReference
    );

    $.Method({Static:false, Public:false}, "get_AsReferenceHasValue", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ProtoMemberAttribute_get_AsReferenceHasValue
    );

    $.Method({Static:false, Public:true }, "get_DataFormat", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.DataFormat"), [], []), 
      ProtoMemberAttribute_get_DataFormat
    );

    $.Method({Static:false, Public:true }, "get_DynamicType", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ProtoMemberAttribute_get_DynamicType
    );

    $.Method({Static:false, Public:true }, "get_IsPacked", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ProtoMemberAttribute_get_IsPacked
    );

    $.Method({Static:false, Public:true }, "get_IsRequired", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ProtoMemberAttribute_get_IsRequired
    );

    $.Method({Static:false, Public:true }, "get_Name", 
      new JSIL.MethodSignature($.String, [], []), 
      ProtoMemberAttribute_get_Name
    );

    $.Method({Static:false, Public:true }, "get_Options", 
      new JSIL.MethodSignature($asm08.TypeRef("ProtoBuf.MemberSerializationOptions"), [], []), 
      ProtoMemberAttribute_get_Options
    );

    $.Method({Static:false, Public:true }, "get_OverwriteList", 
      new JSIL.MethodSignature($.Boolean, [], []), 
      ProtoMemberAttribute_get_OverwriteList
    );

    $.Method({Static:false, Public:true }, "get_Tag", 
      new JSIL.MethodSignature($.Int32, [], []), 
      ProtoMemberAttribute_get_Tag
    );

    $.Method({Static:false, Public:false}, "Rebase", 
      new JSIL.MethodSignature(null, [$.Int32], []), 
      ProtoMemberAttribute_Rebase
    );

    $.Method({Static:false, Public:true }, "set_AsReference", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      ProtoMemberAttribute_set_AsReference
    );

    $.Method({Static:false, Public:false}, "set_AsReferenceHasValue", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      ProtoMemberAttribute_set_AsReferenceHasValue
    );

    $.Method({Static:false, Public:true }, "set_DataFormat", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.DataFormat")], []), 
      ProtoMemberAttribute_set_DataFormat
    );

    $.Method({Static:false, Public:true }, "set_DynamicType", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      ProtoMemberAttribute_set_DynamicType
    );

    $.Method({Static:false, Public:true }, "set_IsPacked", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      ProtoMemberAttribute_set_IsPacked
    );

    $.Method({Static:false, Public:true }, "set_IsRequired", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      ProtoMemberAttribute_set_IsRequired
    );

    $.Method({Static:false, Public:true }, "set_Name", 
      new JSIL.MethodSignature(null, [$.String], []), 
      ProtoMemberAttribute_set_Name
    );

    $.Method({Static:false, Public:true }, "set_Options", 
      new JSIL.MethodSignature(null, [$asm08.TypeRef("ProtoBuf.MemberSerializationOptions")], []), 
      ProtoMemberAttribute_set_Options
    );

    $.Method({Static:false, Public:true }, "set_OverwriteList", 
      new JSIL.MethodSignature(null, [$.Boolean], []), 
      ProtoMemberAttribute_set_OverwriteList
    );

    $.Field({Static:false, Public:false}, "$name", $.String); 
    $.Field({Static:false, Public:false}, "dataFormat", $asm08.TypeRef("ProtoBuf.DataFormat")); 
    $.Field({Static:false, Public:false}, "tag", $.Int32); 
    $.Field({Static:false, Public:false}, "options", $asm08.TypeRef("ProtoBuf.MemberSerializationOptions")); 
    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "DataFormat", $asm08.TypeRef("ProtoBuf.DataFormat"));

    $.Property({Static:false, Public:true }, "Tag", $.Int32);

    $.Property({Static:false, Public:true }, "IsRequired", $.Boolean);

    $.Property({Static:false, Public:true }, "IsPacked", $.Boolean);

    $.Property({Static:false, Public:true }, "OverwriteList", $.Boolean);

    $.Property({Static:false, Public:true }, "AsReference", $.Boolean);

    $.Property({Static:false, Public:false}, "AsReferenceHasValue", $.Boolean);

    $.Property({Static:false, Public:true }, "DynamicType", $.Boolean);

    $.Property({Static:false, Public:true }, "Options", $asm08.TypeRef("ProtoBuf.MemberSerializationOptions"));

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("System.IComparable"), 
      /* 2 */ $asm07.TypeRef("System.IComparable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

/* enum ProtoBuf.MemberSerializationOptions */ 

JSIL.MakeEnum(
  "ProtoBuf.MemberSerializationOptions", true, {
    None: 0, 
    Packed: 1, 
    Required: 2, 
    AsReference: 4, 
    DynamicType: 8, 
    OverwriteList: 16, 
    AsReferenceHasValue: 32
  }, true
);

/* class ProtoBuf.ProtoPartialMemberAttribute */ 

(function ProtoPartialMemberAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.ProtoBuf.ProtoMemberAttribute)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.Helpers)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentNullException"), [$asm07.TypeRef("System.String")]))) ();
  };

  function ProtoPartialMemberAttribute__ctor (tag, memberName) {
    $T02().prototype._ctor.call(this, tag);
    if ($T03().IsNullOrEmpty(memberName)) {
      throw $S00().Construct("memberName");
    }
    this.memberName = memberName;
  };

  function ProtoPartialMemberAttribute_get_MemberName () {
    return this.memberName;
  };

  JSIL.MakeType({
      BaseType: $asm08.TypeRef("ProtoBuf.ProtoMemberAttribute"), 
      Name: "ProtoBuf.ProtoPartialMemberAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.String], []), 
      ProtoPartialMemberAttribute__ctor
    );

    $.Method({Static:false, Public:true }, "get_MemberName", 
      new JSIL.MethodSignature($.String, [], []), 
      ProtoPartialMemberAttribute_get_MemberName
    );

    $.Field({Static:false, Public:false, ReadOnly:true }, "memberName", $.String); 
    $.Property({Static:false, Public:true }, "MemberName", $.String);

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Class]; });

})();

/* class ProtoBuf.ProtoException */ 

(function ProtoException$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Exception)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Runtime.Serialization.SerializationInfo)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm07.System.Runtime.Serialization.StreamingContext)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.TypeRef("System.String")], []))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.TypeRef("System.String"), $asm07.TypeRef("System.Exception")], []))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")], []))) ();
  };

  function ProtoException__ctor$00 () {
    $T00().prototype._ctor.call(this);
  };

  function ProtoException__ctor$01 (message) {
    $S00().Call($T00().prototype, "_ctor", null, this, message);
  };

  function ProtoException__ctor$02 (message, innerException) {
    $S01().Call($T00().prototype, "_ctor", null, this, message, innerException);
  };

  function ProtoException__ctor$03 (info, context) {
    $S02().Call($T00().prototype, "_ctor", null, this, info, context);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Exception"), 
      Name: "ProtoBuf.ProtoException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ProtoException__ctor$00
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String], []), 
      ProtoException__ctor$01
    );

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Exception")], []), 
      ProtoException__ctor$02
    );

    $.Method({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm07.TypeRef("System.Runtime.Serialization.StreamingContext")], []), 
      ProtoException__ctor$03
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ProtoBuf.ProtoConverterAttribute */ 

(function ProtoConverterAttribute$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.Attribute)) ();
  };

  function ProtoConverterAttribute__ctor () {
    $T00().prototype._ctor.call(this);
  };

  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Attribute"), 
      Name: "ProtoBuf.ProtoConverterAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [], []), 
      ProtoConverterAttribute__ctor
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm07.System.AttributeTargets.Method]; });

})();

/* enum ProtoBuf.TimeSpanScale */ 

JSIL.MakeEnum(
  "ProtoBuf.TimeSpanScale", false, {
    Days: 0, 
    Hours: 1, 
    Minutes: 2, 
    Seconds: 3, 
    Milliseconds: 4, 
    Ticks: 5, 
    MinMax: 15
  }, false
);

/* class ProtoBuf.BclHelpers */ 

(function BclHelpers$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm07.System.DateTime)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm07.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm07.System.Runtime.Serialization.FormatterServices)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.ProtoBuf.ProtoReader)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm07.System.Int64)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm07.System.Int32)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm07.System.UInt64)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm07.System.UInt32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm08.ProtoBuf.SubItemToken)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm07.System.Boolean)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm07.System.Byte)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm07.System.Decimal)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm07.System.Guid)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm07.System.Int16)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm07.System.Object)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm08.ProtoBuf.BclHelpers_NetObjectOptions)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm08.ProtoBuf.NetObjectCache)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm07.System.String)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm08.ProtoBuf.ProtoException)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm07.System.Void)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm07.System.InvalidOperationException)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm07.System.Reflection.MemberInfo)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm07.System.TimeSpan)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm08.ProtoBuf.TimeSpanScale)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm08.ProtoBuf.WireType)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm08.ProtoBuf.ProtoWriter)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm07.System.ArgumentNullException)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize(System.Array.Of($asm07.System.Int32))) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize(System.Array.Of($asm07.System.Byte))) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.DateTime"), [
        $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Int32"), 
        $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Int32"), 
        $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Int32"), 
        $asm07.TypeRef("System.Int32")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Decimal"), [
        $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Int32"), 
        $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Boolean"), 
        $asm07.TypeRef("System.Byte")
      ]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.Guid"), [
        $asm07.TypeRef("System.Int32"), $asm07.TypeRef("System.Int16"), 
        $asm07.TypeRef("System.Int16"), $asm07.TypeRef("System.Byte"), 
        $asm07.TypeRef("System.Byte"), $asm07.TypeRef("System.Byte"), 
        $asm07.TypeRef("System.Byte"), $asm07.TypeRef("System.Byte"), 
        $asm07.TypeRef("System.Byte"), $asm07.TypeRef("System.Byte"), 
        $asm07.TypeRef("System.Byte")
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.Boolean"), [$asm07.TypeRef("System.Type"), $asm07.TypeRef("System.Type")], []))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm08.TypeRef("ProtoBuf.ProtoException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.InvalidOperationException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.ConstructorSignature($asm07.TypeRef("System.ArgumentNullException"), [$asm07.TypeRef("System.String")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$asm07.TypeRef("System.DateTime"), $asm07.TypeRef("System.DateTime")], []))) ();
  };

  function BclHelpers_GetUninitializedObject (type) {
    return $T02().GetUninitializedObject(type);
  };

  function BclHelpers_ReadDateTime (source) {
    var num = $thisType.ReadTimeSpanTicks(source);
    if (!$T04().op_Inequality(
        num, 
        $T04().Create(0, 0, 32768)
      )) {
      return $T00().MinValue;
    }
    if (!$T04().op_Inequality(
        num, 
        $T04().Create(16777215, 16777215, 32767)
      )) {
      return $T00().MaxValue;
    }
    return $thisType.EpochOrigin.AddTicks(num);
  };

  function BclHelpers_ReadDecimal (reader) {
    var num4 = 0;
    var num = $T06().Create(0, 0, 0);
    var num2 = 0;
    var num3 = 0;
    var token = $T03().StartSubItem(reader);

    while ((num4 = reader.ReadFieldHeader()) > 0) {
      switch (num4) {
        case 1: 
          num = reader.ReadUInt64();
          break;

        case 2: 
          num2 = reader.ReadUInt32();
          break;

        case 3: 
          num3 = reader.ReadUInt32();
          break;

        default: 
          reader.SkipField();
          break;

      }
    }
    $T03().EndSubItem(token, reader);
    if (!($T06().op_Inequality(
          num, 
          $T06().Create(0, 0, 0)
        ) || (num2 !== 0).valueOf())) {
      return 0;
    }
    var lo = ($T06().op_BitwiseAnd(
        num, 
        $T06().FromNumber(-1)
      )).ToNumber(4294967295, true);
    var mid = ($T06().op_BitwiseAnd(
        $T06().op_RightShift(num, 32), 
        $T06().FromNumber(-1)
      )).ToNumber(4294967295, true);
    var hi = $T05().$Cast(num2);
    var isNegative = ((num3 & 1) === 1);
    var scale = $T0A().$Cast(((num3 & 510) >>> 1));
    return $S01().Construct(lo, mid, hi, isNegative, scale);
  };

  function BclHelpers_ReadGuid (source) {
    var num3 = 0;
    var num = $T06().Create(0, 0, 0);
    var num2 = $T06().Create(0, 0, 0);
    var token = $T03().StartSubItem(source);

    while ((num3 = source.ReadFieldHeader()) > 0) {
      switch (num3) {
        case 1: 
          num = source.ReadUInt64();
          break;

        case 2: 
          num2 = source.ReadUInt64();
          break;

        default: 
          source.SkipField();
          break;

      }
    }
    $T03().EndSubItem(token, source);
    if (!($T06().op_Inequality(
          num, 
          $T06().Create(0, 0, 0)
        ) || $T06().op_Inequality(
          num2, 
          $T06().Create(0, 0, 0)
        ))) {
      return $T0C().Empty;
    }
    var num4 = ($T06().op_RightShift(num, 32)).ToNumber(4294967295, false);
    var a = (num).ToNumber(4294967295, false);
    var num5 = ($T06().op_RightShift(num2, 32)).ToNumber(4294967295, false);
    var num6 = (num2).ToNumber(4294967295, false);
    return $S02().Construct($T05().$Cast(a), $T0D().$Cast(num4), $T0D().$Cast((num4 >>> 16)), $T0A().$Cast(num6), $T0A().$Cast((num6 >>> 8)), $T0A().$Cast((num6 >>> 16)), $T0A().$Cast((num6 >>> 24)), $T0A().$Cast(num5), $T0A().$Cast((num5 >>> 8)), $T0A().$Cast((num5 >>> 16)), $T0A().$Cast((num5 >>> 24)));
  };

  function BclHelpers_ReadNetObject (value, source, key, $type, options) {
    var type = new JSIL.BoxedVariable($type);
    var num3 = 0;
    var token = $T03().StartSubItem(source);
    var num = -1;
    var num2 = -1;

    while ((num3 = source.ReadFieldHeader()) > 0) {
      switch (num3) {
        case 1: 
          var key2 = source.ReadInt32();
          value = source.get_NetCache().GetKeyedObject(key2);
          continue;

        case 2: 
          num = source.ReadInt32();
          continue;

        case 3: 
          key2 = source.ReadInt32();
          type.set($T01().$Cast(source.get_NetCache().GetKeyedObject(key2)));
          key = source.GetTypeKey(/* ref */ type);
          continue;

        case 4: 
          num2 = source.ReadInt32();
          continue;

        case 8: 
          var text = source.ReadString();
          type.set(source.DeserializeType(text));
          if ($S03().CallStatic($T01(), "op_Equality", null, type.get(), null)) {
            throw $S04().Construct(("Unable to resolve type: " + text + " (you can use the TypeModel.DynamicTypeFormatting event to provide a custom mapping)"));
          }
          if ($S03().CallStatic($T01(), "op_Equality", null, type.get(), $T11().__Type__)) {
            key = -1;
            continue;
          }
          key = source.GetTypeKey(/* ref */ type);
          if (key < 0) {
            throw $S05().Construct(JSIL.ConcatString("Dynamic type is not a contract-type: ", type.get().get_Name()));
          }
          continue;

        case 10: 
          var flag = $S03().CallStatic($T01(), "op_Equality", null, type.get(), $T11().__Type__);
          var flag2 = (value === null);
          var flag3 = (flag2 && 
            (flag || 
              ($T0F().$Cast((options & $T0F().LateSet)).valueOf() !== 0)));
          if (!((num < 0) || flag3)) {
            if (value === null) {
              source.TrapNextObject(num);
            } else {
              source.get_NetCache().SetKeyedObject(num, value);
            }
            if (num2 >= 0) {
              source.get_NetCache().SetKeyedObject(num2, type.get());
            }
          }
          var obj = value;
          if (flag) {
            value = source.ReadString();
          } else {
            value = $T03().ReadTypedObject(obj, key, source, type.get());
          }
          if (num >= 0) {
            if (!(!flag2 || flag3)) {
              obj = source.get_NetCache().GetKeyedObject(num);
            }
            if (flag3) {
              source.get_NetCache().SetKeyedObject(num, value);
              if (num2 >= 0) {
                source.get_NetCache().SetKeyedObject(num2, type.get());
              }
            }
          }
          if (!((num < 0) || 
              flag3 || (obj === value))) {
            throw $S04().Construct("A reference-tracked object changed reference during deserialization");
          }
          if (!((num >= 0) || (num2 < 0))) {
            source.get_NetCache().SetKeyedObject(num2, type.get());
            continue;
          }
          continue;

      }
      source.SkipField();
    }
    if (!((num < 0) || ($T0F().$Cast((options & $T0F().AsReference)).valueOf() !== 0))) {
      throw $S04().Construct("Object key in input stream, but reference-tracking was not expected");
    }
    $T03().EndSubItem(token, source);
    return value;
  };

  function BclHelpers_ReadTimeSpan (source) {
    var num = $thisType.ReadTimeSpanTicks(source);
    if (!$T04().op_Inequality(
        num, 
        $T04().Create(0, 0, 32768)
      )) {
      return $T16().MinValue;
    }
    if (!$T04().op_Inequality(
        num, 
        $T04().Create(16777215, 16777215, 32767)
      )) {
      return $T16().MaxValue;
    }
    return $T16().FromTicks(num);
  };

  function BclHelpers_ReadTimeSpanTicks (source) {
    var num2 = 0;
    switch (source.get_WireType().valueOf()) {
      case 1: 
        return source.ReadInt64();

      case 2: 
      case 3: 
        var token = $T03().StartSubItem(source);
        var timeSpanScale = $T17().Days;
        var num = $T04().Create(0, 0, 0);

        while ((num2 = source.ReadFieldHeader()) > 0) {
          switch (num2) {
            case 1: 
              source.Assert($T18().SignedVariant);
              num = source.ReadInt64();
              break;

            case 2: 
              timeSpanScale = $T17().$Cast(source.ReadInt32());
              break;

            default: 
              source.SkipField();
              break;

          }
        }
        $T03().EndSubItem(token, source);
        var timeSpanScale2 = timeSpanScale;
        switch (timeSpanScale2.valueOf()) {
          case 0: 
            return $T04().op_Multiplication(
              num, 
              $T04().Create(6930432, 51498, 0)
            );

          case 1: 
            return $T04().op_Multiplication(
              num, 
              $T04().Create(12871680, 2145, 0)
            );

          case 2: 
            return $T04().op_Multiplication(
              num, 
              $T04().Create(12797440, 35, 0)
            );

          case 3: 
            return $T04().op_Multiplication(
              num, 
              $T04().Create(10000000, 0, 0)
            );

          case 4: 
            return $T04().op_Multiplication(
              num, 
              $T04().Create(10000, 0, 0)
            );

          case 5: 
            return num;

          default: 
            if (timeSpanScale2 !== $T17().MinMax) {
              throw $S04().Construct(JSIL.ConcatString("Unknown timescale: ", timeSpanScale.toString()));
            }
            var num3 = num;
            if (!($T04().op_GreaterThan(
                  num3, 
                  $T04().Create(1, 0, 0)
                ) || $T04().op_LessThan(
                  num3, 
                  $T04().Create(16777215, 16777215, 65535)
                ))) {
              switch (($T04().op_Subtraction(
                    num3, 
                    $T04().Create(16777215, 16777215, 65535)
                  )).ToNumber(4294967295, true)) {
                case 0: 
                  return $T04().Create(0, 0, 32768);

                case 2: 
                  return $T04().Create(16777215, 16777215, 32767);

              }
            }
            throw $S04().Construct(JSIL.ConcatString("Unknown min/max value: ", (num).toString()));

        }
        break;

      default: 
        throw $S04().Construct(JSIL.ConcatString("Unexpected wire-type: ", source.get_WireType().toString()));

    }
  };

  function BclHelpers_WriteDateTime (value, dest) {
    if (dest === null) {
      throw $S06().Construct("dest");
    }
    switch (dest.get_WireType().valueOf()) {
      case 2: 
      case 3: 
        if ($T00().op_Equality(value.MemberwiseClone(), $T00().MaxValue.MemberwiseClone())) {
          var timeSpan = $T16().MaxValue.MemberwiseClone();
        } else if ($T00().op_Equality(value.MemberwiseClone(), $T00().MinValue.MemberwiseClone())) {
          timeSpan = $T16().MinValue.MemberwiseClone();
        } else {
          timeSpan = $S07().CallStatic($T00(), "op_Subtraction", null, value, $thisType.EpochOrigin).MemberwiseClone();
        }
        break;

      default: 
        timeSpan = $S07().CallStatic($T00(), "op_Subtraction", null, value, $thisType.EpochOrigin).MemberwiseClone();
        break;

    }
    $thisType.WriteTimeSpan(timeSpan.MemberwiseClone(), dest);
  };

  function BclHelpers_WriteDecimal (value, writer) {
    var bits = $T0B().GetBits(value);
    var num = $T06().$Cast($T06().op_LeftShift(($T04().FromNumber(bits[1])).ToUInt64(), 32));
    var num2 = ($T04().op_BitwiseAnd(
        $T04().FromNumber(bits[0]), 
        ($T06().FromNumber(-1)).ToInt64()
      )).ToUInt64();
    var num3 = $T06().op_BitwiseOr(
      num, 
      num2
    );
    var num4 = $T07().$Cast(bits[2]);
    var num5 = $T07().$Cast((((bits[3] >> 15) & 510) | ((bits[3] >> 31) & 1)));
    var token = $T19().StartSubItem(null, writer);
    if (!$T06().op_Equality(
        num3, 
        $T06().Create(0, 0, 0)
      )) {
      $T19().WriteFieldHeader(1, $T18().Variant, writer);
      $T19().WriteUInt64(num3, writer);
    }
    if (num4 !== 0) {
      $T19().WriteFieldHeader(2, $T18().Variant, writer);
      $T19().WriteUInt32(num4, writer);
    }
    if (num5 !== 0) {
      $T19().WriteFieldHeader(3, $T18().Variant, writer);
      $T19().WriteUInt32(num5, writer);
    }
    $T19().EndSubItem(token, writer);
  };

  function BclHelpers_WriteGuid (value, dest) {
    var data = value.ToByteArray();
    var token = $T19().StartSubItem(null, dest);
    if ($T0C().op_Inequality(value.MemberwiseClone(), $T0C().Empty.MemberwiseClone())) {
      $T19().WriteFieldHeader(1, $T18().Fixed64, dest);
      $T19().WriteBytes(data, 0, 8, dest);
      $T19().WriteFieldHeader(2, $T18().Fixed64, dest);
      $T19().WriteBytes(data, 8, 8, dest);
    }
    $T19().EndSubItem(token, dest);
  };

  function BclHelpers_WriteNetObject (value, dest, key, options) {
    var flag4 = new JSIL.BoxedVariable(false);
    var flag5 = new JSIL.BoxedVariable(false);
    if (dest === null) {
      throw $S06().Construct("dest");
    }
    var flag = ($T0F().$Cast((options & $T0F().DynamicType)).valueOf() !== 0);
    var flag2 = ($T0F().$Cast((options & $T0F().AsReference)).valueOf() !== 0);
    var wireType = dest.get_WireType();
    var token = $T19().StartSubItem(null, dest);
    var flag3 = true;
    if (flag2) {
      var value2 = dest.get_NetCache().AddObjectKey(value, /* ref */ flag4);
      $T19().WriteFieldHeader((flag4.get() ? 1 : 2), $T18().Variant, dest);
      $T19().WriteInt32(value2, dest);
      if (flag4.get()) {
        flag3 = false;
      }
    }
    var type = new JSIL.BoxedVariable(null);
    if (flag3) {
      if (flag) {
        type.set(JSIL.GetType(value));
        if ($T11().$As(value) === null) {
          key = dest.GetTypeKey(/* ref */ type);
          if (key < 0) {
            throw $S05().Construct(JSIL.ConcatString("Dynamic type is not a contract-type: ", type.get().get_Name()));
          }
        }
        var value3 = dest.get_NetCache().AddObjectKey(type.get(), /* ref */ flag5);
        $T19().WriteFieldHeader((flag5.get() ? 3 : 4), $T18().Variant, dest);
        $T19().WriteInt32(value3, dest);
        if (!flag5.get()) {
          $T19().WriteFieldHeader(8, $T18().String, dest);
          $T19().WriteString(dest.SerializeType(type.get()), dest);
        }
      }
      $T19().WriteFieldHeader(10, wireType, dest);
      if ($T11().$As(value) !== null) {
        $T19().WriteString($T11().$Cast(value), dest);
      } else {
        $T19().WriteObject(value, key, dest);
      }
    }
    $T19().EndSubItem(token, dest);
  };

  function BclHelpers_WriteTimeSpan (timeSpan, dest) {
    if (dest === null) {
      throw $S06().Construct("dest");
    }
    switch (dest.get_WireType().valueOf()) {
      case 1: 
        $T19().WriteInt64(timeSpan.get_Ticks(), dest);
        return;

      case 2: 
      case 3: 
        var num = timeSpan.get_Ticks();
        if ($T16().op_Equality(timeSpan.MemberwiseClone(), $T16().MaxValue.MemberwiseClone())) {
          num = $T04().Create(1, 0, 0);
          var timeSpanScale = $T17().MinMax;
        } else if ($T16().op_Equality(timeSpan.MemberwiseClone(), $T16().MinValue.MemberwiseClone())) {
          num = $T04().Create(16777215, 16777215, 65535);
          timeSpanScale = $T17().MinMax;
        } else if (!$T04().op_Inequality(
            $T04().op_Modulus(
              num, 
              $T04().Create(6930432, 51498, 0)
            ), 
            $T04().Create(0, 0, 0)
          )) {
          timeSpanScale = $T17().Days;
          num = $T04().op_Division(
            num, 
            $T04().Create(6930432, 51498, 0)
          );
        } else if (!$T04().op_Inequality(
            $T04().op_Modulus(
              num, 
              $T04().Create(12871680, 2145, 0)
            ), 
            $T04().Create(0, 0, 0)
          )) {
          timeSpanScale = $T17().Hours;
          num = $T04().op_Division(
            num, 
            $T04().Create(12871680, 2145, 0)
          );
        } else if (!$T04().op_Inequality(
            $T04().op_Modulus(
              num, 
              $T04().Create(12797440, 35, 0)
            ), 
            $T04().Create(0, 0, 0)
          )) {
          timeSpanScale = $T17().Minutes;
          num = $T04().op_Division(
            num, 
            $T04().Create(12797440, 35, 0)
          );
        } else if (!$T04().op_Inequality(
            $T04().op_Modulus(
              num, 
              $T04().Create(10000000, 0, 0)
            ), 
            $T04().Create(0, 0, 0)
          )) {
          timeSpanScale = $T17().Seconds;
          num = $T04().op_Division(
            num, 
            $T04().Create(10000000, 0, 0)
          );
        } else if (!$T04().op_Inequality(
            $T04().op_Modulus(
              num, 
              $T04().Create(10000, 0, 0)
            ), 
            $T04().Create(0, 0, 0)
          )) {
          timeSpanScale = $T17().Milliseconds;
          num = $T04().op_Division(
            num, 
            $T04().Create(10000, 0, 0)
          );
        } else {
          timeSpanScale = $T17().Ticks;
        }
        var token = $T19().StartSubItem(null, dest);
        if (!$T04().op_Equality(
            num, 
            $T04().Create(0, 0, 0)
          )) {
          $T19().WriteFieldHeader(1, $T18().SignedVariant, dest);
          $T19().WriteInt64(num, dest);
        }
        if (timeSpanScale.valueOf() !== 0) {
          $T19().WriteFieldHeader(2, $T18().Variant, dest);
          $T19().WriteInt32(timeSpanScale.valueOf(), dest);
        }
        $T19().EndSubItem(token, dest);
        return;

      default: 
        throw $S04().Construct(JSIL.ConcatString("Unexpected wire-type: ", dest.get_WireType().toString()));

    }
  };

  JSIL.MakeStaticClass("ProtoBuf.BclHelpers", true, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Method({Static:true , Public:true }, "GetUninitializedObject", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Type")], []), 
      BclHelpers_GetUninitializedObject
    );

    $.Method({Static:true , Public:true }, "ReadDateTime", 
      new JSIL.MethodSignature($asm07.TypeRef("System.DateTime"), [$asm08.TypeRef("ProtoBuf.ProtoReader")], []), 
      BclHelpers_ReadDateTime
    );

    $.Method({Static:true , Public:true }, "ReadDecimal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Decimal"), [$asm08.TypeRef("ProtoBuf.ProtoReader")], []), 
      BclHelpers_ReadDecimal
    );

    $.Method({Static:true , Public:true }, "ReadGuid", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Guid"), [$asm08.TypeRef("ProtoBuf.ProtoReader")], []), 
      BclHelpers_ReadGuid
    );

    $.Method({Static:true , Public:true }, "ReadNetObject", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm08.TypeRef("ProtoBuf.ProtoReader"), 
          $.Int32, $asm07.TypeRef("System.Type"), 
          $asm08.TypeRef("ProtoBuf.BclHelpers/NetObjectOptions")
        ], []), 
      BclHelpers_ReadNetObject
    );

    $.Method({Static:true , Public:true }, "ReadTimeSpan", 
      new JSIL.MethodSignature($asm07.TypeRef("System.TimeSpan"), [$asm08.TypeRef("ProtoBuf.ProtoReader")], []), 
      BclHelpers_ReadTimeSpan
    );

    $.Method({Static:true , Public:false}, "ReadTimeSpanTicks", 
      new JSIL.MethodSignature($.Int64, [$asm08.TypeRef("ProtoBuf.ProtoReader")], []), 
      BclHelpers_ReadTimeSpanTicks
    );

    $.Method({Static:true , Public:true }, "WriteDateTime", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.DateTime"), $asm08.TypeRef("ProtoBuf.ProtoWriter")], []), 
      BclHelpers_WriteDateTime
    );

    $.Method({Static:true , Public:true }, "WriteDecimal", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Decimal"), $asm08.TypeRef("ProtoBuf.ProtoWriter")], []), 
      BclHelpers_WriteDecimal
    );

    $.Method({Static:true , Public:true }, "WriteGuid", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Guid"), $asm08.TypeRef("ProtoBuf.ProtoWriter")], []), 
      BclHelpers_WriteGuid
    );

    $.Method({Static:true , Public:true }, "WriteNetObject", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm08.TypeRef("ProtoBuf.ProtoWriter"), 
          $.Int32, $asm08.TypeRef("ProtoBuf.BclHelpers/NetObjectOptions")
        ], []), 
      BclHelpers_WriteNetObject
    );

    $.Method({Static:true , Public:true }, "WriteTimeSpan", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.TimeSpan"), $asm08.TypeRef("ProtoBuf.ProtoWriter")], []), 
      BclHelpers_WriteTimeSpan
    );

    $.Constant({Static:true , Public:false}, "FieldTimeSpanValue", 1); 
    $.Constant({Static:true , Public:false}, "FieldTimeSpanScale", 2); 
    $.Constant({Static:true , Public:false}, "FieldDecimalLow", 1); 
    $.Constant({Static:true , Public:false}, "FieldDecimalHigh", 2); 
    $.Constant({Static:true , Public:false}, "FieldDecimalSignScale", 3); 
    $.Constant({Static:true , Public:false}, "FieldGuidLow", 1); 
    $.Constant({Static:true , Public:false}, "FieldGuidHigh", 2); 
    $.Constant({Static:true , Public:false}, "FieldExistingObjectKey", 1); 
    $.Constant({Static:true , Public:false}, "FieldNewObjectKey", 2); 
    $.Constant({Static:true , Public:false}, "FieldExistingTypeKey", 3); 
    $.Constant({Static:true , Public:false}, "FieldNewTypeKey", 4); 
    $.Constant({Static:true , Public:false}, "FieldTypeName", 8); 
    $.Constant({Static:true , Public:false}, "FieldObject", 10); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "EpochOrigin", $asm07.TypeRef("System.DateTime")); 
    function BclHelpers__cctor () {
      $thisType.EpochOrigin = new $asm07.System.DateTime();
      $thisType.EpochOrigin = $S00().Construct(1970, 1, 1, 0, 0, 0, 0);
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      new JSIL.MethodSignature(null, [], []), 
      BclHelpers__cctor
    );

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum ProtoBuf.BclHelpers/NetObjectOptions */ 

JSIL.MakeEnum(
  "ProtoBuf.BclHelpers/NetObjectOptions", false, {
    None: 0, 
    AsReference: 1, 
    DynamicType: 2, 
    UseConstructor: 4, 
    LateSet: 8
  }, true
);

