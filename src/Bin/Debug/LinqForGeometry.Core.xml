<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LinqForGeometry.Core</name>
    </assembly>
    <members>
        <member name="T:LinqForGeometry.Core.Exceptions.MeshLeakException">
            <summary>
            This is an exception used in the importer.
            </summary>
        </member>
        <member name="T:LinqForGeometry.Core.LFGMessages">
            <summary>
            This class just handles some messages i use to generate output in the program.
            It's just easier to handle the messages this way than searching for all strings to change.
            </summary>
        </member>
        <member name="T:LinqForGeometry.Core.Importer.GeoFace">
            <summary>
            This struct is a helper 'container' to temporary save date during the import and convertion process.
            </summary>
        </member>
        <member name="T:LinqForGeometry.Core.Importer.WavefrontImporter`1">
            <summary>
            This is an importer for the <a href="http://en.wikipedia.org/wiki/Wavefront_.obj_file">Wavefront obj</a> computer graphics file
            To use it just create an instance and pass the file path to the LoadAsset() method
            </summary>
        </member>
        <member name="M:LinqForGeometry.Core.Importer.WavefrontImporter`1.LoadFile(System.String)">
            <summary>
            This loads a file to the importer object
            </summary>
            <param name="pathToAsset">The path to the asset to be loaded in the system</param>
        </member>
        <member name="M:LinqForGeometry.Core.Importer.WavefrontImporter`1.LoadAsset(System.String)">
            <summary>
            Loads an asset from file to the memory.
            </summary>
            <param name="pathToAsset"></param>
        </member>
        <member name="T:LinqForGeometry.Core.Geometry">
            <summary>
            This is the main object for the LINQForGeometry project.
            This object contains a complete model as a mesh and the basic iterators.
            </summary>
        </member>
        <member name="F:LinqForGeometry.Core.Geometry._Changes">
            <summary>
            Bool. Should be set to true, if geometrical changes have been done to the mesh.
            </summary>
        </member>
        <member name="F:LinqForGeometry.Core.Geometry._LverticeHndl">
            <summary>
            This list contains the handles to vertices.
            </summary>
        </member>
        <member name="F:LinqForGeometry.Core.Geometry._LedgeHndl">
            <summary>
            This list contains handles to edges
            </summary>
        </member>
        <member name="F:LinqForGeometry.Core.Geometry._LfaceHndl">
            <summary>
            This list contains handles to faces
            </summary>
        </member>
        <member name="F:LinqForGeometry.Core.Geometry._LvertexVal">
            <summary>
            Contains real vertex data as float3.
            </summary>
        </member>
        <member name="F:LinqForGeometry.Core.Geometry._LfaceNormals">
            <summary>
            Contains real face normal data as float3.
            </summary>
        </member>
        <member name="F:LinqForGeometry.Core.Geometry._LVertexNormals">
            <summary>
            Contains real vertex normal data as float3
            </summary>
        </member>
        <member name="F:LinqForGeometry.Core.Geometry._SmoothingAngle">
            <summary>
            The smoothing angle for the edged based vertex normal calculation.
            Default is 89.9degrees.
            </summary>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.#ctor">
            <summary>
            Constructor for the GeometryData class.
            </summary>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.LoadAsset(System.String)">
            <summary>
            Loads an asset specified by the path string.
            </summary>
            <param name="path">Path to the wavefront.obj.model file.</param>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.ToMesh(System.Boolean)">
            <summary>
            This method converts the data structure to a fusee readable mesh structure
            </summary>
            <param name="shouldUseTriangulation">Boolean. True if the mesh should be triangulated.</param>
            <returns>A fusee readable Mesh object</returns>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.TriangulateGeometry">
            <summary>
            This method converts a quad based 'Geometry' object to a triangle based one.
            </summary>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.AddVertex(Fusee.Math.float3)">
            <summary>
            Adds a vertex to the geometry container.
            Will return a handle to the newly inserted or still existing vertex.
            </summary>
            <param name="val">float3 value to insert</param>
            <returns>Returns a handle to the just inserted vertex or a handle to an existing one because the given one was already inserterd.</returns>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.DoesVertexExist(Fusee.Math.float3)">
            <summary>
            Checks if a vertex already exists in the value list
            </summary>
            <param name="v">VertexType parameter (e.g. float3)</param>
            <returns>boolean, true if vertex does alreadyexist</returns>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.AddFace(LinqForGeometry.Core.Importer.GeoFace)">
            <summary>
            Adds a face from the importer to the geometry container
            </summary>
            <param name="gf">GeoFace object from the importer</param>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.CreateConnection(LinqForGeometry.Core.Handles.HandleVertex,LinqForGeometry.Core.Handles.HandleVertex)">
            <summary>
            Establishes a connection between two vertices.
            1) Creates two half-edges
            2) Fills them with information
            3) Creates an edge pointer container and adds it to the geo container.
            4) returns a handle to an edge
            </summary>
            <param name="fromVert">HandleVertex from which vertex</param>
            <param name="toVert">Handlevertex to which vertex</param>
            <returns>Returns a handle to the half-edge that has just been inserted</returns>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.ReuseExistingConnection(LinqForGeometry.Core.Handles.HandleEdge,LinqForGeometry.Core.Handles.HandleVertex,LinqForGeometry.Core.Handles.HandleVertex)">
            <summary>
            For testing only now.
            </summary>
            <param name="existingEdge"></param>
            <param name="fromVert"></param>
            <param name="toVert"></param>
            <returns></returns>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.CreateAllNewConnection(LinqForGeometry.Core.Handles.HandleVertex,LinqForGeometry.Core.Handles.HandleVertex)">
            <summary>
            For testing now only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.DoesConnectionExist(LinqForGeometry.Core.Handles.HandleVertex,LinqForGeometry.Core.Handles.HandleVertex)">
            <summary>
            Only for testing now.
            </summary>
            <param name="fromVert"></param>
            <param name="toVert"></param>
            <returns></returns>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.CalcFaceNormal(LinqForGeometry.Core.Handles.HandleFace)">
            <summary>
            This method adds a face normal vector to a list.
            The vector is calculated for the face which handle the method expects.
            </summary>
            <param name="faceHandle">Handle to a face to calculate the normal for.</param>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.CalcVertexNormal(LinqForGeometry.Core.Handles.HandleVertex)">
            <summary>
            This method calculates vertex normals for a specific vertex in the geometry and inserts them at the corresponding half-edges on the correct faces.
            This method uses an angle based algorithm to determine whether to calculate with another faces normal or not.
            </summary>
            <param name="vertexHandle">A handle for the vertex to calc the normals for.</param>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.UpdateCWHedges(System.Collections.Generic.List{LinqForGeometry.Core.Handles.HandleEdge})">
            <summary>
            Updates the "inner" half edges clockwise so the next pointers are correct.
            Is called after a face is inserted.
            </summary>
            <param name="edgeList">A list of edges that belong to a specific face</param>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.EnAllVertices">
            <summary>
            Returns an enumerable of all vertices handles in the geometry structure.
            </summary>
            <returns>IEnumerable of type HandleVertex</returns>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.EnAllEdges">
            <summary>
            Returns an enumerable of all edge handles in the geometry structure.
            </summary>
            <returns>IEnumerable of type HandleEdge</returns>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.EnAllFaces">
            <summary>
            Returns an enumerable of all face handles in the geometry structure.
            </summary>
            <returns>IEnumerable of type HandleFace</returns>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.EnStarVertexVertex(LinqForGeometry.Core.Handles.HandleVertex)">
            <summary>
            Iterator.
            Circulate around a given vertex and enumerate all vertices connected by a direct edge.
            </summary>
            <param name="vertexHandle">A handle to a vertex to use as a 'center' vertex.</param>
            <returns>An Enumerable of VertexHandles to be used in loops, etc.</returns>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.EnVertexIncomingHalfEdge(LinqForGeometry.Core.Handles.HandleVertex)">
            <summary>
            Iterator.
            Circulate around a given vertex and enumerate all incoming halfedges.
            </summary>
            <param name="vertexHandle">A handle to a vertex to use as a 'center' vertex.</param>
            <returns>An Enumerable of HalfEdge handles to be used in loops, etc.</returns>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.EnVertexOutgoingHalfEdge(LinqForGeometry.Core.Handles.HandleVertex)">
            <summary>
            Iterator.
            Circulate around a given vertex and enumerate all outgoing halfedges.
            </summary>
            <param name="vertexHandle">A handle to a vertex to use as a 'center' vertex.</param>
            <returns>An Enumerable of HalfEdge handles to be used in loops, etc.</returns>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.EnVertexAdjacentFaces(LinqForGeometry.Core.Handles.HandleVertex)">
            <summary>
            Iterator.
            Circulate around a given vertex and enumerate all faces adjacent to the center vertex.
            </summary>
            <param name="hv">A handle to a vertex to use as a 'center' vertex.</param>
            <param name="vertexHandle">Handle to the vertex to do this operation on.</param>
            <returns>An Enumerable of HalfEdge handles to be used in loops, etc.</returns>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.EnFaceAdjacentHalfEdges(LinqForGeometry.Core.Handles.HandleFace)">
            <summary>
            Iterator.
            This is a method that retrieves all halfedge handles which belong to a specific face handle.
            </summary>
            <param name="faceHandle">A handle to the face to get the half-edges from.</param>
            <returns>An Enumerable of haldedge pointer containers.</returns>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.EnFaceAdjacentVertices(LinqForGeometry.Core.Handles.HandleFace)">
            <summary>
            Iterator.
            Circulate around all the vertices of a given face handle.
            </summary>
            <param name="faceHandle">A handle to a face used as the 'center' face.</param>
            <returns>An Enumerable of vertex handles to be used in loops, etc.</returns>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.EnFaceAdjacentFaces(LinqForGeometry.Core.Handles.HandleFace)">
            <summary>
            Iterator.
            Circulate around all the faces surrounding a specific face.
            </summary>
            <param name="faceHandle">A handle to a face used as the 'center' face.</param>
            <returns>An Enumerable of face handles to be used in loops, etc.</returns>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.ResetGeometryToDefault">
            <summary>
            Resets the geometry object to default scaling etc.
            </summary>
            <returns>Boolean. True if succesful.</returns>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.SetVertexDefaults">
            <summary>
            Set the vertex defaults by using the actual vertices.
            This is called before the first change to a model is done.
            </summary>
        </member>
        <member name="M:LinqForGeometry.Core.Geometry.ResetVerticesToDefault">
            <summary>
            Used for developing and debugging.
            Resets geometry object to the data it had when initially loaded.
            </summary>
        </member>
        <member name="P:LinqForGeometry.Core.Geometry._DoCalcVertexNormals">
            <summary>
            Accessor for the _VertexNormalActive Var. Set this to true to enable vertex normal calculation and false to not do the calculation.
            </summary>
        </member>
        <member name="T:LinqForGeometry.Core.Handles.HandleFaceNormal">
            <summary>
            This is a handle struct for a 'face normal'.
            If invalid, the handle is -1. If the value is 0 it is a valid handle. (Because it's a possible valid array index)
            </summary>
        </member>
        <member name="M:LinqForGeometry.Core.Handles.HandleFaceNormal.#ctor(System.Int32)">
            <summary>
            Constructor for this struct.
            </summary>
            <param name="index">An array style index pointing to the real data container</param>
        </member>
        <member name="M:LinqForGeometry.Core.Handles.HandleFaceNormal.op_Implicit(LinqForGeometry.Core.Handles.HandleFaceNormal)~System.Int32">
            <summary>
            Implicitly converts the Handle to an integer value.
            </summary>
            <param name="handle">Expects a 'HandleVertex' struct as param.</param>
            <returns>Returns an int 'adress' value.</returns>
        </member>
        <member name="P:LinqForGeometry.Core.Handles.HandleFaceNormal.isValid">
            <summary>
            This 'object' is valid when the _DataIndex is >= 0
            </summary>
        </member>
        <member name="T:LinqForGeometry.Core.Handles.HandleVertex">
            <summary>
            This is a handle struct for a 'Vertex'.
            If invalid, the handle is -1. If the value is 0 it is a valid handle. (Because it's a possible valid array index)
            </summary>
        </member>
        <member name="M:LinqForGeometry.Core.Handles.HandleVertex.#ctor(System.Int32)">
            <summary>
            Constructor for this struct.
            </summary>
            <param name="index">An array style index pointing to the real data container</param>
        </member>
        <member name="M:LinqForGeometry.Core.Handles.HandleVertex.op_Implicit(LinqForGeometry.Core.Handles.HandleVertex)~System.Int32">
            <summary>
            Implicitly converts the Handle to an integer value.
            </summary>
            <param name="handle">Expects a 'HandleFace' struct as param.</param>
            <returns>Returns an int 'adress' value.</returns>
        </member>
        <member name="P:LinqForGeometry.Core.Handles.HandleVertex.isValid">
            <summary>
            This 'object' is valid when the _DataIndex is >= 0
            </summary>
        </member>
        <member name="T:LinqForGeometry.Core.Handles.HandleFace">
            <summary>
            This is a handle struct for a 'Face'.
            If invalid, the handle is -1. If the value is 0 it is a valid handle. (Because it's a possible valid array index)
            </summary>
        </member>
        <member name="M:LinqForGeometry.Core.Handles.HandleFace.#ctor(System.Int32)">
            <summary>
            Constructor for this struct.
            </summary>
            <param name="index">An array style index pointing to the real data container</param>
        </member>
        <member name="M:LinqForGeometry.Core.Handles.HandleFace.op_Implicit(LinqForGeometry.Core.Handles.HandleFace)~System.Int32">
            <summary>
            Implicitly converts the Handle to an integer value.
            </summary>
            <param name="handle">Expects a 'HandleFace' struct as param.</param>
            <returns>Returns an int 'adress' value.</returns>
        </member>
        <member name="P:LinqForGeometry.Core.Handles.HandleFace.isValid">
            <summary>
            This 'object' is valid when the _DataIndex is >= 0
            </summary>
        </member>
        <member name="T:LinqForGeometry.Core.Handles.HandleHalfEdge">
            <summary>
            This is a handle struct for a 'HalfEdge'.
            If invalid, the handle is -1. If the value is 0 it is a valid handle. (Because it's a possible valid array index)
            </summary>
        </member>
        <member name="M:LinqForGeometry.Core.Handles.HandleHalfEdge.#ctor(System.Int32)">
            <summary>
            Constructor for this struct.
            </summary>
            <param name="index">An array style index pointing to the real data container</param>
        </member>
        <member name="M:LinqForGeometry.Core.Handles.HandleHalfEdge.op_Implicit(LinqForGeometry.Core.Handles.HandleHalfEdge)~System.Int32">
            <summary>
            Implicitly converts the Handle to an integer value.
            </summary>
            <param name="handle">Expects a 'HandleFace' struct as param.</param>
            <returns>Returns an int 'adress' value.</returns>
        </member>
        <member name="P:LinqForGeometry.Core.Handles.HandleHalfEdge.isValid">
            <summary>
            This 'object' is valid when the _DataIndex is >= 0
            </summary>
        </member>
        <member name="T:LinqForGeometry.Core.Handles.HandleEdge">
            <summary>
            This is a handle struct for an 'Edge'.
            If invalid, the handle is -1. If the value is 0 it is a valid handle. (Because it's a possible valid array index)
            </summary>
        </member>
        <member name="M:LinqForGeometry.Core.Handles.HandleEdge.#ctor(System.Int32)">
            <summary>
            Constructor for this struct.
            </summary>
            <param name="index">An array style index pointing to the real data container</param>
        </member>
        <member name="M:LinqForGeometry.Core.Handles.HandleEdge.op_Implicit(LinqForGeometry.Core.Handles.HandleEdge)~System.Int32">
            <summary>
            Implicitly converts the Handle to an integer value.
            </summary>
            <param name="handle">Expects a 'HandleFace' struct as param.</param>
            <returns>Returns an int 'adress' value.</returns>
        </member>
        <member name="P:LinqForGeometry.Core.Handles.HandleEdge.isValid">
            <summary>
            This 'object' is valid when the _DataIndex is >= 0
            </summary>
        </member>
        <member name="T:LinqForGeometry.Core.Handles.HandleVertexNormal">
            <summary>
            This is a handle struct for a 'Vertex'.
            If invalid, the handle is -1. If the value is 0 it is a valid handle. (Because it's a possible valid array index)
            </summary>
        </member>
        <member name="M:LinqForGeometry.Core.Handles.HandleVertexNormal.#ctor(System.Int32)">
            <summary>
            Constructor for this struct.
            </summary>
            <param name="index">An array style index pointing to the real data container</param>
        </member>
        <member name="M:LinqForGeometry.Core.Handles.HandleVertexNormal.op_Implicit(LinqForGeometry.Core.Handles.HandleVertexNormal)~System.Int32">
            <summary>
            Implicitly converts the Handle to an integer value.
            </summary>
            <param name="handle">Expects a 'HandleVertex' struct as param.</param>
            <returns>Returns an int 'adress' value.</returns>
        </member>
        <member name="P:LinqForGeometry.Core.Handles.HandleVertexNormal.isValid">
            <summary>
            This 'object' is valid when the _DataIndex is >= 0
            </summary>
        </member>
        <member name="T:LinqForGeometry.Core.Handles.HandleVertexUV">
            <summary>
            This is a handle struct for a 'Vertex uv coordinate'.
            If invalid, the handle is -1. If the value is 0 it is a valid handle. (Because it's a possible valid array index)
            </summary>
        </member>
        <member name="M:LinqForGeometry.Core.Handles.HandleVertexUV.#ctor(System.Int32)">
            <summary>
            Constructor for this struct.
            </summary>
            <param name="index">An array style index pointing to the real data container</param>
        </member>
        <member name="M:LinqForGeometry.Core.Handles.HandleVertexUV.op_Implicit(LinqForGeometry.Core.Handles.HandleVertexUV)~System.Int32">
            <summary>
            Implicitly converts the Handle to an integer value.
            </summary>
            <param name="handle">Expects a 'HandleVertex' struct as param.</param>
            <returns>Returns an int 'adress' value.</returns>
        </member>
        <member name="P:LinqForGeometry.Core.Handles.HandleVertexUV.isValid">
            <summary>
            This 'object' is valid when the _DataIndex is >= 0
            </summary>
        </member>
        <member name="T:LinqForGeometry.Core.PtrContainer.VertexPtrCont">
            <summary>
            This is a vertex 'Pointer Container'.
            The Reference to the next 'object' are stored in here depending on the 'half-edge data structure'
            Every Vertex has a reference to one of his outgoing 'Half-Edges'
            </summary>
        </member>
        <member name="T:LinqForGeometry.Core.PtrContainer.FacePtrCont">
            <summary>
            This is a Vertex 'Pointer Container'.
            The Reference to the next 'object' are stored in here depending on the 'half-edge data strucute'
            Every Vertex has a reference to one of his outgoing 'Half-Edges'
            </summary>
        </member>
        <member name="T:LinqForGeometry.Core.PtrContainer.HEdgePtrCont">
            <summary>
            This is a half-edge 'Pointer Container'.
            The Reference to the next 'object' are stored in here depending on the 'half-edge data strucute'
            Every half-edge has the following references:
            a reference to it's direct neighbour half-edge
            a reference to the next half-edge in clock wise order.
            a reference to a vertex the half-edge points to.
            a reference to a face the half-edge belongs to.
            </summary>
        </member>
        <member name="T:LinqForGeometry.Core.PtrContainer.EdgePtrCont">
            <summary>
            This is a edge 'Pointer Container'.
            The Reference to the next 'object' are stored in here depending on the 'half-edge data strucute'
            Every Vertex has a reference to one of his outgoing 'Half-Edges'
            </summary>
        </member>
    </members>
</doc>
